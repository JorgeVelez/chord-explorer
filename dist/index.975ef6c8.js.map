{"mappings":"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K;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAK;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAK;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAkB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YAAC;YAAM;SAAmB;QAAC,MAAK;YA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D,MAAM,sBAAsB,oBAAoB;QAChD,IAAI,aAAa,eAAe,IAAI,CAAA;YAChC,OAAO,CAAA,GAAA,gBAAQ,EAAE,qBAAqB;QAC1C;QAEA,aAAa,YAAY,WAAW,KAAK;QACzC,UAAU,YAAa,CAAA,GAAA,YAAI,EAAE,oBAAoB,iBAAe,eAAe;QAE/E,YAAY,KAAK;IACrB;IACA,eAAc,WAAW,EAAE,OAAO;QAC9B,IAAI,UAAU,SAAS,cAAc;QACrC,QAAQ,YAAY;QACpB,OAAO;IACX;AACJ;AAEA,MAAM,cAAc;IAChB;IACI,6BAA6B;IAC7B,qBAAqB;IACrB,mCAAmC;IACnC,uDAAuD;IACvD,iCAAiC;IACjC,IAAI;IAER;IACA,MAAK,aAAa;QAEd,MAAM,mBAAmB,cAAc,IAAI,CAAA;YACvC,OAAO,CAAA,GAAA,WAAG,EAAE,UAAU;QAC1B;QACA,MAAM,OAAO;QACb,iBAAiB,QAAQ,CAAA;YAErB,MAAM,KAAK,eAAe;YAC1B,QAAQ,SAAS,gBAAgB;gBAAC,UAAU;YAAE;QAClD;IACJ;AACJ;AAEA,IAAI;;;;;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A,2C;A,0C;A,qD;A,2C;A,qD;A,2C;A;;A;A;;A;;A;;A;A,wB;A;;A;;A;;A;;A;;A;;A;;A;;A;;A;;A;;A;;A;;A,uC;A,M,Q;A,M,Q,C,G,qB;A,M,kB,C,G,yB;A,M,kB,C,G,yB;;;;;A,6D;A,8C;A,6D;A,8C;A,+C;A;A,M,U,C,W,Q,M,Q,G,K;A,M,Q;A,S,S,G;I,M,I,M,K;I,I,C,G,O;Q;Q;Q;K;I,O;Q,C,C,E;Q,C,C,E;Q,C,C,E;K;A;A;;;;;C,G,S,wB,G;I,M,C,K,Q,I,G,S;I,I,W,I,O;I,I,I;I,I,I,I,G,I,I,Q,I,K,I,O,O,M,K;I,M,I,G,C,E,K,M,I,Q,M,O,G,C,E,K,M,I,Q,O,O;I,O,O,W,K,K,O,gB,I,C,I,C,I,S,I;A;A;;;;;C,G,S,wB,G;I,M,I,C,G,U,E;I,I,E,S,C,E,K,O;I,M,E,M,E,G,E,G,E,G;I,M,I,G,C,E,K,M,I,Q,M,O,I,Q,M;I,M,I,M,I,O,gB;I,M,I,Q,I,K,M,I,Q,K,M,K,Q,K,I;I,O,I,I;A;A,S,U,I,E,Q;I,O,wB,C,G,e,E,wB,O;A;A,S,S,I,E,E;I,O,C,G,c,E,wB,O,wB;A;A,I,Q;I;I;I;I;I;A;kB;;;A;;;;;C;;A,8C;A,8C;A,qD;A,iD;A,4C;A,+C;A,8C;A,4C;A,6C;A,8C;A,6C;A,6C;A,0C;A,kD;A,sD;A,kD;A,+C;A,M,U,C,G,I,M,K,I,K,G,K;A,S,U,Q,E,W,E,E;I,O,S,G,I;Q,2B;Q,Q,K,C,E,S,oB,E,Y,C,C;Q,O,G,M,I,E;I;A;A,S,Q,G;I,O,Q,Q,O,Q,Y,O,I,S,W,O;A;A,S,Q,K;I,O,U,Q,O,U,Y,O,M,S,Y,O,M,Q,W,O;A;A,gD;A,M,S;I;I;I;I;I;I;I;C;A,0C;A,M,gB,O,I,C,S,K,M,A,S,I;A,S,O,K;I,M,E,I,E,G,E,G,E,M,C,E,G;I,M,I,M,C,K,G,I;I,I,Q,W,O;Q,M;K;I,M,I,M,a,C,K,G,I;I,O;Q,M;Q,M;K;A;A,uC;A,kD;A,oD;A,mD;A,M,kB;I;I;I;I;I;I;I;C;A,S,O,K;I,M,C,G,G,I,G;I,M,O,e,C,U,G;I,M,M,K,M,A,C,I,C,I;I,I,M,W,O;Q;Q;Q;I;I,M,M,I,I,M,a,C,K;I,O;Q;Q;Q;Q;I;A;A,sD;A,S,U,C;I,M,I,A,C,I,C,I;I,O,I,I,I,I;A;A,M,S;I,O;I,M;I,I;I,K;A;A,M,Q,I;A,M,e,C,O,U,O;A,M,W,C,M,M,I,Q,K,C,O,Q,K;A,M,W,C,M,G,C,E,K,M,C,I,S,I;A;;;;C,G,S,K,G;I,M,S,M,I;I,I,Q,O;I,M,Q,O,Q,W,M,O,Q,O,K,U,Q,Q,O,K,I,Q;I,M,I,K;I,O;A;A,M,Q;A;;C,G,S,a,G;I,M,I,M,K;I,O;Q,C,C,E,C;Q,C,C,E,C,Q,M;Q,C,C,E;Q,C,C,E;K;A;A;;C,G,S,Y,S;I,O,K,O;A;A,M,M,C,G,I,A,C,A,I,I,C,I;A,M,O;I;I;I;I;I;I;I;C;A,S,M,Q;I,M,S,a;I,I,M,C,E,K,M,M,C,E,K,I,O;I,M,S,M,C,E;I,M,M,M,C,E;I,M,S,M,C,E;I,M,O,A,C,O,W,K,C,I;I,M,M,S;I,M,M,O,S,C,S;I,M,Q,O;Q;Q;Q;I;I,M,O,S,M;I,M,K,S;I,M,S,A,C,I,C,K,G,M,G,I;I,M,S,Q,Y,I,I,C,K,G,K,M,O,I,C,K,G,M,K,C,M,C;I,M,O,U,K,U,M,S;I,M,O,Q,Y,O,K,I,G,A,C,S,E,I,M;I,O;Q,O;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;I;A;A,S,U,K;I,M,E,I,E,G,E,G,E,G;I,M,S,a;I,I,C,Q,O;I,M,K,S,S;I,O,O,Q,I,K,M;A;A,M,a;I,O;I,M;I,K;A;A,uD;A,M,uB;A,2D;A,M,2B;A,M,U,I,O,M,uB,M,2B;A;;C,G,S,iB,G;I,M,I,Q,K,C,E,I,C;I,I,M,M,O;Q;Q;K;I,O,C,C,E,G;Q,C,C,E;Q,C,C,E;K,G;Q,C,C,E;Q,C,C,E;K;A;A,M,U,C;A;;;;;;;;;;;;;;;;;;;C,G,S,S,G;I,O,O,Q,W,O,C,I,I,C,O,C,I,G,Q,I,I,Q,O,S,Y,Q,Q,O,S,I,Q;A;A,M,Q;I;I;I;I;I;I;I;C;A,M,Q;A,S,Q,G;I,M,S,iB;I,I,M,C,E,K,I,O;I,M,M,C,M,C,E;I,M,I,M,C,E;I,M,O,A,C,K,I,O,C,I;I,M,I,K,C,K;I,I,M,O,M,K,O;I,M,O,M,M,c;I,M,O,K,M;I,M,M,M,I,K;I,M,S,Q,K,Q,K,M,M,C,O,C;I,M,M,O,M;I,M,M,K,M,A,C,K,I,O,C,I;I,M,Y,M,C,K,C,K,G,M,K,G;I,M,S,A,C,A,M,C,K,C,K,G,G,I,K,E,I;I,M,Q,O;Q;Q;Q;Q;I;I,O;Q,O;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;I;A;A;;C,G,S,gB,K;I,M,C,G,I,C,C,G;I,M,e,I,I,I,K;I,M,M,e;Q,C;Q,C;Q;K,G;Q;Q;Q;K;I,O,S,O;A;A,S,O,I,E,C;I,O,A,M,O,S,e,M,O,S,gB,I,M,O,S,c,K,O,K,K,E,S,O,K,K,K,C,S,gB,E,S,E,S,C,I;A;A,sC;A,S,Y,K;I,M,E,I,E,G,E,M,C,E,G,E,G;I,I,C,K,O;I,M,M,O,I,I;I,M,I,M,I,M;I,M,O,K,C,K,K,M,c;I,M,O,I,M,O,M;I,O;A;A,S,O,I,E,G;I,I,Q,G,O,S,c,M;S,I,Q,M,S,a,O;S,I,M,G,O,Q,K;S,O,Q,K,S,gB,M,M;A;A;;;;;;;;;;;C,G,S,U,Q,E,Y;I,M,S,K;I,M,a,S;I,I,O,S,W,O,O;I,M,Y,O;I,M,gB,W;I,M,K,U,W,I;Q,S,C,E,G,a,C,E;K,G;Q,S,C,E,G,a,C,E;Q,S,C,E,G,a,C,E;K;I,O,Y,I;A;A;;;;;;;;;;C,G,S,S,Q,E,M;I,M,O,K;I,M,K,K;I,I,K,S,G,O,O;I,M,S,K;I,M,S,G;I,M,S,M,C,E,G,M,C,E;I,M,O,O,W,K,O,W,I,M,C,E,G,M,C,E,G,C,K,M,A,S,I;I,O,gB;Q;Q;K,E;A;;;AIzSJ,QAAQ,iBAAiB,SAAU,CAAC;IAClC,OAAO,KAAK,EAAE,aAAa,IAAI;QAAC,SAAS;IAAC;AAC5C;AAEA,QAAQ,oBAAoB,SAAU,CAAC;IACrC,OAAO,eAAe,GAAG,cAAc;QAAC,OAAO;IAAI;AACrD;AAEA,QAAQ,YAAY,SAAU,MAAM,EAAE,IAAI;IACxC,OAAO,KAAK,QAAQ,QAAQ,SAAU,GAAG;QACvC,IAAI,QAAQ,aAAa,QAAQ,gBAAgB,KAAK,eAAe,MACnE;QAGF,OAAO,eAAe,MAAM,KAAK;YAC/B,YAAY;YACZ,KAAK;gBACH,OAAO,MAAM,CAAC,IAAI;YACpB;QACF;IACF;IAEA,OAAO;AACT;AAEA,QAAQ,SAAS,SAAU,IAAI,EAAE,QAAQ,EAAE,GAAG;IAC5C,OAAO,eAAe,MAAM,UAAU;QACpC,YAAY;QACZ,KAAK;IACP;AACF;;;;;A,6C;A,kD;A,2C;A,4C;A,6C;A,qD;A,yD;A;A,kB;A,S,K,C,E,C;I,M,I,E;I,iC;I,M,K,C,C,E,G,I;I,O;A;A,mB;A,S,M,C,E,C;I,M,I,E;I,iC;I,M,K,C,C,E,G,I;I,O;A;A;;;;;;;;;;C,G,S,M,I,E,E;I,O,O,K,K,M,K,O,K,M,M,O,K;A;A;;;;;;;;;;C,G,S,O,K,E,G;I,M,M,I;I,M,I,A,C,A,Q,M,G,I;I,O,I,M,G,K,O,I,M,G;A;A;;;;;;;;C,G,S,Q,G;I,O,I,O,C,I,M,K;A;A;;;;;;;;;;;;C,G,S,gB,K;I,M,Q,M,I,C,I,C,G,U,E,I,O,C,I,C,E;I,O,M,K,C,G,I,E,S,E,Q,I,C,I,E;A;A;;;;;;;;;;;C,G,S,oB,G;I,O,gB,K,O,C,G,G,I,M,K,M,C,C,I,E;A;A;;;;;;;;;C,G,S,Q,G,E,M,K,M;I,I;I,I;I,I,I,I;I,M,E;Q,I,K,M,Q;Q,I,G,C,E;Q,G,C,E,G,G,C,E;Q,G,C,E,G;I;I,O;A;A;;;;;;;;;;;;;;;C,G,S,a,G;I,I,I,W,G,O;Q,E;K;I,O,a,I,M,I,O,C,K;Q,O,I,O,I,I,C,G;Y,M,U,K;Y,Q,O,K,G,G,C,E;Y,O;Q;I,G,E;A;;;;;A;A,2C;A,iD;A,8C;A,yC;A,8C;A,6C;A,8C;A,+C;A;A;A;A;A;A,M,U;I,O;I,M;I,Q;I,M;I,Y;I,M;I,O;I,Q;I,S;I,Q;I,Y;I,S,E;I,O,E;I,W,E;A;A,wD;A,kD;A,M,Y;A;;;;;;;;;;;;;;;C,G,S,S,I;I,M,C,Q,K,K,K,G,C,G,kB,E;I,I,W,I,O;Q;Q;K;I,mE;I,I,W,O,S,M,O;Q;Q;K;I,kD;I,I,C,Q,C,Q,O,Q,G,G,O;Q,S;Q;K;I,I,U,K,M,O;Q,S;Q,M;K;S,O;Q,S,M;Q;K;A;A;;C,G,S,I,G;I,I,Q,I,O;I,I,M,Q,Q,I,W,G,O,S,G,C,E,E,G,C,E;S;Q,M,C,O,K,G,S;Q,M,Q,S,M;Q,O,M,Q,S,O;I;A;A;;;;;;C,G,S,S,Q,E,a,E,Y;I,M,O,C,G,c,E;I,M,Q,C,G,U,E,iB;I,M,O,C,G,U,E,gB;I,I,K,S,iB,M,S,gB,K,O,O;I,M,e,C,G,c,E,M,I,K;I,M,a,K,U,Q,gB;I,I,C,K,S,C,Y,O;I,M,Y,M,K,K;I,I,I,I,G,I,Y,I;Q,M,M,S,C,E,C,E;Q,M,U,S,C,E,C,E;Q,M,S,S,K,M;Q,U,K,C,E,O,E,Q,C;Q,U;I;I,M,Q,M,Q,E,G,U,I,C,I,C,G,e,E,O;I,W,K,Q,Q,c,K,W,K,O,C,E;I,M,S,C,E,M,Q,K,M,G,E,S,E,K,S,c,I,K,M,K,G,C;I,M,O,C,E,gB,M,K,M,G,E,K,K,E,a,K,e,W,K,K,G,C;I,O;Q,G,I;Q;Q;Q,M,K;Q,M,K;Q;Q;Q,O,M;Q;I;A;A,M,Q,C,G,e,E,e,a;A;;;;;;;;C,G,S,U,S,E,Q;I,M,C,O,K,G,S;I,I,C,O,O;I,O,C,G,e,E,O,Y;A;A;;;;;;C,G,S,Y,I;I,M,I,I;I,M,kB,C,G,mB,E,E;I,O,C,G,c,I,O,C,Q,gB,M,S,I,C,Q,M;A;A;;;;;;;;C,G,S,S,S;I,M,I,I;I,M,a,C,G,mB,E,E;I,O,C,G,c,I,O,C,Q,W,M,S,I,C,Q,E,Q,M,O,C,E;A;A;;;;;C,G,S,Q,S;I,M,I,I;I,M,W,C,G,iB,E,E;I,O,C,G,c,I,O,C,Q,S,M,S,I,C,Q,E,Q,M,O,C,E;A;A,I,Q;I;I;Y,C,G,mB;I;I;I;I;I;I,Y;I;A;kB;;;;;A,4C;A;A;A;A,M,W,C;I,M,W,M,O,C,Q;Q,M,S,C,G,U,E,G;Q,I,W,W,M,C,O,G,M,C,O,I,C,G,U,E,G;Q,O;I,G,C;I,O,C,S,Q,C,O;A;A,S,O,M;I,M,Q,O,I,C,I,C,G,U,E,G,I,O,C,I;I,I,C,G,U,E,W,G,O,E;I,M,Q,iB,O;I,O,M,O,C,Q,M,Q,K,C,G,I,E,S,E,Q,I,C,Q,M;A;A,S,iB,K,E,M;I,M,Q,K,C,E;I,M,c,C,G,U,E,O;I,M,W,S;I,0D;I,M,W,C,G,Y,E,O;I,M,Q,E;I,S,Q,C,M;Q,yE;Q,M,a,C,G,c,I,O,C,Y,U,W;Q,W,Q,C;Y,M,Y,U,O,C,E;Y,M,W,S;Y,M,c,U;Y,I,a,M,K;gB,Q,M;gB,M,C,E,S,E,U,C,E,M,C;Y;iB,M,K;gB,Q,I;gB,M,C,E,S,E,U,C;Y;Q;I;I,O;A;A,I,Q;I;A;kB;;;;;A,yC;A,8C;A,yC;A,+C;A,6C;A,yC;A,0C;A,2C;A,+C;A,6C;A;A;A;;;;;C,G,M,S;I,Y;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I,Y;I,e;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I,mB;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I,uB;I,e;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I,gB;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I,kB;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I,Y;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I,ac;I,G,C,G,iB,C;I,M;I,S;I,W,E;I,S,E;A;A,I,a,E;A,I,Q,C;A;;;;;;C,G,S,I,I;I,O,K,C,K,I;A;A,M,Y,C,G,e,E,uB,iB;A;;C,G,S;I,O,W,I,C,Q,M,M,O,C,I;A;A;;C,G,S;I,O,W,I,C,Q,M,O,C,E,E,O,C,I;A;A;;C,G,S;I,O,O,K;A;A;;C,G,S;I,O,W;A;A,M,U,C,G,e,E,qB,iB;A;;C,G,S;I,a,E;I,Q,C;A;A;;;;;C,G,S,I,S,E,O,E,Q;I,M,U,W;I,M,Q;Q,G,C,G,U,E,U;Q,M,Y;Q;Q;Q;I;I,W,K;I,I,M,M,K,C,M,K,G;I,K,C,M,O,G;I,K,C,M,O,G;I,M,Q,Q,C,Q,S,O;A;A,S,S,K,E,K;I,K,C,M,G;A;A,S,W,S;I,M,M,C,W,U,Q,c;I,O,I,Q,c,I,Q,U,I,Q,e,I,Q,U;A;A,O,Q,C,C,M,U,M,G,I,K,M,M,M,M,M;A,W,K,C,G,I,E,S,E;A,I,U;I;I;I;I;I;I;I;I,a;I;I;A;kB;;;;;A,gD;A,uD;A,6C;A,4C;A,yC;A,8C;A,6C;A,sD;A,gD;A,kD;A,2C;A,2C;A;A;A,M,a;I,O;I,M;I,Q;I,Q;I,Y;I,W,E;A;A,Y;A,M,iB,C,M,O,K,S;A,M,iB,C,S,S,Q;A,M,Q;A,S,S,G;I,O,M,K;A;A,M,a,C,M,O,Q,Y,O,K,O;A,M,U,C,M,O,S,I;A,M,Q;I,C,W,O,E;A;A;;C,G,S,I,G;I,M,S,S,O,M,W,O,e,O,M,Q,O,a,O,Q,O,I,S,W;I,O,K,C,O,G,K,C,O,I,c;A;A;;;;C,G,M,Q,C,G,e,E,e,a;A;;;;;C,G,M,S,C,M,I,K;A;;;;;C,G,M,Y,C,M,I,K;A;;;;;C,G,M,M,C,M,I,K;A,M,O;I;I;I;I;I;I;I;I;I;I;I;I;C;A;;;;;;C,G,S,kB,M;I,M,Y,E;I,I,I,I,G,I,I,I,iC;I,I,O,O,O,K,U,K,I,C,E;I,O;A;A;;;;;;;C,G,S;I,O,C,G,iB,E,M,M,I;A;A;;;;;;;;;;;;;C,G,S,M,G,E,Y,I;I,M,M,I;I,M,S,I,O,M;I,O,C,G,mB,E,O,I,C,G;Q,M,I,C,G,kB,E,G;Q,O,a,C,C,E,K,M,O,E,K;I;A;A;;;;;;;;C,G,S,Q,E,E,E;I,O,I,I,W,I,I;A;A;;;;;;;;;;;;;;C,G,S,W,G;I,M,I,I,K;I,O,C;Q,M,I,I,O;Q,uC;Q,O,K,M,K,A,C,I,C,M;I;A;A;;;;;;;;;;;C,G,S,a,G;I,M,I,I,K;I,O,C;Q,M,I,I,O;Q,uC;Q,O,K,M,K,A,C,I,C,M;I;A;A;;;;;;;;;;;;;C,G,S,iB,G;I,M,I,I;I,O,C;Q,M,I,C,G,U,E;Q,O,K,C,E,S,E,O,O,E,Y;I;A;A,sC,G,M,W;A;;;;;;;;;;C,G,S,O,G;I,M,a,iB;I,O,C;Q,O,M,O;I;A;A,I,Q;I;I;I;I;I;I;I;I;I;I;I;I,a;I;A;A,iB;A,S,gB,M;I,M,S,O,M;I,O,O,I,C,G,I,C,G,kB,E,G,Q,K;A;A,S,c,M;I,M,S,e;I,M,gB,gB,Q,I,gB,O,C,I,K,M,M,C,E;I,M,a,e;I,M,Y,kB;I,O;Q,O;Q,M;Q;Q;Q;Q;I;A;A,S,a,G;I,I,I,W,G,O,W;I,I;I,M,S;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;Q;K;I,yC;I,I,I,I,G,I,I,Q,I;Q,Q,C,G,U,E,G,C,E;Q,kC;Q,I,M,O,Q,C,G,c,E,G,C,E;Q,kC;Q,I,C,M,O,M,C,M,O,G;I;I,O,O,K;A;kB;;;A,kB;;;A,6C;A,kD;A,2C;A,4C;A,6C;A,S,K,C,E,C;I,M,I,E;I,iC;I,M,K,C,C,E,G,I;I,O;A;A,mB;A,S,M,C,E,C;I,M,I,E;I,iC;I,M,K,C,C,E,G,I;I,O;A;A;;;;;;;;;;C,G,S,M,I,E,E;I,O,O,K,K,M,K,O,K,M,M,O,K;A;A;;;;;;;;;;C,G,S,O,K,E,G;I,M,M,I;I,M,I,A,C,A,Q,M,G,I;I,O,I,M,G,K,O,I,M,G;A;A;;;;;;;;C,G,S,Q,G;I,O,I,O,C,I,M,K;A;A;;;;;;;;;C,G,S,Q,G,E,M,K,M;I,I;I,I;I,I,I,I;I,M,E;Q,I,K,M,Q;Q,I,G,C,E;Q,G,C,E,G,G,C,E;Q,G,C,E,G;I;I,O;A;A;;;;;;;;;;;;;;;C,G,S,a,G;I,I,I,W,G,O;Q,E;K;I,O,a,I,M,I,O,C,K;Q,O,I,O,I,I,C,G;Y,M,U,K;Y,Q,O,K,G,G,C,E;Y,O;Q;I,G,E;A;A,I,Q;I;I;I;I;I;A;kB;;;;;A,iD;A,yC;A,8C;A,yC;A,6C;A,yC;A,0C;A,2C;A,+C;A,+C;A;A;A,S;A,yD;A,M,S;I,gB;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I,gB;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I,gB;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;Q;Q;K;I;Q;Q;Q;Q;K;I;Q;Q;Q;Q;K;I;Q;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;Q;K;I;Q;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;Q;Q;K;I;Q;Q;K;I,gB;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I;Q;Q;Q;Q;K;I;Q;Q;K;I;Q;Q;K;I,gB;I;Q;Q;K;I;Q;Q;K;I,iB;I;Q;Q;K;I,iB;I;Q;Q;K;C;A,M,c;I,G,C,G,iB,C;I,W,E;I,S,E;A;A,I,a,E;A,I,Q,C;A,S;I,O,W,I,C,Q,M;A;A;;;;;;;C,G,S,I,I;I,O,K,C,K,I;A;A,M,Y,C,G,e,E,6B,iB;A;;C,G,S;I,O,W;A;A,M,U,C,G,e,E,2B,iB;A;;C,G,S;I,O,O,K;A;A;;C,G,S;I,a,E;I,Q,C;A;A;;;;;C,G,S,I,S,E,I,E,U,E;I,M,Q;Q,G,C,G,U,E,U;Q;Q;Q;I;I,W,K;I,K,C,M,K,G;I,K,C,M,O,G;I,K,C,M,O,G;I,M,Q,Q,C,Q,S,O;I,O;A;A,S,S,K,E,K;I,K,C,M,G;A;A,O,Q,C,C,M,M,G,Q,G,I,K,M,M,M;A,I,U;I;I;I;I;I;I;I,a;I;I;A;kB;;;A,mD;;;A,8C;A,yC;A,2C;A,gD;A,2C;A,M,O;I;Q;Q;Q;Y;Y;Y;Y;Y;S;K;I;Q;Q;Q;Y;Y;S;K;I;Q;Q;Q;Y;Y;Y;S;K;I;Q;Q;Q;Y;Y;S;K;I;Q;Q;Q;Y;Y;S;K;I;Q;Q;Q;Y;Y;S;K;I;Q;Q;Q;Y;Y;S;K;I;Q;Q;Q;Y;Y;S;K;I;Q;Q;Q;Y;Y;S;K;I;Q;Q;Q;Y;Y;S;K;I;Q;Q;Q;Y;S;K;I;Q;Q;Q;Y;S;K;C;A,M,S,E;A,K,Q,C,C,a,W,M,G,I,a,W;A,M,a;I,O;I,M;I,O;I,U;Q;Q;K;I,W;I,M;I,O,E;A;A,S;I,O,O,O,C,O;Q,S,M,Q,C,O,M,K;Q,O;I,G,E;A;A,S;I,O,O,I,C,M,I;A;A,M,Q;A,S,I,I;I,M,C,G,Q,K,G,M,K,S,E;I,M,O,O,K,C,M,I,c,U,I,M,S;I,I,C,M,O;I,M,W,S,K,U,K;I,M,Q,Q,C,E,G,Q,C,E;I,O;Q,G,I;Q;Q;Q;Q;I;A;A,M,Q,C,O,I,M;A,M,W,C,O,I,M;A,I,Q;I;I;I;I;I;A;A,iB;A,S,I,W,E,S,E,K;I,O,K;Q,O;Q,M;Q,M;Q,O,I;Q,U,c,I;Y,I;Y;S,G;Y;Y;S;Q;Q;I;A;A,S,S,Q,E,I;I,M,M,K,I,G;I,I,Y,Q,C,E,G;I,I,c,Q,C,E,G;I,M,O;I,gB;I,I,I,I,G,I,M,I,a,O,K,I,G,I;I,W;I,M,Y,M,K,c,M,E;Q,a;Q,e;I;I,O;Q;Q;K;A;kB;;;;;A,yC;A,2C;A,8C;A,mD;A,yC;A,4C;A,0C;A,2C;A,yC;A,6C;A,+C;A,8C;A,+C;A;A;;C,G,S;I,O,uB,M;A;A;;;;;;C,G,M,M,C,G,c;A;;;;;;;;C,G,M,O,C,O,C,G,c,E,M;A;;;;;C,G,M,Y,C,O,C,G,c,E,M;A;;;;;C,G,M,U,C,O,C,G,c,E,M;A;;;;;C,G,M,M,C,O,C,G,c,E,M;A;;;;;;;;;;;;;C,G,S,S,I;I,M,I,C,G,c,E;I,O,E,Q,K,E,S,E;A;A;;;;;;;;;;;;C,G,S,O,I;I,M,I,C,G,c,E;I,I,E,O,O;I,M,O,A,C,I,E,I,I;I,M,M,E,S,gB,C,E,M,C,C,E,M,C;I,O,C,G,c,E;Q;Q;Q,K,E;Q,K,E;I,G;A;A,mB;A,M,K;I;I;I;I;I;I;I;I;I;I;I;I;C;A,qB;A,M,K,0B,M;A;;;;;;;;;C,G,S,c,S;I,M,I,Y,I,K;I,M,I,K,I;I,M,I,I;I,M,I,K,M,I;I,O,I,C,E,C,E,G,I,C,I,E,C,E;A;A;;;;;C,G,M,W,C,G,c;A;;;;;;;;;C,G,M,M,W,C,G,I;Q,C,C,E,G,C,C,E;Q,C,C,E,G,C,C,E;K;A;;;;;;C,G,M,Q,C,W,C,Q,I,U;A;;;;;;;;;;C,G,M,Y,W,C,G,I;Q,C,C,E,G,C,C,E;Q,C,C,E,G,C,C,E;K;A,I,Q;I;I;I;I;I;I;I;I;I;I;I;I;I;A;A,S,W,E;I,O,C,G;Q,M,S,C,G,c,E,G;Q,M,S,C,G,c,E,G;Q,I,U,Q;Y,M,Q,G,Q;Y,O,C,G,qB,E,O;Q;I;A;kB;;;;;A,8C;A,gE;A,8C;A;A;A;A,M,a,C,Q,C,S,M,E,G,Q,I,C,Q,Q,W,M,K,C,M,G,M,S;A,S,S,a,E,a,E,S,E,kB;I,O,C;Q,M,S,c,M;Q,M,Y,O,I,C,K,C,G,iB,E,I,Y;Q,M,Q,U,I,C,W,C,G,e,E,O;Q,M,M,W;Q,O;Y;Y;Y;Y;Y,Q,I,c,M;Y,wB,U,M;Y,a,I,mB,M,M;Q;I;A;A,M,e,C,M;I,M,I,C,G,U,E;I,M,I,C,G,U,E;I,O,E,S,E,Q,I,E,K,C,E,G,E,K,C,E;A;A,M,a,S,wB,6B,mB;A,M,e,S,2B,6B,qB;A,M,gB,S,0B,kC,oB;A,M,e,S,yB,6B,mB;A;;;C,G,S,S,K;I,M,W,W;I,M,a,a,K;I,M,M,W,S;I,O;Q,G,Q;Q,M;Q,e,C,G,e,E,O;Q;Q,c,C,G,c,E;Q,oB,I,2B,M;Q,iC,I,qC,M;Q,qB,I,+B,M;Q,kC,I,gC,M;I;A;A;;;C,G,S,S,K;I,M,a,a,K,S;I,O;Q,M;Q;Q,e,C,G,e,E,O;Q;Q,c,C,G,c,E;Q,S,a;Q,U,c;Q,S,a;I;A;A;;;;;C,G,S,2B,G;I,I,O,Q,U,O,C,G,qB,E,K;S,I,O,Q,Y,U,K,M,O,C,G,qB,E,K,C,G,c,E;I,O;A;A,I,Q;I;I;I;A;kB;;;;;A,iD;A,+C;A,4C;A,gD;A,gD;A,0C;A,8C;A,oD;A,8C;A,oD;A,yC;A,0C;A,0C;A,2C;A,4C;A,gD;A,8C;A,iD;A,qD;A,wC;A,0C;A,8C;A,4C;A,+C;A,iD;A,qD;A,mD;A;A;A,M,Q;I;I;I;I;I;I;I;C;A,M,S,C,I,E;A,M,Y,C,Q,M,I,C,G,U,G,O,C,I,C,E;A;;;;;C,G,S,M,K;I,I,U,W,O,M;S,I,C,M,Q,Q,O,E;S,O,U,O,I;A;A;;;;;;C,G,M,M,C,G,U;A;;;C,G,M,O,C,O,I,M;A;;;C,G,M,a,C,O,I,M;A;;;C,G,M,c,C,O,I,M;A;;;C,G,M,S,C,O,I,M;A;;;C,G,M,O,C,O,I,M;A;;;C,G,M,O,C,O,I,M;A;;;C,G,M,S,C,O,I,M;A;;;;;;;;;C,G,S,S,I;I,O,C,G,oB,E;A;A;;C,G,S,S,I;I,O,C,G,oB,E,C,G,gB,E;A;A;;C,G,S,e,I;I,O,C,G,oB,E,C,G,gB,E,O;Q,Q;I;A;A;;;;;;;;C,G,S,e,I;I,O,C,G,oB,E,M;Q,Q;I;A;A;;C,G,M,Y,C,G,e;A,M,K,C,G,e;A;;;;;;;;C,G,M,c,C,W,C,O,U,M;A,M,O;A;;;;;;;C,G,M,gB,C,O,C,W,U,M;A,M,S;A;;;;;;;;;;;;C,G,S,gB,Q,E,M;I,M,O,I;I,I,K,O,O;I,M,C,S,M,G,K;I,M,a,U,Y,C,G,iB,E;Q,U;K,I,C,G,iB,E;Q,U;Q;K;I,O,W;A;A,M,W;A,M,Y,C,G,I,E,S,E;A,M,a,C,G,I,E,S,E;A,S,Y,K,E,U;I,a,c;I,O,U,O,K,Y,I;A;A,S,gB,K;I,O,Y,O,W,O,C,G,G,I,M,K,M,C,C,I,E;A;A;;;;;;;;;;;;C,G,M,W,Y;A;;;;;;;;;C,G,M,a,Y;A,S,Y,e;I,O,C;Q,M,O,I;Q,I,K,O,O;Q,M,S,kB,K,M,I,K,M;Q,M,a,K,S;Q,O,C,G,oB,E,K,Q,K,Q;Y;Y;Q;I;A;A,I,Q;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;A;kB;;;;;A,gD;A,4C;A,gD;A,oD;A,4C;A;A,S,O,G;I,O,C,O,K,C,O;A;A;;;;;;;;;;;;;C,G,S,O,M;I,I,O,S,O,C;I,M,I,C,G,U,E;I,O,E,Q,O,E;A;A;;;;;;;;;C,G,S,W,I,E,S,G;I,O,K,I,G,A,C,O,E,I,M;A;A,M,K,K,I;A,M,O,K,I;A;;;;;;;;;;;C,G,S,W,I;I,M,I,A,K,C,K,I,Q,I,I,K;I,O,K,M,I,O;A;A,M,S,+B,M;A,M,Q,+B,M;A;;;;;;;;;;;;;;;;;C,G,S,e,I,E,U,C,C;I,I,M,S,S,C,Y,S,U,O;I,O,K,M;I,M,M,Q,W,O,S;I,M,K,G,C,O,G;I,I,Q,Y,O;I,M,I,K,M,O,M;I,O,K;A;A,I,Q;I;I;I;I;I;A;kB;;;;;A,yC;A,2C;A,8C;A;A,M,iB;I,O;I,M;I,W;A;A,M,Q,C;A;;;;;;;;;;;;;C,G,S,I,G;I,O,O,Q,W,K,C,I,I,C,K,C,I,G,M,I,I,O,Q,W,I,K,C,I,I,M,C,G,a,E,O,U,O,C,G,a,E,O,I,I,Q;A;A,M,e,C,G,e,E,6B,oB;A;;;;;;;;;C,G,S,M,Q,I;I,O,A,C,Q,Q,W,E;A;A,S,U,K;I,O,I,C,G,c,E,M,O,K,C,M,K;A;A,M,Q;A,S,S,G;I,O,M,K,Q;Q;Q;Q;Q;K;A;A,M,S;A,M,Q,O,M;A,M,c,O,c,M;A,S,M,G;I,M,C,M,K,O,U,G,S;I,I,C,O,O;I,M,a,M;I,M,O,M,Q;I,M,M,C,G,c,E;I,M,M;I,O;Q,O;Q;Q;Q,U,C,G,c,E;Y;Y;Y;Q,G;Q;Q;Q;Q;Q,O,U;Q,K;Q;I;A;A,I,Q;I;I;I,a;I;A;kB;;;;;A,yC;A,6C;A,yC;A,0C;A,2C;A;A;A,M,O;I;Q;Q;Q;Q;Q;Q;Q;K;I;Q;Q;Q;Q;Q;Q;K;I;Q;Q;Q;Q;Q;Q;K;I;Q;Q;Q;Q;Q;Q;K;I;Q;Q;Q;Q;Q;Q;K;I;Q;Q;Q;Q;Q;Q;Q;K;I;Q;Q;Q;Q;Q;Q;K;C;A,M,S;I,G,C,G,iB,C;I,M;I,K;I,S;I,O;I,S;I,S,E;A;A,M,Q,K,I;A,M,Q,C;A,M,Q,C;I,K,C,K,K,G;I,K,Q,Q,C;Q,K,C,M,G;I;A;A;;;;;;;;;;;;;;;;;;C,G,S,I,I;I,O,O,S,W,K,C,K,c,I,S,Q,K,O,I,K,Q;A;A,M,O,C,G,e,E,a,Y;A;;C,G,S;I,O,M;A;A,M,U,C,G,e,E,a,Y;A;;C,G,S;I,O,M,I,C,O,K;A;A,S,O,I;I,M,C,S,Q,K,M,O,S,M,G;I,M,U,Q;Q;K,G,E;I,M,S,O,Q,S;I,M,Y,C,G,wB,E;I,O;Q,O;Q;Q;Q;Q,Y;Q;Q;Q;Q;Q;Q;I;A;A,I,U;I;I;I;I,a;I;I;A;kB;;;;;A,uD;A,qD;A;A;A;A;;;;;;C,G,S,kB,K,E,M;I,M,gB,O,I,C,G,iB;I,O,c,I,C,K,C,G,e,E,O,C,G,c,E,O,G;A;A;;;;;;C,G,S,gB,K,E,M;I,O,O,I,C;Q,M,C,M,U,G,C,G,e,E;Q,M,e,C,G,c,E,O;Q,M,Q,C,G,iB,E,C,G,c,E;Q,O,M,O;I;A;A,I,Q;I;I;A;kB;;;;;A,+C;A,6C;A;A;A;;;;;;;;;;;;;C,G,S,Q,K;I,M,O,C,G,mB,E,M,I,C,G,Y;I,I,C,M,U,K,W,M,Q,0B;I,O,E;I,O,K,O,C,Q;Q,M,O,M,C,O,S,E;Q,O,O,O,C,G,iB,E,M,M,M;I,G;Q,I,C,E;K;A;A;;;;;;;;;;;;C,G,S,U,K,E,O;I,O,Q,O,I,C,O,C,G,oB,E,M;A;A,I,Q;I;I;A;kB;;;;;A,8C;A,yC;A,+C;A,2C;A,6C;A,6C;A,2C;A,iD;A,gD;A,8C;A;A;A;A;A;A;A;;;;C,G,M,U;I,O;I,M;I,M;I,O;I,Q;I,Q;I,Y;I,S,E;I,O,E;I,W,E;A;A;;;;;;;;;;;;;;;C,G,S,S,I;I,I,O,S,U,O;Q;Q;K;I,M,I,K,Q;I,M,Q,C,G,U,E,K,U,G;I,I,M,O;Q,M,I,C,G,U,E;Q,O,E,Q;Y;Y;S,G;Y,E;Y;S;I;I,M,O,K,U,M,K,S;I,O;Q,M;Q,K,S,O;K;A;A;;;C,G,M,Q,C,G,gB;A;;C,G,S,I,G;I,M,S,M,Q,O,M,S;I,M,Q,C,G,U,E,M,C,E,E;I,M,K,C,G,c,E,M,C,E;I,I,G,O,O;I,M,O,G;I,M,Q,Q,G,U,I,C,I,C,G,e,E,O,M,E;I,M,O,Q,Q,M,O;I,O;Q,G,E;Q;Q;Q;Q;I;A;A,M,Q,C,G,e,E,e,a;A;;;;;;;;;C,G,S,Y,I;I,M,I,I;I,M,U,C,G,iB,E,E;I,O,C,G,c,I,O,C,Q,Q,M,S,I,C,Q,M,O,C,E;A;A;;;;;;;;;C,G,S,S,I;I,M,I,I;I,M,a,C,G,mB,E,E;I,O,C,G,c,I,O,C,Q,W,M,S,I,C,Q,M;A;A;;;;;;;;;;C,G,S,Q,I;I,M,W,C,G,iB,E,I,M;I,O,C,G,c,I,O,C,Q,S,M,S,I,C,Q,M;A;A;;;;;;;;;;C,G,S,W,K;I,M,Q,M,I,C,I,C,G,U,E,G,I,O,C,I;I,M,Q,K,C,E;I,M,Q,C,G,qB,E;I,O,C,G,kB,E,M,Q,Q;A;A;;;;;;;;;;;;;C,G,S,U,I;I,M,I,I;I,I,E,O,O,E;I,M,S,E,Q,E,Q,E;I,O,C,G,Y,E,E,Q,I,C,Q;Q,M,W,I,Q;Q,O,W;Y,M,C,E;Y;S,G;Y;Y;S;I,G,O,C,I,C,C,E;A;A,S,c,K;I,M,Q,M,Q,S,W,S,I,O;I,M,U,M,I,C,O,C,G,U,E,M;I,O,C;Q,M,S,O,e,W,a,C,G,U,E,Y;Q,I,W,W,O;Q,M,S,S;Q,M,M,K,M,S,M;Q,M,W,Q,Q;Q,I,a,I,O;Q,O,K,C,S,G;I;A;A,S,Q,K;I,M,U,c;I,O,C,U;Q,M,O,C,G,U,E,U;Q,M,K,C,G,U,E,Q;Q,I,S,a,O,W,O,E;Q,O,C,G,iB,E,M,I,I,S,O,C,I;I;A;A,I,Q;I;I;I;I;I;I;I;I;I;I,a;I;A;kB;;;A,Y;;;A,yC;A,2C;A,2C;A,M,O;I,O;I,M;I,O;I,O;I,M;I,U,E;A;A,M,Q;I;I;I;I;I;I;I;I;C;A,a;A,S;I,O,M;A;A,M,Q;A,M,Q,I;A,S,I,O;I,M,S,M,I;I,I,Q,O;I,M,K,M,M;I,M,I,S;I,O;A;A,S,M,O;I,I,O,Y,U;Q,M,C,G,I,I,G,M,K,Y,E;Q,O,M;Y;Y;S;I;I,M,C,I,K,G;I,M,c,C;I,I,O,O,U,O;Q;Q;K;I,M,O,G,M,K,I,C,I,C;I,O,K,W,I;Q,I,C,E;Q;K,G;Q;Q;K;A;A,I,Q;I;I;I;A;A,U;A,S,M,C,I,K;I,M,Q,M,Q,M,G,O,C,G,I,I,G,K;I,M,Q;I,I,U,K,U,G,O;I,M,O,M,Q,M,C,E,G,K,K,C,E,K,C,G,C,E,G,C,E,K,C;I,M,W,M,Q,M,K,E;I,M,O,U,K,U,I,W,U,K,Q,M,I,a;I,O;Q,O;Q;Q;Q;Q;Q;I;A;kB;;;;;A;A;A,wB;;;;A;;;;;;;;;;;;;;;;;C;;A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CAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBACAC,aAAAA;gBAAAA,UAAAA;YAAAA;YAAAA;gBAIAF,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAAAA,aAAAA;YAAAA;YAAAA;gBAIAD,QAAAA;gBACAC,MAAAA;gBAEHA,aAAAA;YAAAA;SAAAA;IAAAA;IAAAA,WAAAA,wBAAAA;QAAAA,OAAAA;YAqCCE,gBAAAA;gBAAiB;gBAAA;aAAA;YACjBC,mBAAmB;gBAAA;gBAAO;aAAA;YAC1BC,qBAAAA;gBAAsB;gBAAA;aAAA;YACtBC,eAAAA;gBAAAA;gBAAAA;aAAAA;YAEAC,YAAAA;gBAAAA;gBAAAA;aAAAA;YACAC,iBAAAA;gBAAAA;gBAAAA;aAAAA;YACAC,cAAc;gBAAA;gBAAO;aAAA;YACrBC,gBAAAA;gBAAiB;gBAAA;aAAA;YACjBC,MAAAA;gBAAAA;gBAAa;aAAA;YACbC,eAAe;gBAAA;gBAAO;aAAA;YACtBC,iBAAAA;gBAAAA;gBAAAA;aAAAA;YACAC,qBAAAA;gBAAsB;gBAAA;aAAA;YACtBC,wBAAAA;gBAAAA;gBAAAA;aAAAA;YACAC,gBAAgB;gBAAA;gBAAA;aAAA;YAAA,WAAA;gBAAA;gBAAA;aAAA;QAAA;IAAA;IAAA,WAAA,6BAAA;QAAA,OAAA,IAAA,CAeThJ,cAAAA,QAAAA,KAAAA,sHAAAA,aAAAA;IAAAA;IAAAA,WAAAA,kBAAAA;QAAAA,OAAAA;YAAAA,OAAAA;YAAAA,UAAAA;YAAAA,cAAAA;YAAAA,YAAAA;YAAAA,aAAAA;YAAAA,eAAAA;YAAAA,UAAAA;YAAAA,OAAAA;YAAAA,OAAAA;YAAAA,UAAAA;YAAAA,MAAAA;YAAAA,eAAAA;YAAAA,OAAAA;YAkFPiJ,aAAAA;YAAAA,sBAAAA;QAAAA;IAAAA;IAAAA,WAAAA,uBAAAA;QAAAA,OAAAA,IAAAA,CAgBOjJ,cAzyCAA,QAAAA,KAAAA,0GAAAA,aAAAA;IAAAA;IAAAA,WAAAA,iBAAAA;QAAAA,OAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;SAAAA;IAAAA;AAAAA;A;;;;;;;;;;;;;;;;;;;;;;;CCkDTpB,GAAAA,MAAAA;IAAAA,YAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,CAAAA;QAAAA,IAAAA,CAAKsK,WAAgBC,GAAAA,SAAAA,KAAAA,UACrBvK,IAAAA,CAAKwK,SAAAA,GAAiBC,SAASC,KAAKJ,QAAAA,IAAAA,CAAAA,UAAAA,GAAAA,SAAAA,KAAAA,SAAAA,QAIhCxK,GAAQwK,YAAAA,CAAAA,IAAAA,CAAAA,WAAAA,GAAAA,QAAAA,GAAAA,QACRxK,GAAQ6K,UAAAA,CAAAA,IAAAA,CAAAA,SAAmC7K,GAAAA,MAAAA,GAAAA,QAC3CA,GAAQ0K,aAAAA,CAAAA,IAAAA,CAAAA,SAAAA,UAAAA,gBAAAA,GAAAA,UAAAA,GAAAA,QACR1K,GAAQ8K,WAAAA,CAAAA,IAAAA,CAAAA,UAAAA,GAAAA,OAAAA,GACczJ,QAAAA,GAAAA,cAAAA,CAAAA,IAAAA,CAAAA,UAAAA,UAAAA,gBAAAA,GAAAA,WAAAA,GAAAA,OAAAA,UAAAA,MAAAA,IAAAA,CAMnB0J,aAAAA,UAAAA,iBAAAA,MAAAA,IAAAA,CAAAA,aAAAA;IAAAA;IAAAA,IAAAA,aAAAA;QAAAA,OAAAA,IAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAAAA,eAAAA,EAAAA,IAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,WAAAA,EAAAA,EAAAA;QAkBP,MAAWC,KAAAA,UAAAA,eAAAA;QAAAA,IAAAA,GACJC,cAAAA,CAAAA,IAAAA,MAAAA,IAAAA,MAAAA;QAIP/K,IAAAA,CAAKgL,QAAAA,GAAAA,MACLhL,IAAAA,CAAKiL,cAAAA,GAAAA,YAAAA,IAAAA,CAAAA,UAAAA,GAAAA;IAAAA;IAAAA,IAAAA,OAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,KAeO7J,EAAAA,EAAAA;QAAAA,IAAAA,GACLA,cACL2J,CAAAA,KAAAA,GAAcG,eAAAA,CAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;SAAAA,CAAAA,SAAAA,GAAAA,GAAAA,MAAAA,IAAAA,MAAAA;QAAAA,IAAAA,CAAAA,QAAAA;IAAAA;IAAAA,IAAAA,aAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,WAAAA,EAAAA,EAAAA;QAAAA,IAAAA,GAoBT9J,cACL2J,CAAAA,KAAAA,GAAAA,eAAAA,CAAAA;YAAAA;YAAAA;YAAAA;YAAAA;SAAAA,CAAAA,SAAAA,GAAAA,GAAAA,MAAAA,IAAAA,MAAAA;QAAAA,IAAAA,CAAAA,cAAAA;IAAAA;IAAAA,IAAAA,SAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,OAAAA,EAAAA,EAAAA;QAAAA,IAAAA,GAkBK3J,cACL2J,CAAAA,KAAAA,SAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,MAAAA;QAAAA,IAAAA,CAAAA,UAAAA;IAAAA;IAAAA,IAAAA,WAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,SAAAA,EAAAA,EAAAA;QAAAA,IAAAA,GAoBK3J,cACL2J,CAAAA,KAAAA,WAAAA,KAAAA,MAAAA,OAAAA,SAAAA,MAAAA,KAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA,IAAAA,CAAAA,YAAAA;IAAAA;IAAAA,IAAAA,SAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,OAAAA,EAAAA,EAAAA;QAAAA,IAAAA,GAoBK3J,cACL2J,CAAAA,KAAAA,WAAAA,KAAAA,MAAAA,OAAAA,CACsBA,CAAAA,MAAAA,KAAAA,MAAAA,CAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA,IAAAA,CAAAA,UAAAA;IAAAA;IAAAA,IAAAA,UAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,QAAAA,EAAAA,EAAAA;QAAAA,IAAAA,GAmBjB3J,cACL2J,CAAAA,KAAAA,WAAAA,KAAAA,MAAAA,OAAAA,CACsBA,CAAAA,MAAAA,KAAAA,MAAAA,CAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA,IAAAA,CAAAA,WAAAA;IAAAA;IAAAA,IAAAA,YAAAA;QAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,UAiBZA,EAAAA,EAAAA;QAAAA,IAAAA,CAAAA,UAAAA,UAAAA,gBAAAA;IAAAA;IAAAA,IAAAA,aAAAA;QAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,WAYCA,EAAAA,EAAAA;QAAAA,IAAAA,CAAAA,WAAAA,UAAAA,gBAAAA;IAAAA;IAAAA,IAAAA,SAAAA;QAAAA,OAAAA,UAAAA,aAAAA,IAAAA,CAAAA;IAAAA;IAAAA,gBAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cA4BXI,CAAAA,KAAAA,SAAAA,OAAyC,GAzN3CnL,KAAAA,SAAAA,OAAAA,CAAAA,GAAAA,KAAAA,IAAAA,KAAAA,IAAAA,IAAAA,CAAAA,SAAAA,KAAAA,KAAAA,IAAAA,IAAAA;IAAAA;AAAAA;A;;;;;;C,G,M;I;;;;;;;;;;;;;;;;;;;;;;;;;;G,GCzBA,OAAA,aAAA,EAAA,EAAA,KAAA,CAAA,EAAA;QAAA,IADAoL,KAA+BjK,QAAAA,KAAAA,IAAAA,SAAAA,KAC3BkK,MAAAA,KAAAA,MAAAA,IAAAA,WAA0C;QAAA,YAAA,OAAA,MAAA,CAAA,KAEG,EAAA;QACjD,MAAA,KAAA,IAAA,CAAA,eAAA;QAEA,IAAA,CAAA,IAAA,MAAA,IAAA,UAAA;QAEAC,IAAAA,KAAAA,KAAAA,CAAAA,GAAAA,SAAAA,IAAAA,EAAAA;QAYA,IAVAA,MAAAA,CAAAA;YAJsBC,GAAG;YAAGC,GAAG;YAAGC,GAAG;YAAGC,GAAG;YAAGC,GAAG;YAAGC,GAAG;YAAA,GAAA;QAAA,CAAA,CAAA,CAAA,GAI7BxC,KAAAA,EAAAA,GAAAA,cAAAA,CAAAA,GAAAA,WAAAA,WAAAA,OAAAA,MAAAA,GAAAA,WAAAA,SAAAA,MAAAA,GAAAA,WAAAA,MAAAA,GAAAA,KAUb,KAAA,KAAA,KAAA,MAAA,IAAA,WAAA;QAAA,OAAA;IAAA;IAAA,OAAA,eAwBO2B,EAAAA,EAAAA;QAAAA,OAAAA,UAECA,OAAAA,CAAAA,KAAAA,IAAAA,CAAAA,iBAAAA,GAAAA;QACrB,MAAA,KAAA,GAAA,MAAA;QAEA,IAAA,CAAA,IAAA,MAAoB,IAAIG,UAAAA;QACxB,MAAMW,KAAAA,EAAAA,CAAAA,EAAAA,CAAkBC,eAAAA,KAAAA,SACAA,EAAAA,CAAAA,EAAAA;QACxBC,IAAAA,KAAAA,EAAAA,CAAAA,EAAAA,CAA4BC;QAE5BD,KAAAA,OAAAA,KAAAA,KAAAA,IAAAA;QAAAA,OAAAA;YAEElB,YAAYzB;YACZA,YAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA;YACAyC,MAAMzC;YAAAA,QAAAA;QAAAA;IAAAA;IAAAA,OAAAA,iBAAAA,EAAAA,EAAAA;QA2BR,IAAI6C;QAAAA,IAAAA,GAAAA,YAAAA;YAAAA,IAAAA,UAAAA,IAAAA,KAAAA;gBAAAA;aAAAA;iBAAAA,IAAAA,WAAAA,IAAAA,OAAAA,EAAAA;QAAAA;QAAAA,OAAAA,KAAAA,MAAAA,QAAAA,MAAAA,KAAAA;YAAAA;SAAAA,EAAAA,GAkBSC,QAAAA,SAAAA,MAAAA,CAAAA,KAAAA,aAAAA,oBAAAA,GAAAA,GAAAA,IAKS,SAAA,EAAA;YAClB,OACKzL,SAAAA;QAAAA,GAAAA,OAAAA,SACc0L,EAAAA;YACnB,OAAA,MAAA,KAAA,MAAA;QAAA;IAAA;IAAA,OAAA,YAmBaC,EAAAA,EAAAA;QAEjB,IAAA,KAAA,CAAY;QACZ,MAAA,KAAA,WAA0BA;QAE1B,OAAA,CAAIf,MAAAA,OAAAA,CAAAA,YAAAA,OAAAA,MAAAA,QAAAA,GACsCgB,UAAAA,GAAAA,KAAAA,MAAAA,KAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,IAAAA,MAAAA,KAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAAAA;IAAAA;IAAAA,OAAAA,gBAAAA,EAAAA,EAAAA,EAAAA,EAAAA;QAiC1CjB,KAAAA,SAAAA,OAAAA;QAAAA,IAAAA,KAAAA,CAAAA;QAAAA,IAAAA,OAAAA,UAAAA,OAAAA,MAAAA,KAAAA,MAAAA,KAAAA,KAKW3K,SAAS6L;aAAAA,IAAAA,SAAAA,OAAAA,KAAAA,SAAAA,OAAAA,KAAAA,KAET7L,SAAAA;aAAAA,IAAAA,YAAAA,OAAAA,MAAAA,cAAAA,QAAAA,IAAAA;YAGP8L,KAAAA,IAAAA,CAAAA,aAAAA,GAAAA,QAAAA;QAAAA,EACA,OAAOC,IAAAA;YAAAA,OAAAA,CAAAA;QAAAA;QAAAA,OAAAA;IAAAA;IAAAA,OAAAA,iBAAAA,EAAAA,EAAAA,EAAAA,EAAAA;QA4BXpB,IAFAqB,KAAShM,SAAAA,KAAAA,MAAAA,OAAAA,KAAAA,KAAAA,KAEmC,KAAA,MAAW,IAAA,WAAA;QAGvD,IAFA2K,KAA+BjK,QAAAA,KAAAA,IAAAA,SAAAA,KAAAA,MAAAA,KAAAA,MAEA,IAAIuL,WAAAA;QACnC,MAAA,KAAA,KAAA,MAAA,KACmCC,KAAAA,KAAUvB;QAAAA,OAAAA;YAD9BwB;YAAKC;YAAMJ;YAAAA;YAAW;YAAK;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;SAAA,CAAA,KAAA,GAAA,GAAA,GAAA;IAAA;IAAA,OAAA,UAAA,EAAA,EAAA,KAgDV3M,CAAAA,CAAAA,EAAAA;QAKhC,IAAA,GAAA,eAAA,SAAA,GAAA,iBAAA,GAAI2M,cAAAA,MAAAA,OAA8BH;QAElC,IAAIG,KAAAA,IAAAA,CAAAA,gBAAAA,IAAAA,GAAAA;QAAAA,IAAAA,CAAAA,MAAAA,IAAAA,MAAAA,IAAAA,UAAAA,CAAAA,yCAAAA,EAAAA,GAAAA,CAAAA,CAAAA;QAAAA,OAOJ3M,GAAAA,eAAAA,KAAAA,GAAAA,IAAAA,KAAAA,IAAAA;IAAAA;IAAAA,OAAAA,eAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAoDA,IAAIwL,KAAAA,EAAAA;QAAAA,OAECjL,MAAAA,QAAAA,OAAAA,CAAAA,KAAAA;YAAAA;SAAAA,AAAAA,GAAAA,GAAAA,QACSqK,CAAAA;YACZY,GAAAA,KAAAA,IAAAA,CAAAA,UAAAA,IAAAA;QAAAA,IAAAA;IAAAA;IAAAA,OAAAA,gBAAAA,EAAAA,EAAAA;QAAAA,OAAAA,OAAAA,IAAAA,KAAAA,CAAAA,KAAAA,GAAAA,GAqBFP,KAAAA,SAAAA,OAAAA,GAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,KAAAA,IAAAA;IAAAA;IAAAA,OAAAA,gBAAAA,EAAAA,EAAAA;QAAAA,OAAAA,OAAAA,IAAAA,KAiBwBA,CAAAA,KAAAA,CAAAA,GACxBA,KAAAA,WAAAA,OAA6B,GAAA,KAAA,IAAA,KAAA,IAAA,KAAA,MAAA,MAAA,KAAA,IAAA;IAAA;IAAA,OAAA,kBAAA,EAAA,EAAA,KAAA,CAAA,EAAA;QAAA,GAAA,cAe3B+B,CAAAA,KAAMF,KAAKG,IAAIH,KAAKI,IAAIvM,SAASqM,OAAQ,GAAG,IAAI,MAAA,KAAA,KAAA,IAAA,KAAA,IAAA,SAAA,OAAA,GAAA,IAAA,IAAA;QAIlD,MAAA,KAAA,AAAA,CAAA,AAAgBF,CAAAA,MAAAA,CAAAA,IAAAA,EAAAA,IAAAA;QAAAA,OAAAA,KAAAA,IAAAA,KAAAA,IAAAA,IAAAA,IAAAA;IAAAA;IAAAA,OAAAA,kBAAAA,EAAAA,EAAAA;QAAAA,GAaTxL,cAAAA,CAAAA,KAAAA,KAAAA,IAAAA,KAAAA,IAAAA,WAAAA,OAAAA,GAAAA,IAAAA,EAAAA;QAKP,MAAA,KAAA,KAAA,MAAA,QAAA;QAAA,OACO6L;YACLH,KAAKG,MAAAA;YAAAA,KAAAA,MAAAA;QAAAA;IAAAA;IAAAA,OAAAA,aAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,YAqBY;YAEjB7B,IADAqB,KAAShM,SAAAA,KAAAA,MAAAA,KAAAA,MAAAA,IAAAA,MAAAA;YAET0K,KAAAA,SAAAA,OAAyC,GAAA,KAAA,SAAA,OAAA;QAAA;QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,IAAA;IAAA;IAAA,OAAA,mBAAA,EAAA,EAkBX+B,EAAAA,EAAAA;QAAAA,OAAAA,OAAAA,KAAAA,IAAAA,KAAAA,CAAAA,KAAAA,EAAAA,CAAAA,GAAAA,KAAAA;IAAAA;IAAAA,OAAAA,kBAAAA,EAAAA,EAAAA;QAAAA,IAAAA,CAAAA,GAAAA,cAAAA,AAmB9BT,CAAAA,KAAAA,SAAAA,GAAAA,KAAAA,KAAAA,MAAAA,KAAAA,OAAAA,aAAAA,uBAAAA,CAAAA,GAAAA,CAAAA;IAAAA;IAAAA,OAAAA,kBAAAA,EAAAA,EAAAA;QAmBF,IAAIU,KAAAA,aAAAA,wBAAAA,KAAAA,CAAAA,KAAAA,GAAAA,SAAAA;QAAAA,OAAAA,KAAAA,GAAAA,SAAAA,aAAAA,4BAAAA,CAAAA,GAAAA;IAAAA;IAAAA,OAAAA,uBAAAA,EAAAA,EAAAA;QAsBJ,IA9fA,CAAA,CAAA,MAAA,OAAA,MAAA,GAAA,GAAA,OAAA,CAAA;QAAA,IAAA,IAAA,MAAA,aAAA,sBAAA,IAAA,aAAA,sBAAA,eAAA,OAAA,OAAA,aAAA,qBAAA,CAAA,GAAA,EAAA,OAAA;QAAA,OAAA,CAAA;IAAA;IAAA,WAAA,SAAA;QAAA,OAAA,eAAA,OAAA,WAAA,QAAA,QAAA,YAAA,QAAA,QAAA,SAAA;IAAA;IAAA,WAAA,YAAA;QAAA,OAAA,eAAA,OAAA,UAAA,KAAA,MAAA,OAAA;IAAA;AAAA;A;;;;;;;;;;;;;;;CCiBAnN,GAAAA,MAAAA,sBAAAA;IAAAA,YAAAA,EAAAA,EAAAA,EAAAA,CAAAA;QAAAA,KAAAA,IAAAA,IAAAA,CAAAA,UAAAA,IAAAA,IAAAA,CAAAA,UAAAA,IAAAA,IAAAA,CAAAA,gBAAAA;IAAAA;IAAAA,UAAAA;QAAAA,IAAAA,CAAKoN,UAAU,MACfpN,IAAAA,CAAKqN,UAAAA,MACLrN,IAAAA,CAAKsN,gBAAgB,GAAA,IAAA,CAAA;IAAA;IAAA,KAAA,EAAA,EAAA,KAAA;QAAA,MAAA;IAAA,CAAA,EAAA;QAAA,OAuCrBtN,IAAAA,CAAAA,OAAAA,KAAAA,IAAAA,KAAAA,IAAAA;IAAAA;IAAAA,kBAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,YAAAA;YAAAA,IAgDMqL,GAAAA,eAAAA,CAAAA,GAA6BkC,WAAAA,GAAAA,WAAAA,GAAAA,MAAAA,WAAAA,MAAAA,MAAAA,IAAAA,WAAAA;YAAAA,IAAAA,GAAAA,UAAAA;gBAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAKRC,MAAAA,OAAAA,OAAAA,UAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,OAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAIAA,MAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA;QAAAA,GAAAA,YAAAA,CAAAA,KAAAA,UAAAA,gBAAAA,GAAAA;QAAAA,MAAAA,KAAAA,GAAAA,eAAAA,IAAAA,CAAAA,OAAAA,eAAAA,IAAAA,CAAAA;QAAAA,OAAAA,MAAAA,QAAAA,OAAAA,CAAAA,KAAAA;YAAAA;SAAAA,AAAAA,GAAAA,UAAAA,eAAAA,IAAAA,QAAAA,CAAAA;YAAAA,IAAAA,CAAAA,KAAAA;gBAAAA,CAAAA,aAAAA,iBAsBkBC,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA;gBAAAA,GAAAA,gBAAAA;gBAAAA;aAAAA,EAAAA;gBAC1CrB,MAzHHpM,UAAAA,YAAAA,GAAAA;YAAAA;QAAAA,IAAAA,IAAAA;IAAAA;I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4PwB+K,GAAAA,kBAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,YAAAA,OAAAA,MAAAA,CAAAA,KAAAA,UAAAA,kBAAAA,GAAAA,GAAAA,MAAAA,QAAAA,OAAAA,CAAAA,KAAAA;YAAAA;SAAAA,AAAAA,GAAAA,GAAAA,YAAAA;YAAAA,IAAAA,KAAAA,MAAAA,IAAAA,MAAAA,IAAAA,UAAAA;YAAAA,IAAAA,CAAAA,OASV2C,UAAUC,OAAAA,CAAAA,CAAAA,MAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,UAAAA;YAAAA,IAUD,MAAA,AAAA,CAAA,KANbpB,GAAMqB,IAAAA,CAAAA;gBACZ,MAAA,KAAA,KAAA,IAAA,KAA6BF,IAAAA,SAAAA,KAAAA,IAAAA;gBAC7B,IAAA,MAAA,KAAA,MAAA,IAAA,UAAA;gBACA,OAAA;YAAA,EAAA,EAAA,UAAA,MAAA,IAAA,MAAA,IAAA,UAAA;QAAA;QAAA,OAAA,GAUEG,QAEC3B,CAAAA,IAAAA;YAAAA,IAAAA,CAAAA,KAAAA;gBAAAA,CAAAA,aAAAA,iBAIsC4B,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA;gBAAAA,KAAAA,KAAAA;gBAAAA,EAAAA,CAAAA,GAAAA;aAAAA,EAAAA;gBAC1C1B,MAAAA,UAAAA,YAAAA,GAAAA;YAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,8BAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAyCHpM,IAAAA,CAAK+N,kBAAkB,IAAMC,EAAAA,CAAU,EAAA,EAAIlO,KAE3CE,IAAAA,CAAAA,kBAAAA,IAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,IAAAA;IAAAA;IAAAA,6BAwB2BF,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAC3BE,IAAAA,CAAK+N,kBAAkB,KAAM,KAAMjO,KACnCE,IAAAA,CAAAA,kBAAAA,KAAAA,KAAAA,KAAAA,IAAAA;IAAAA;IAAAA,gCAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAqBAA,IAAAA,CAAK+N,kBAAkB,KAAM,KAAMjO,KACnCE,IAAAA,CAAAA,kBAAAA,KAAAA,KAAAA,KAAAA,IAAAA;IAAAA;IAAAA,2BAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAwBAA,IAAAA,CAAK+N,kBAAkB,KAAMC,EAAAA,CAAU,EAAA,EAAIlO,KAC3CE,IAAAA,CAAAA,kBAAAA,KAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,IAAAA;IAAAA;IAAAA,qBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,KAAAA,EAAAA,CAAAA,OAAAA,KAAAA,IAAAA,CAAAA,kBAAAA,GAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,GAAAA,SAAAA,KAAAA,IAAAA,CAAAA,kBAAAA,IAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,IAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,MAAAA,QAyFwBgO,OAAAA,CAAAA,KAAAA,aAAAA,qBAAAA,CAAAA,GAAAA,AAAAA,GAAAA,GAAAA,YAAAA;YAAAA,IAAAA,KAAAA,MAAAA,IAAAA,MAAAA,IAAAA,UAAAA;YAQtBC,IAAAA,KAAAA,CAAAA;YAAAA,IAAAA,OAAAA,oBAAAA,aAEsCC,uBAAuBL,QAAAA,CAAAA;gBAAAA,aAAAA,qBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAAAA,IAAAA,aAAAA,qBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA;YAAAA,IAAAA,CAAAA,IAAAA,MAAAA,IAAAA,UAAAA;QAAAA;QAAAA,OAY/D7N,IAAAA,CAAK+N,2BAA2BjO,IAAAA,KAChCE,IAAAA,CAAKmO,kBAAAA,IAAAA,GAAAA,KAELnO,IAAAA,CAAAA,6BAAAA,KAAAA,IAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,MAAAA,QA8CwBgO,OAAAA,CAAAA,KAAAA,aAAAA,qBAAAA,CAAAA,GAAAA,AAAAA,GAAAA,GAAAA,YAAAA;YAAAA,IAAAA,KAAAA,MAAAA,IAAAA,MAAAA,IAAAA,UAAAA;YAQtBC,IAAAA,KAAAA,CAAAA;YAAAA,IAAAA,OAAAA,oBAAAA,aAEsCC,uBAAuBL,QAAAA,CAAAA;gBAAAA,aAAAA,qBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAAAA,IAAAA,aAAAA,qBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA;YAAAA,IAAAA,CAAAA,IAAAA,MAAAA,IAAAA,UAAAA;QAAAA;QAAAA,OAY/D7N,IAAAA,CAAK+N,2BAA2BjO,IAAAA,KAChCE,IAAAA,CAAKmO,kBAAAA,IAAAA,GAAAA,KAELnO,IAAAA,CAAAA,6BAAAA,KAAAA,IAAAA;IAAAA;IAAAA,SAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QA0EAA,IAAAA,CAAAA,WAAAA,IAAAA;QAEA,MAAA,KAAA,MAAA,QAAA,MAAA,KAAA;YAAA;SAAA;QAAA,KAAA,IAAA,MAAA,GAAA,IAAA,SAAA,GAAA,YAAA,GAAA;YAAA,MAGUoO,KAAAA;gBACJ5D,MAAAA,AAAO6D,CAAAA,UAAAA,YAAAA,GAAAA,SAAAA,GAAAA,IAAAA,IAAAA,SAAAA,GAAAA;gBACPzD,SAAAA,GAAAA;gBAAAA,YAAAA,GAAAA;YAAAA;YAAAA,IAAAA,CAGG0D,YAAY5D,IAAAA;QAAAA,OAAAA,IAAAA,SAAAA,GAAAA,YAAAA,GAAAA;YAAAA,MAEX0D,KAAAA;gBACJ5D,MAAAA,AAAO6D,CAAAA,UAAU7D,YAAAA,GAAAA,SAAAA,GAAAA,IAAAA,IAAAA,SAAAA,GAAAA;gBACjBI,SAAAA,GAAAA;gBAAAA,YAAAA,GAAAA;YAAAA;YAAAA,IAAAA,CAAAA,YAAAA,IAAAA;QAAAA;QAAAA,OAAAA,IAAAA;IAAAA;IAAAA,YAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,YAAAA;YAAAA,IAAAA,QAAAA,GA2DQ8B,cAAAA,CAAAA,CAAAA,GAAAA,cAAAA,KAAAA,GAAAA,cAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,IAIWvL,QAAAA,GAAXuL,WAAAA,CAAAA,CAAAA,GAAAA,WAAAA,KAAAA,GAAAA,WAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,GAAAA,eAMV6B,CAAAA,GAAQC,aAAAA,GAAAA,UAAAA,QAAAA,KAAAA,oEAAAA,GAAAA,GAAAA,YAIRD,CAAAA,GAAQC,UAAAA,GAAAA,UAAAA,QAAAA,KAAAA,6DAAAA;QAAAA;QAOZ,IAAI1O,KAAAA;QAAAA,QAAAA,GAAAA,aAAAA,KAAAA,GAAAA,aAAAA,MAAAA,GAAAA,YAAAA,CAAAA,KAAAA,KAAAA,MAAAA,MAAAA,GAAAA,QAAAA;QASJuO,MAAAA,KAAAA,GAAAA,eAAAA,IAAAA,CAAAA,OAAAA,eAAAA,IAAAA,CAAAA;QAAAA,OAAAA,UAAAA,eAAAA,IAAAA;YAAiEzD,YAAAA,SAAAA;QAAAA,GAAAA,QACtD6D,CAAAA;YAAAA,IAAAA,CAAAA,KAAAA;gBAAAA,CAAAA,aAAAA,iBAMkCC,WAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA;gBAAAA,GAAAA,gBAAAA;gBAAAA,GAAAA;aAAAA,EAAAA;gBAC1CtC,MAAAA,UAAAA,YAAAA,GAAAA;YAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,SA6CI1B,EAAAA,EAAAA,KAAgB,CAAA,CAAA,EAAA;QAAA,OAAA,IAAA,CAAA,YAAA,IAAA;IAAA;IAAA,WAAA,EAAA,EAAA,KAAA,CAAA,CAAA,EAAA;QAAA,IAAA,GAAA,YAAA;YAAA,IAAA,QAAA,GAuDTgC,aAAAA,CAAAA,CAAAA,GAAAA,aAAAA,KAAAA,GAAAA,aAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,IAIUvL,QAAAA,GAAVuL,UAAAA,CAAAA,CAAAA,GAAAA,UAAAA,KAAAA,GAAAA,UAAkE,CAAA,GAAA,MAAA,IAAA,WAAA;YAAA,GAAA,eAM5E5M,CAAAA,GAAQ8K,YAAAA,GAAoB+D,UAC5BJ,GAAQC,aAAAA,GAAAA,SAAAA,QAAAA,KAAAA,2EAAAA,GAAAA,GAAAA,YAIRD,CAAAA,GAAQC,SAAAA,GAAAA,UAAAA,QAAAA,KAAAA,6DAAAA;QAAAA;QAOZ,IAAI1O,KAAAA;QAAAA,QAAAA,GAAAA,YAAAA,KAAAA,GAAAA,YAAAA,MAAAA,GAAAA,WAAAA,CAAAA,KAAAA,KAAAA,MAAAA,MAAAA,GAAAA,OAAAA;QASJuO,MAAAA,KAAAA,GAAAA,eAAAA,IAAAA,CAAAA,OAAAA,eAAAA,IAAAA,CAAAA;QAAAA,OAAAA,UAAAA,eAAAA,IAAAA;YAAsD1D,WAAAA;QAAAA,GAAAA,QAC3C8D,CAAAA;YAAAA,IAAAA,CAAAA,KAAAA;gBAAAA,CAAAA,aAAAA,iBAMkCG,UAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA;gBAAAA,GAAAA,gBAAAA;gBAAAA,GAAAA;aAAAA,EAAAA;gBAC1CxC,MAAAA,UAAAA,YAAAA,GAAAA;YAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,gBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,YAAAA,OAAAA,MAAAA,CAAAA,KAAAA,aAAAA,qBAAAA,CAAAA,GAAAA,AAAAA,GAAAA,GAAAA,YAAAA;YAAAA,IAAAA,KAAAA,MAAAA,IAAAA,MAAAA,IAAAA,UAAAA;YAAAA,IAAAA,MAAAA,OAAAA,CAAAA,CAAAA,MAAAA,OAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,UAAAA;YAAAA,IAAAA,MAAAA,SAAAA,QAAAA,KAAAA,KAAAA,KAAAA,KAAAA,MAAAA,IAAAA,WAAAA;QAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,CAAAA,aAAAA,iBAyEwC0B,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA;YAAAA;YAAAA;SAAAA,EAAAA;YAC1C1B,MAAAA,UAAAA,YAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,aAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,KAAAA,MAAAA,MAAAA,KAAAA,IAAAA,CAkCMyC,gBAAAA,cAAAA,GAAAA,MAAAA,IAAAA,CAAAA,gBAAAA,eAAAA,GAAAA,KAAAA,IAAAA;IAAAA;IAAAA,sBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,YAAAA;YAAAA,IAAAA,MAAAA,WAAAA,MAAAA,MAAAA,IAAAA,WAAAA;YAAAA,IAAAA,GAAAA,UAAAA;gBAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KA2CCrB,MAAAA,OAAAA,OAAAA,UAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,OAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAKmBA,MAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA;QAAAA,OAStBsB,GAAAA,YAAAA,CAAAA,KAAAA,UAAAA,gBAAAA,GAAAA,GAAAA,IAAAA,CAAAA,KAAAA;YAAAA,CAAAA,aAAAA,iBAKsCC,qBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA;YAAAA,KAAAA,MAAAA;SAAAA,EAAAA;YAC1C3C,MAAAA,UAAAA,YAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAsCDrB,KAAAA,WAAwBA,OAAAA,GAAAA,GAAAA,cAAAA,CAAAA,CAAAA,KAAAA,OAAAA,KAAAA,EAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAWxB,IAAIiE,KAAAA,KAAAA,MAAoBnC,MAAAA,IAAAA,KAAAA,KAAAA,KAAAA,MAAAA;QAIxBmC,KAAOpC,KAAAA,MAAAA,AAAaoC,CAAAA,KAAQ,CAAA,IAAA,IAAA;QAC5B,IAAIlC,KAAMkC,MAAAA,IAAAA,KAENlC,KAAa,MAAA;QAAA,OACjB9M,IAAAA,CAAKiP,aAAa,uBAAA,IAA+BnP,KAEjDE,IAAAA,CAAAA,aAAAA,qBAAAA;YAAAA;YAAAA;SAAAA,EAAAA,KAAAA,IAAAA;IAAAA;IAAAA,oBAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAiCOkP,YAAAA;YAAAA,IAAAA,CAAAA,OACOxC,UAAUyC,OAAAA,CAAAA,CAAAA,MAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,IAAAA,CAAAA,CAAAA,QAAAA,MAAAA,OAAAA,UAAAA,OAAAA,MAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA;QAAAA,OAAAA,MAAAA,KAAAA,MAAAA,OAYWC,CAAAA,KAAAA,CAAAA,GAEnCpP,IAAAA,CAAAA,aAAAA,mBAAAA;YAAAA;YAAAA;SAAAA,EAAAA,KAAAA,IAAAA;IAAAA;IAAAA,cAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAsDAqP,KAAYjO,EAAAA,CAAAA,OAAUiO,KAAAA,GAEfhP,YAAAA;YAAAA,IAAAA,CAAAA,MAAAA,QAAAA,OAAAA,CAAAA,OAAAA,UAAAA,EAAAA,CAAAA,EAAAA,KAAAA,CAAAA,OAAAA,UAAAA,EAAAA,CAAAA,EAAAA,GAAAA,MAAAA,IAAAA,UAAAA;YAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,IAAAA,KAKiBiP,EAAAA,CAAAA,EAAAA,IAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,IAAAA,KAIAA,EAAAA,CAAAA,EAAAA,IAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,GAAAA,QAITvE,CAAAA;gBAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA;QAAAA;QAAAA,OAQf/K,IAAAA,CAAKuP,8BAAAA,IAAAA,KACLvP,IAAAA,CAAKwP,qBAAAA,IAAAA,KAELxP,IAAAA,CAAAA,gCAAAA,KAAAA,IAAAA;IAAAA;IAAAA,cAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA;YAAAA,IAAAA,GAAAA,YAAAA,MA2CgCyP,QAAAA,KAAAA;gBAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAChB/C,EAAAA,IAAAA,KAAW3B,EAAAA,CAAAA,EAAAA,IAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;gBAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAGX2B,EAAAA,IAAAA,KAAW3B,EAAAA,CAAAA,EAAAA,IAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,OAAAA,IAAAA,GAAAA,YAAAA,CAAAA,MAAAA,QAAAA,KAAAA;gBAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,OAAAA;gBAAAA,IAAAA,MAAAA,OAAAA,SAAAA,IAAAA,MAAAA,IAAAA,WAAAA;gBAAAA,IAAAA,CAAAA,CAAAA,MAAAA,MAAAA,MAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA;;QAwB3B,IAAI+B,KAAM,GAAA,KAAA;QAAA,IAAA,GAAA,YAAA,MAAA,QAAA,KAKRA,KAAM/B,EAAAA,CAAM,EAAA,EAAA,KAAA,EAAA,CAAA,EAAA;aAAA,IAAA,GAAA,YAAA,CAAA,MAAA,QAAA,KAAA,KAAA;aAAA;YAKZ2E,MAAMpE,KAAAA,UAAAA,kBAAAA,AAAAA,CAAAA,KAAAA,CAAAA,IAAAA;YACNwB,KAAMxB,GAAOwB,KAAAA,KAAAA,GAAAA;QAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,CAAAA,aAAAA,iBAS4B6C,aAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA;YAAAA;YAAAA;SAAAA,EAAAA;YAC1CvD,MAAAA,UAAAA,YAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,mBAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAuCM8C,YAAAA;YAAAA,IAAAA,CAAAA,OACOxC,UAAUyC,OAAAA,CAAAA,CAAAA,MAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,IAAAA,CAAAA,OAIVzC,UAAU0C,OAAAA,CAAAA,CAAAA,MAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA;QAAAA,OAMxBpP,IAAAA,CAAAA,aAAAA,kBAAAA;YAAAA;YAAAA;SAAAA,EAAAA,KAAAA,IAAAA;IAAAA;IAAAA,kBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IA6BA4P,KAAAA,SAAwBA,OAAAA,GAAAA,GAAAA,cAAAA,CAAAA,CAAAA,MAAAA,KAGAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,CAAAA,aAAAA,iBAUmBC,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA;YAAAA;SAAAA,EAAAA;YAC1CzD,MAAAA,UAAAA,YAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,aAyDUqD,EAAAA,EAAAA,EAAAA,EAAW3P,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,MAAAA,QAEEgQ,OAAAA,CAAAA,KAAAA,aAAAA,qBAAAA,CAAAA,GAAAA,AAAAA,GAAAA,GAEjBZ,YAAAA;YAAAA,IAAAA,CAAAA,OACOxB,UAAUoC,EAAAA,CAAAA,EAAAA,KAAAA,CAAAA,OAAAA,UAAAA,EAAAA,CAAiC,EAAA,GAAA,MAAA,IAAA,UAAA;YAAA,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,IAAA,KAAA,EAAA,CAAA,EAAA,IAAA,GAAA,GAAA,MAAA,IAAA,WAAA;YAAA,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,IAAA,KAAA,EAAA,CAAA,EAAA,IAAA,GAAA,GAAA,MAAA,IAAA,WAAA;YAAA,EAAA,CAAA,OAAA,IAAA,QAAA,CAAA;gBAAA,IAAA,CAAA,CAAA,MAAA,KAAA,MAAA,GAAA,GAAA,MAAA,IAAA,WAAA;YAAA;QAAA;QAAA,OAoBzD9P,IAAAA,CAAKuP,2BAA2BzP,IAAAA,KAChCE,IAAAA,CAAKmO,qBAAAA,IAAAA,KAELnO,IAAAA,CAAAA,6BAAAA,KAAAA,IAAAA;IAAAA;IAAAA,eAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GA4BOkP,cAAAA,CAAAA,CAAAA,OACOxC,UAAU3B,OAAAA,CAAAA,CAAAA,MAAAA,KAAAA,MAAAA,GAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA,OAMxB/K,IAAAA,CAAAA,aAAAA,cAAAA,IAAAA,KAAAA,IAAAA;IAAAA;IAAAA,kBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GA4BOkP,cAAAA,CAAAA,CAAAA,OACOxC,UAAU3B,OAAAA,CAAAA,CAAAA,MAAAA,KAAAA,MAAAA,GAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA,OAMxB/K,IAAAA,CAAAA,aAAAA,iBAAAA,IAAAA,KAAAA,IAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,KAAAA,IAAAA,CAAAA,gBAAAA,gBAAAA,KAAAA,MAAAA,IAAAA,CAAAA,gBAAAA,gBAAAA,GAAAA;IAAAA;IAAAA,gBAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,gBAAAA,eAAAA,GAAAA;IAAAA;IAAAA,gBAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,gBAAAA,eAAAA,GAAAA;IAAAA;IAAAA,wBAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,gBAAAA,uBAAAA,GAAAA;IAAAA;IAAAA,mBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAkHa,WAAA,KAAA,IAAA,CAAA,gBAAA,cAAA,GAAA,MAAA,IAAA,CAAA,gBAAA,cAAA,GAAA;IAAA;IAAA,IAAA,eAAA;QAAA,OAAA,IAAA,CAAA;IAAA;IAAA,IAAA,aAAA,EAAA,EAAA;QAAA,IAAA,IAAA,CAAA,cA0BX+K,CAAAA,KAx9CsBA,SAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,UAAAA;QAAAA,IAAAA,CAAAA,gBAAAA;IAAAA;IAAAA,IAAAA,SAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,SAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;AAAAA;A;;;;;;;;;;;;;;;;;;;;CChQxB/K,GAAAA,MAAAA,eAAAA;IAAAA,YAAAA,EAAAA,CAAAA;QAAAA,KAAAA,IAAAA,IAAAA,CAAAA,cAAAA,IAAAA,IAAAA,CAAAA,gBAAAA,GAAAA,IAAAA,CAAK+P,WAAWC,EAAAA;QAEhB,IAAKC,IAAAA,KAAAA,GAAWD,MAAAA,IAAAA,KAAchQ,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,GAAAA,IAAuBkQ,cAAAA,IAAAA,EAAAA;QAAAA,IAAAA,CAAAA,YAAAA,gBAAAA,IAAAA,CAAAA,eAAAA,KAAAA,IAAAA;IAAAA;IAAAA,MAAAA,UAAAA;QAWrDlQ,IAAAA,CAAK+P,kBACL/P,IAAAA,CAAK+P,SAAAA,QAAAA,CAAAA,KAAAA,GAAAA,YACL/P,IAAAA,CAAAA,WAAAA,EAAAA,EAAAA,IAAAA,CAAAA,eAAAA,CAAAA,IAAAA,CAAAA,YAAAA,gBAAAA,IAAAA,GAAAA,MAAAA,IAAAA,CAAAA,SAAAA,IAAAA,CAAAA,cAAAA;IAAAA;IAAAA,eAAAA,EAAAA,EAAAA;QAAAA,IAAAA,KAAAA;YAAAA,WAAAA,GAAAA;QAAAA;QAAAA,WAAAA,GAAAA,KAAAA,aA6BEJ,CAAAA,GAAMqB,OAAAA,UACNrB,GAAMuQ,SAAAA,IAAAA,EACNvQ,GAAAA,OAAAA,GAAAA,QAAAA,IAAAA,CAEKwQ,KAAK,UAAA,GAAA,IAAA,aAAA,GAAA,KAAA,cAAA,gBAAA,GAAA,KAAA,QAeVxQ,CAAAA,GAAMqB,OAAAA,UACNrB,GAAMuQ,SAAAA,IAAAA,EACNvQ,GAAAA,OAAAA,GAAAA,QAAAA,IAAAA,CAEKwQ,KAAK,UAAA,GAAA,IAAA,aAAA,GAAA,KAAA,cAAA,mBAAA,GAAA,KAAA,QAgBVxQ,CAAAA,GAAMuQ,OAAO,gBAAA,GAAA,OAAA;YAEXE,YAAAA,GAAAA,KAAAA;YACAC,IAAAA,GAAAA,KAAAA;YACAlH,cAAAA,GAAAA,KAAAA;YACAmH,MAAAA,GAAQJ,KAAK/G;YACboH,OAAOhE,GAAAA,KAAAA;YAAAA,MAAAA,GAAAA,KAAAA;QAAAA,GAAAA,IAAAA,CAIJ4D,KAAK,gBAAgBxQ,GAAAA,IAAAA,cAAAA,GAAAA,KAAAA,cAGmC,mBAAA,GAAA,KAAA,SAAA,QAAA,KAAA,0CAAA,GAAA,KAAA,YAAA,GAAA,KAAA;IAAA;IAAA,MAAA,OAAA;QAAA,IAAA;YAoB7D,OAAA,MAAA,IAAA,CAAA,YADuB6Q,QAChBC,QAAAA,QAAAA,IAAAA;QAAAA,EACP,OAAOC,IArHT3Q;YAAAA,OAAAA,QAAAA,OAAAA;QAAAA;IAAAA;IAAAA,MAAAA,QAAAA;QAAAA,IAAAA,CAAAA,cAAAA,MAAAA,IAAAA,CAAAA,YAAAA,UAAAA,MAAAA,QAAAA;IAAAA;I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyLuBmN,GAAAA,KAAAA,EAAAA,EAAAA,KAAAA;QAAAA,MAAAA;IAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA;QAAAA,IAAAA,cAAAA,WAAAA,CAAAA,KAAAA,UAAAA,SAAAA,GAAAA,OAAAA,GAAAA,OAAAA,GAAAA,cAAAA,cAAAA,UAAAA,UAAAA,CAAAA,KAAAA,MAAAA,KAAAA,GAAAA,GAAAA,GAAAA,YAAAA;YAAAA,IAAAA,MAAAA,QAAAA,OAAAA,cAAAA,cASnBA,CAAAA,KAAUsC;gBAAAA;aAAAA,EAAAA,MACApE,QAAAA,OAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,GAAAA,KAAAA,MAAAA,MAAAA;gBAAAA,MAAAA;YAAAA,IAAAA;gBAAAA,MAAAA;YAAAA,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,CAIW,EAAA,KAAA,OAAA,SAAA,EAAA,CAAA,EAAA,KAAA,GAAA,GAAA,MAAA,IAAA,WAAA;YAAA,GAAA,MAAA,GAAA,QAIEN,CAAAA;gBAAAA,IAAAA,CAAAA,CAAAA,AACvBA,CAAAA,KAAAA,SAAAA,GAAAA,KAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,WAAAA;YAAAA,IAAAA,MAAAA,CAAAA,KAAAA;gBAAAA,MAAAA;YAAAA,CAAAA;QAAAA;QAAAA,OAWJ/K,IAAAA,CAAAA,YAAAA,KAAAA,IAAAA,UAAAA,YAAAA,GAAAA,QAAAA,IAAAA;IAAAA;IAAAA,UAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,KAAAA,EAAAA,CAAAA,OAAAA,KAAAA,cAAAA,YAqHgC;YAC9B4Q,MAAMA,KAAAA,IAAAA,WAAAA,IAAAA,GAAAA,SAAAA,GAAAA,SAAAA;YACNA,EAAAA,CAAOC,EAAAA,GAAAA,aAAAA,gBAAkCC,OACzCF,GAAOC,IAAIxB,WAAAA,KAAAA,KAAAA,IACXuB,GAAOA,IAAAA,IAAAA,IAAAA,GAAAA,SACPA,EAAAA,CAAAA,GAAAA,SAAAA,EAAAA,GAAAA,aAAAA,gBAAAA,UAAAA,IAAAA,CAAAA,KAAAA,IAAAA;gBAAuCxE,MAAAA,GAAAA;YAAAA;QAAAA,OAAAA;YAGvC,MAAA,KAAA,GAAA,OAAA,IAAA,aAAA,gBAAA;YAAA,IAAA,CAAA,KAAA;gBAAA,aAAA,gBAAA;aAAA,CAAA,OAAA,KAAA;gBAAoFA,MAAAA,GAAAA;YAAAA;QAAAA;QAAAA,OAAAA,IAAAA;IAAAA;IAAAA,QAAAA;QAAAA,OAAAA,IAAAA,CAAAA,YAAAA,QAAAA,IAAAA,CAuB/E6D,YAAAA,UAAAA,GAAAA,cAAAA,QAAAA,KAAAA,2EAAAA,IAAAA;IAAAA;IAAAA,yBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAoCA7O,cACL2J,CAAAA,KAAAA,SAAAA,KAAAA,MAAAA,OAAAA,CACsBA,CAAAA,MAAAA,KAAAA,MAAAA,GAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,aAAAA,gBAAAA;YAAAA;SAAAA,EAAAA;YAUvBqB,MAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,iBAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAiCD,IAAIU,KAAAA,AADJ/B,CAAAA,KAAAA,KAAAA,MAAoBA,OAAAA,CAAAA,KAAAA,IAAAA,KAGhB+B,KAAAA,MACF/B;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,aAAAA,gBAAAA;YAAAA;YAAAA;SAAAA,EAAAA;YAMDqB,MAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,eAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GA+BMhL,cAEL2J,CAAAA,KAAAA,SAAAA,KAAAA,MAAAA,OAAAA,CACsBA,CAAAA,MAAAA,KAAAA,MAAAA,GAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,aAAAA,gBAAAA;YAAAA;SAAAA,EAAAA;YAWvBqB,MAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,gBAAAA,KA0Be2E,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,aAAAA,gBAAAA;SAAAA,EAAAA;YAEf3E,MAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,UAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,aAAAA,gBAAAA;SAAAA,EAAAA;YA2BAA,MAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,UAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,aAAAA,gBAAAA;SAAAA,EAAAA;YA4BAA,MAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,aA0BEF,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,aAAAA,gBAAAA;SAAAA,EAAAA;YAEFE,MAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,SAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,aAAAA,gBAAAA;SAAAA,EAAAA;YA2BAA,MAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,kBAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,aAAAA,gBAAAA;SAAAA,EAAAA;YA4BAA,MAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,UAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA;YAAAA,aAAAA,gBAAAA;SAAAA,EAAAA;YA2BAA,MAAAA,GAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,kBAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAAAA,QAAAA,KAAAA,yFAAAA,IAAAA,CAAAA,gBAAAA;IAAAA;IAAAA,kBAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KA6DyC,CAAA,CAAA,EAAA;QAAA,OAAA,QAAA,GAAA,YAEP2D,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,kBAAAA,IAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,kBAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YAuHEF,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,kBAAAA,IAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,mBAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EA0CyC+P,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAERA,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,mBAAAA,IAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,kBAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAmBAF,CAAAA,QAAQiQ,KAAAA,oFACRjQ,GAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,mBAAAA,IAAAA,IAAAA;IAAAA;IAAAA,aA+DSkO,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAEwB+B,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,aAAAA,IAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,uBAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAkBAF,CAAAA,QAAQiQ,KAAAA,mFACRjQ,GAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,aAAAA,IAAAA,IAAAA;IAAAA;IAAAA,sBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YA2CEA,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,sBAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,cAAAA,EAAAA,EA+CsBF,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YAKpBA,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,cAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,kBAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YAuCEF,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UACElC,QAAAA,CAAAA;YAC3C7N,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,kBAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,oBAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAyCiC+P,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,oBAAAA,IAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,mBAYoBmP,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAMpBrP,CAAAA,QAAQiQ,KAAAA,sFACRjQ,GAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,oBAAAA,IAAAA,IAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YA4CiCiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,iBAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,gBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAkBAF,CAAAA,QAAQiQ,KAAAA,gFACRjQ,GAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,iBAAAA,IAAAA;IAAAA;IAAAA,kBAAAA,EAAAA,EAAAA,KAoC+B,CAAA,CAAA,EAAA;QAAA,OAAA,QAAA,GAAA,YAEEiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UACEjQ,QAAQqM,CAAAA;YACnDnM,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,kBAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAkBAF,CAAAA,QAAQiQ,KAAAA,kFACRjQ,GAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,kBAAAA,IAAAA;IAAAA;IAAAA,eAAAA,KAAAA,CAAAA,EAoCsBqB,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAEW4O,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GACRhF,UAAAA,QAAAA,CAAAA;YACjC/K,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,eAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,cAAAA,EAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAkBAF,CAAAA,QAAQiQ,KAAAA,4EACRjQ,GAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,eAAAA,IAAAA;IAAAA;IAAAA,gBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YA+DEA,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GACRA,UAAUhF,QAAAA,CAAAA;YAC3C/K,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,gBAAAA,IAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,gBAAAA,KA8BsBmB,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAEW4O,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GACRA,UAAAA,QAAAA,CAAAA;YACjC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,gBAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,gBAAAA,KA+BsBmB,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAEW4O,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GACRA,UAAAA,QAAAA,CAAAA;YACjC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,gBAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,wBAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YAiCEF,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,wBAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,mBAiCoBgR,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YAKlBlR,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UACEjQ,QAAQqM,CAAAA;YACnDnM,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,mBAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YAuCEF,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,iBAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,aAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YA2CEF,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,aAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,cAiEU+P,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAEuBA,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UACEV,QAAAA,CAAAA;YAC3CrP,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,cAAAA,IAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,0BAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAkBAF,CAAAA,QAAQiQ,KAAAA,uFACRjQ,GAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,cAAAA,IAAAA,IAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAoDiCiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,iBAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,6BAAAA,EAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAkBAF,CAAAA,QAAQiQ,KAAAA,6FACRjQ,GAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,iBAAAA,IAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAsDiCiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAEzC/P,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,iBAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,6BAAAA,EAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAkBAF,CAAAA,QAAQiQ,KAAAA,6FACRjQ,GAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,iBAAAA,IAAAA;IAAAA;IAAAA,YAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YAyDEA,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAAAA,UACElC,QAAAA,CAAAA;YAC3C7N,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,YAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,SAiDK0K,EAAAA,EAAAA,EAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,YAAAA,IAAAA;IAAAA;IAAAA,SA6EKtJ,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,GAAAA,eAAAA,QAAAA,KAAAA,qEAAAA,GAAAA,YAAAA,QAAAA,KAAAA,iEAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YAcRtB,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAQ+BiQ,CAAAA,GAAQA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GACRjQ,UAAAA,QAAAA,CAAAA;YACjCE,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,SAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,WAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,CAAAA,MAAAA,QAAAA,OAAAA,OAAAA,UAAAA,OAAAA,UAAAA,EAAAA,GAAAA;YA0DEF,MAAAA,KAAAA;YACAA,CAAAA,KAAAA,EAAAA,EAAAA,WAAAA,IAAAA,UAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;QAAAA;QAAAA,OAAAA,QAAAA,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA,GAAAA,UAAAA,iBAAAA,GAU+BiQ,UAAUlC,QAAAA,CAAAA;YAC3C7N,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,WAAAA,IAAAA;QAAAA,IAAAA,IAAAA;IAAAA;IAAAA,IAAAA,OAAAA;QAAAA,OAAAA,IAAAA,CAAAA,YAAAA;IAAAA;IAAAA,IAAAA,KAAAA;QAAAA,OAAAA,IAAAA,CAAAA,YAAAA;IAAAA;IAAAA,IAAAA,aAAAA;QAAAA,OAAAA,IAAAA,CAAAA,YAAAA;IAAAA;IAAAA,IAAAA,eAAAA;QAAAA,OAAAA,IAAAA,CAAAA,YAAAA;IAAAA;IAAAA,IAAAA,QAAAA;QAAAA,OAAAA,IAAAA,CAAAA,YAAAA;IAAAA;IAAAA,IAAAA,OAAAA;QAAAA,OAAAA,IAAAA,CAAAA,YAAAA;IAAAA;IAAAA,IAAAA,eAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,aAAAA,EAAAA,EAAAA;QAAAA,IAAAA,IAAAA,CAAAA,cAsFA+K,CAAAA,KAxqEqBoC,SAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,UAAAA;QAAAA,IAAAA,CAAAA,gBAAAA;IAAAA;AAAAA;A;;;;;;;;;;;;;CC3KZsC,GAAAA,MAAAA;IAAAA,YAAAA,KAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,CAAAA;QAAAA,IAAAA,CAAAA,eAAAA,EAAAA,EAAAA,IAAAA,CAAAA,QAAAA;eAAAA,OAAAA,KAAAA,aAAAA;eAAAA,OAAAA,KAAAA,aAAAA;SAAAA,EAAAA,IAAAA,CAAAA,WAAAA,aAAAA,sBAAAA,IAAAA,CAAAA,YAAAA,CAAAA,GAAAA,MAAAA,QAAAA,OAAAA,CAAAA,KAAsC;YAACwB;SAAAA,AAAAA,GAC9CnR,GAAQiQ,SAAAA,CAAAA,MAAAA,QAAAA,GAAAA,UAAAA,CAAAA,GAAAA,QAAAA;YAAAA,GAAiEmB;SAAAA,AAAAA,GAEzEjF,GAAAA,YAAAA,CAAAA,MAAAA,QAAAA,GAAAA,aAAAA,CAAAA,GAAAA,WAAAA;YAAAA,GAAAA;SAAAA,AAAAA,GAAAA,GAAAA,cAAAA,CAAAA,GAAAA,QAAAA,CAAAA;YAAAA,IAAAA,CAAAA,CAAAA,cAAAA,MAAAA,GAAAA,MAAAA,IAAAA,UAAAA;QAAAA,IAAAA,KAAAA,MAAAA,GAAAA,SAAAA,GAAAA,MAAAA,QAAAA,CAAAA;YAAAA,IAAAA,CAAAA,aAAAA,gBAAAA,eAAAA,OAAAA,CAiB6DC,aAAAA,iBAAAA,eAAAA,KAAAA,MAAAA,IAAAA,UAAAA;QAAAA,IAAAA,KAAAA,MAAAA,GAAAA,YAAAA,GAAAA,SAAAA,QAAAA,CAAAA;YAAAA,IAAAA,CAAAA,aAAAA,qBAAAA,SAAAA,KAAAA,MAAAA,IAAAA,UAAAA;QAAAA,EAAAA,GAoBjElM,IAAAA,CAAAA,eAAAA,IACIF,GAAQiQ,SAAAA,CAAAA,IAAAA,CAAAA,QAAAA,GAAAA,KAAAA,GAAAA,GAAAA,YAAAA,CAAAA,IAAAA,CAAAA,WAAAA,GAAAA,QAAAA;IAAAA;IAAAA,QAAAA,EAAAA,EAAAA;QAAAA,IAAAA,CAAAA,aAAAA,IAAAA,CAAAA,MAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,WAAAA,CAAAA,IAAAA,CAAAA,SAAAA,SAAAA,GAAAA,YAAAA,IAAAA,CAAAA,aAAAA,QAAAA,CAAAA;YAAAA,CAAAA,CAAAA,GAAAA,cAAAA,cAAAA,MAAAA,KAyBVoB,GAlES1B,KAAAA;QAAAA,EAAAA;IAAAA;AAAAA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CCuHXzP,GAAAA,MAAAA,qBAAAA;IAAAA,YAAAA,EAAAA,EAAAA,EAAAA,CAAAA;QAAAA,KAAAA,IAAAA,IAAAA,CAAAA,SAAAA,IAAAA,IAAAA,CAAAA,UAAAA,IAAAA,IAAAA,CAAAA,gBAAAA,GAAAA,IAAAA,CAAAA,cAAAA,EAAAA,EAAAA,IAAAA,CAAAA,aAAAA,EAAAA,EAAAA,IAAAA,CAAAA,+BAAAA,CAAAA,GAAAA,IAAAA,CAAAA,aAAAA,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA;IAAAA;IAAAA,UAAAA;QAAAA,IAAAA,CAAKoN,SAAAA,MACLpN,IAAAA,CAAKqN,UAAAA,MACLrN,IAAAA,CAAKoR,gBAAgB,GACrBpR,IAAAA,CAAKqR,cAAAA,EAAAA,EACLrR,IAAAA,CAAKsR,aAAAA,IAAAA,MAAAA,KAA4BC,KAAAA,CAAAA,IACjCvR,IAAAA,CAAKsN,+BAAAA,CAAAA,GAAAA,IAAAA,CAAAA;IAAAA;IAAAA,yBAAAA,EAAAA,EAAAA;QAWL1N,MAAMuQ,KAAAA,OAAAA,OAAAA,CAAAA,GAAAA;QACNvQ,GAAMqB,OAAAA,IAAAA,CAAAA,OACNrB,GAAM4Q,SAAAA,IAAAA,EAAAA,GAAAA,OAAAA,eAAAA,IAAAA,CAAAA,KAAAA,GAAAA,MAAAA,KAAAA,IAAAA,CAAAA,+BAAAA;IAAAA;IAAAA,+BAAAA,EAAAA,EAAAA;QAgCN5Q,MAAM4Q,KAAAA,OAAAA,OAAAA,CAAAA,GAAAA;QAEN5Q,GAAM4R,OAAAA,GAAAA,QAAAA,QAA6B;QACnC,MAAMC,KAAQjF,GAAEW,QAAQuE,SAAAA,CAAU,EAAA,EAAA,KAEnBlF,GAAAA,QAAAA,SAAAA,CAAAA,EAAAA;QAAAA,IAAAA,cAAAA,GAAAA,QAAAA,aAEiB5M,GAAAA,QAAAA,MAAAA,IAC9BA,IAAAA,CAAKyR,UAAAA,CAAAA,GAAAA,GAAAA,CAAAA,GAAAA,GAAAA,OAAAA,WAAAA,GAAAA,OA+BU,IAAA,KAAA,UAAA,aAAA,IAAA,IAAA,CAAA,eAAA,IAAA,CAAA,MAAA,eAAA,GAAA,eAAA;YACXzG,WAAAA;YAEHA,YAAAA;QAAAA,IAGDhL,GAAM2N,QAAQc,UAAAA,gBAAAA,KAAAA,GAAAA,WAAAA,IAKdzO,GAAM+R,WAAW/R,GAAAA,KAAAA,SAAAA,GAAAA,cAAAA,GAAAA,KAAAA;aAIZyR,IAAAA,aAAAA,GAAUb,MAAAA,IAAAA,CAAAA,UAAAA,CAAAA,GAAAA,GAAAA,CAAAA,GAAAA,GAAAA,OA0BAiB,IAAAA,KAAAA,UAAAA,aAAAA,IAAAA,IAAAA,CAAAA,eAAAA,IAAAA,CAAAA,MAAAA,eAAAA,GAAAA,eAAAA;YACd9G,WAAAA;QAAAA,IAGD/K,GAAM2N,QAAQc,UAAAA,gBAAAA,KAAAA,GAAAA,WAAAA,IAKdzO,GAAM+R,WAAW/R,GAAAA,KAAAA,QAAAA,GAAAA,cAAAA,GAAAA,KAAAA;aAAAA,IAAAA,oBAAAA,GAAAA,MAAAA,GAAAA,OAAAA,IAAAA,KAAAA,UAAAA,aAAAA,IAAAA,IAAAA,CAAAA,eAAAA,IAAAA,CAAAA,MAAAA,eAAAA,GAAAA,gBAiCjBA,GAAM2N,QAAQc,UAAAA,gBAAAA,KAAAA,GAAAA,WAAAA,IAIdzO,GAAMsN,aAAAA,GAAAA,KAAAA,YACNtN,GAAMgS,MAAMhS,GAAAA,KAAAA,QAAAA,GAAAA,SAEG4Q;aAAAA,IAAAA,oBAAAA,GAAAA,MAAAA;YAAAA,GAAAA,aAAAA;gBA4BbpH,QAAAA;gBACAC,MAAAA,aAAAA,uBAAAA,CAAAA,GAAAA,CAAkDmI;gBAClDlI,aAAAA,aAAAA,uBAAAA,CAAAA,GAAAA,CAAAA;gBAAAA,UAAAA,aAAAA,uBAAAA,CAAAA,GAAAA,CAAAA;YAAAA,GAIF1J,GAAMmL,UAAAA,GAAAA,WAAAA,QAAAA,eAAAA,IACNnL,GAAM2N,QAAQc,UAAAA,gBAAAA,KAAAA,GAAAA,WAAAA;YA6BdwD,MAAAA,KAAAA,OAA6B7Q,OAAAA,CAAAA,GAAAA;YAC7B6Q,GAAAA,OAAqBC,CAAAA,EAAAA,GAAAA,KAAAA,WAAAA,EAAAA,GAAAA,CAAAA,EAAAA,OAAAA,GAAAA,SAAAA,IAAAA,CAAAA,KAAAA,GAAAA,MAAAA;YA4uDrBC,MAAAA,KAAAA,OAA0B/Q,OAAAA,CAAAA,GAAWkL;YACrC6F,GAAAA,OAAAA,GAAAA,OAAkBD,MAAAA,aAAAA,uBAAAA,CAAAA,GAAAA,CAAAA,MAAAA,OAAAA,GAAAA,SAAAA,MAAAA,GAAAA,KAAAA,QAAAA,iBAAAA,IAAAA,CAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,QAAAA,SAAAA,CAAAA,EAAAA,IAAAA,OAAAA,IAAAA,CAAAA,yBAAAA,KAAAA,IAAAA,CAAAA,gCAAAA,IAAAA,CAAAA,uBAAAA,GAAAA,QAAAA,SAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,8BAAAA;QAAAA,OAAAA,oBAAAA,GAAAA,OAwClBlS,CAAAA,GAAM2N,QAAQiE,IAAAA,GAAAA,WAAAA,GAAAA,KAAAA,IAAAA,wBAAAA,GAAAA,OAuBd5R,CAAAA,GAAM2N,QAAQc,UAAAA,gBAAAA,KAAAA,GAAAA,WAAAA,EAAAA,IAAAA,gBAAAA,GAAAA,OAwBdzO,CAAAA,GAAM2N,QAAAA,AAAAA,CAAAA,AAAAA,CAAAA,MAAAA,CAAAA,IAAAA,KAAAA,IAAAA,IAAAA,MAAAA,GAAAA,WAAAA,AAAAA,CAAAA,MAAAA,CAAAA,IAAAA,EAAAA,IAAAA,GAAAA,OAAAA;QAAAA,IAAAA,CAAAA,KAAAA,GAAAA,MAAAA;IAAAA;IAAAA,yBAAAA,EAAAA,EAAAA;QAkBR3N,MAAM4Q,KAAAA,OAAAA,OAAAA,CAAAA,GAAAA;QAAAA,GAAAA,OAAAA,GAAAA,WAAAA,MAAAA,mBAAAA,GAAAA,QAyDJ5Q,CAAAA,GAAM2N,QAAAA,QAAQ3N,GAAAA,QAAAA,IAAAA,CAAAA,EAAAA,EAAAA,GAAAA,WAAAA,GAAAA,QAAAA,IAAAA,CAAAA,EAAAA,AAAAA,GAAAA,iBAAAA,GAAAA,OAwCdA,CAAAA,GAAMmL,OAAAA,YACNnL,GAAM2N,QAAAA,CAAQ,GAAA,GAAA,WAAA,GAAA,QAAA,IAAA,CAAA,EAAA,AAAA,IAAA,kBAAA,GAAA,QAGd3N,CAAAA,GAAMmL,OAAAA,YACNnL,GAAM2N,QAAAA,CAAQ,GAAA,GAAA,WAAA,GAAA,QAAA,IAAA,CAAA,EAAA,AAAA,GAAA,iBAAA,GAAA,OA0Bd3N,CAAAA,GAAMmL,OAAAA,YACNnL,GAAM2N,QAAAA,CAAQ,GAAA,GAAA,WAAA,GAAA,QAAA,IAAA,CACsB,EAAA,AAAA,IAAA,iBAAA,GAAA,QAEpC3N,CAAAA,GAAMmL,OAAAA,YACNnL,GAAM2N,QAAAA,CAAQ,GAAA,GAAA,WAAA,GAAA,QAAA,IAAA,CAAA,EAAA,AAAA,GAAA,IAAA,CAAA,KAAA,GAAA,MAAA;IAAA;IAAA,8BAAA,EAAA,EAAA;QAgBhB,MAAMxC,KAAanL,GAAAA,QAAAA,SAAAA,CAAAA,EAAAA,EAAAA,KAAAA,GAAAA,QAAAA,SAAAA,CAAAA,EAAAA;QAAAA,OAAAA,MAAAA,QAAAA,KAMjBI,CAAAA,IAAAA,CAAKgS,cAAAA,EAAAA,EAELhS,IAAAA,CAAAA,aAAAA,EAAAA,EAAAA,OAAAA,KAAAA,IAAAA,CAEOoR,cAAAA;YAAAA,GAAAA;SAAAA,GAAAA,QAAAA,MAAAA,CAAAA,IAAAA,CAAAA,aAAAA;YAAAA,GAAAA;SAAAA,AAAAA,CAAAA,IAAAA,OAAAA,MAAAA,QAAAA,KAAAA,OAAAA,KAAAA,CAAAA,IAAAA,CAAAA,aAAAA,EAAAA,EAAAA,MAAAA,IAAAA,CAAAA,YAAAA,SAAAA,IAAAA,CAgBEA,YAAAA,KAAAA,GAAAA,WAAAA,IAAAA,CAAAA,cAAAA,EAAAA,AAAAA,IAAAA,CAAAA,IAAAA,CAAAA,cAAAA,EAAAA,EAAAA,MAAAA,IAAAA,CAAAA,WAAAA,UAAAA,QAW6BrG,KAAAA,IAAAA,CAC7BiH,WAAAA,KAAAA,GAAAA,WAAAA,IAAAA,CAAAA,aAAAA,EAAAA,AAAAA,IAAAA,MAcAA,MAAAA,OAAAA,MAAAA,OAAAA,MAAAA,OAAAA,MAAAA,CAAAA,MAAAA,IAAAA,CAAAA,WAAAA,SAAAA,IAAAA,CAOFC,8BAAAA,OAAAA,IAAAA,CAAAA,UAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAAAA,UAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,EAAAA,MAAAA,MAAAA,IAAAA,CAAAA,YAAAA,SAAAA,IAAAA,CAOAA,8BAAAA,QAAAA,IAAAA,CAAAA,WAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAAAA,WAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,EAAAA,MAELjS,CAAAA,IAAAA,CAAKgS,cAAAA,EAAAA,EAAAA,IAAAA,CAAAA,aAAAA,EAAAA,AAAAA,CAAAA;IAAAA;IAAAA,uBAAAA,EAAAA,EAAAA;QAAAA,OAAAA,MAAAA,MAAAA,OAAAA,MAAAA,OAAAA,MAAAA,OAAAA,MAAAA,OAAAA,MAAAA,OAAAA,MAAAA,QAAAA,MAAAA,QAAAA;IAAAA;IAAAA,8BAAAA,EAAAA,EA+ByBE,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA;QAAAA,KAAAA,WAAAA,KAAAA,SAAAA;QAAAA,MAAAA,KAAAA;YAoMhCC,QAAAA,GAAAA;YACAhF,WAAWA,GAAAA;YACXiF,SAAAA,GAAAA;YACAC,cAAcC;YACdvH,cAAAA;YACAwC,OAAAA,UAAAA,gBAAAA,GAAAA,QAAAA,SAAAA,CAAAA,EAAAA;YAAAA,UAAAA,GAAAA,QAAAA,SAAAA,CAAAA,EAAAA;QAAAA;QAAAA,GAAAA,YAAAA,UAAAA,KAAAA,OAAAA,KAAAA,aAO2CW,uBAAAA,KAAAA,CAAAA,KAAAA,aAAAA,qBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,KAAAA,MAAAA,aAAAA,qBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,KAAAA,MAAAA,AAAAA,CAAAA,MAAAA,CAAAA,IAAAA;QAAAA,MAAAA,KAAAA,aAAAA,uBAAAA,CAAAA,GAAAA,QAAAA,SAAAA,CAAAA,EAAAA,CAAAA,CAAAA;QAa7CtO,GAAAA,OAAAA,CAAAA,EAAgB4Q,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,MAAAA;QAIhB,MAAA,KAAoBvC,OAAAA,OAAAA,CAAAA,GAAAA;QAAAA,yBAAAA,GAAAA,OAAAA,GAAAA,OAAAA,6BAAAA,yBAAAA,GAAAA,OAAAA,GAAAA,OAAAA,6BAAAA,wBAAAA,GAAAA,OAAAA,GAAAA,OAAAA,4BAAAA,wBAAAA,GAAAA,QAAAA,CAAAA,GAAAA,OAAAA,yBAAAA,GAAAA,IAAAA,CAAAA,KAAAA,GAAAA,MAAAA,KA8EpBrO,GAAMkS,OAAOtB,IACb5Q,GAAAA,UAAgB4Q,IAAAA,IAAAA,CAAAA,KAAAA,GAAAA,MAAAA;IAAAA;IAAAA,uBAAAA,EAAAA,EAAAA;QAAAA,OAAAA,GAAAA,cAcd/D,CAAAA,QAAAA,KAAa,mFAAA,KAAA,KAAA,MAAA,GAAA,GAAA,UAAA,uBAAA;IAAA;IAAA,kBAAA,EAAA,EAAA;QAAA,IAAA,GAAA,cAiBbA,CAAAA,QAAAA,KAAAA,8EAAAA,CAAAA,CAAAA,AACAA,CAAAA,KAAAA,SAAAA,GAAAA,KAAAA,KAAAA,MAAAA,GAAAA,CAAAA,GAAAA,MAAAA,IAAAA,WAAAA;QAAAA,OAAAA,UAAAA,kBAAAA;IAAAA;IAAAA,aAAAA,EAAAA,EAAAA;QAAAA,cAAAA,QAAAA,CAAAA,KAAAA,GAAAA,UAAAA;QA8BF,MAAA,KAAA,UAAA,gBAAA,IAAA,GAAA,eAAA,IAAA,CAAA,MAAA,eAAA,IAAA,CAAA;QAAA,OAAA,IAAA,CAAA,UAAA,CAAA,GAAA;IAAA;IAAA,IAAA,eAAA;QAAA,OAAA,IAAA,CAAA;IAAA;IAAA,IAAA,aAAA,EAAA,EAAA;QAAA,IAAA,IAAA,CAAA,cA2BE1B,CAAAA,KA3sFF/K,SAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,UAAAA;QAAAA,IAAAA,CAAAA,gBAAAA;IAAAA;IAAAA,IAAAA,QAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,SAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,oBAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,kBAAAA,EAAAA,EAAAA;QAAAA,IAAAA,CAAAA,cAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,GAAAA,IAAAA,CAAAA,+BAAAA;IAAAA;AAAAA;A;;;;;;CC9DEA,GAAAA,MAAAA;IAAAA,YAAAA,EAAAA,CAAAA;QAAAA,IAAAA,CAAAA,UAAAA,IAAAA,IAAAA,CAAAA,OAAAA,MAAAA,KAAAA,IAAAA,CAAAA,UAAAA,IAAAA,CAAAA,aAAAA,IAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAAAA,eAAAA,IAAAA,CAAAA,QAAAA,MAAAA,IAAAA,IAAAA,CAAAA,YAAAA,IAAAA,CAAAA,KAAAA,MAAAA,IAAAA,IAAAA,CAAAA,mBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,kBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,UAAAA,KAAAA,GAAAA,IAAAA,CAAAA,UAAAA,KAAAA,GAAAA,IAAAA,CAAAA,iBAAAA,KAAAA,GAAAA,IAAAA,CAAAA,OAAAA,KAAAA,GAAAA,IAAAA,CAAAA,aAAAA,MAAAA,CAAAA,IAAAA,CAAKuS,mBAAAA,CAAAA,GACLvS,IAAAA,CAAKwS,UAAUxS,IAAAA,CAAKyS,cAAc,GAAA,IAAA,CAC7BD,UAAAA,IAAAA,CAAAA,KAAAA,IAAAA,CAAAA,UAAAA,CAAAA,IAELxS,CAAAA,IAAAA,CAAKuS,kBAAAA,CAAAA,GAAAA,IAAAA,CAAAA,UAAAA,IAAAA,CAAAA,UAAAA,GAAAA,IAAAA,CAAAA,mBAAAA,IAAAA,CAMA/B,OAAAA,UAAAA,mBAAAA,aAAAA,kBAAAA,IAAAA,CAAAA,WACIxQ,IAAAA,CAAAA,mBAAAA,CAAAA,IAAAA,CAAAA,OAAAA,UAAAA,mBAAAA,aAAAA,iBAAAA,IAAAA,CAAAA,QAAAA,GAAAA,IAAAA,CAAAA,eAAAA,aAAAA,gBAAAA,SAAAA,CAAAA,MAAAA,IAAAA,CAAAA,SAAAA,CAAAA,EAAAA,GASPA,CAAAA,IAAAA,CAAK0R,iBAAiBA,IAAAA,CAAAA,UAAegB,MAAAA,GAASC,IAC9C3S,IAAAA,CAAK2S,YAAY3S,IAAAA,CAAAA,UAAAA,MAAqB0S,GAAAA,IAAAA,CAAAA,aAAAA,SAAAA,IAAAA,IAAAA,CACjCC,eAAAA,IAAAA,CAAAA,aAAAA,MAAAA,GAAAA,IAAAA,CAAAA,aAAAA,SAAAA,EAAAA,IAEL3S,CAAAA,IAAAA,CAAK0R,iBAAiBA;YAAAA,IAAAA,CAAAA,SAAAA,CAAgB,EAAA;SAAA,EACtC1R,IAAAA,CAAK2S,YAAY3S,IAAAA,CAAAA,UAAAA,MAAqB0S,GAAAA,IAAAA,CAAAA,UAAAA,SAA2BE,IAzBnE5S,IAAAA,CAAAA,eAAAA,IAAAA,CAAAA,aAAAA,MAAAA,GAAAA,IAAAA,CAAAA,aAAAA,SAAAA,EAAAA,CAAAA;IAAAA;AAAAA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CCnDFA,GAAAA,MAAAA,cAAAA;IAAAA,YAAAA,EAAAA,CAAAA;QAAAA,KAAAA,IAAAA,IAAAA,CAAAA,aAAAA,IAAAA,IAAAA,CAAAA,gBAAAA,GAAAA,IAAAA,CAAK+P,WAAWC,EAAAA;QAAAA,IAAAA,IAAAA,KAAAA,GAAAA,MAAAA,IAAAA,KAAAA,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,GAAAA,IAAAA,aAAAA,IAAAA,EAAAA;QAAAA,IAAAA,CAAAA,cAAAA,EAAAA,EAUhBhQ,IAAAA,CAAK6S,WAAWC,gBAAgB9S,IAAAA,CAAK+S,eAAe7C,KAAKlQ,IAAAA,GAAAA,IAAAA,CAAAA,WAAAA,gBAAAA,IAAAA,CAAAA,eAAAA,KAAAA,IAAAA;IAAAA;IAAAA,MAAAA,UAAAA;QAYzDA,IAAAA,CAAK+P,kBACL/P,IAAAA,CAAK+P,SAAAA,QAAAA,CAAAA,KAAAA,GAAAA,YACL/P,IAAAA,CAAKgT,WAAW,EAAA,EAChBhT,IAAAA,CAAAA,cAAmB,EAAA,EAAA,IAAA,CAAA,cAEjBA,CAAAA,IAAAA,CAAK6S,WAAWC,gBAAgB,MAAA,IAAA,CAAA,WAAA,gBAAA,IAAA,GAAA,MAAA,IAAA,CAAA,SAAA,IAAA,CAAA,aAAA;IAAA;IAAA,eAAA,EAAA,EAAA;QAAA,IAAA,KAAA;YAgBhC7R,WAAAA,GAAAA;YACAkP,QAAAA,IAAAA;YAAAA,MAAAA,IAAAA;QAAAA;QAAAA,WAAAA,GAAAA,KAAAA,aAkBAvQ,CAAAA,GAAAA,OAAAA,UAAAA,IAAAA,CAEKwQ,KAAK,UAAA,GAAA,IAAA,aAAA,GAAA,KAAA,cAAA,gBAAA,GAAA,KAAA,QAeVxQ,CAAAA,GAAAA,OAAAA,UAAAA,IAAAA,CAEKwQ,KAAK,UAAA,GAAA,IAAA,aAAA,GAAA,KAAA,cAAA,mBAAA,GAAA,KAAA,QAgBVxQ,CAAAA,GAAMuQ,OAAO,gBAAA,GAAA,OAAA;YAEXE,YAAAA,GAAAA,KAAAA;YACAC,IAAAA,GAAAA,KAAAA;YACAlH,cAAAA,GAAAA,KAAAA;YACAmH,MAAAA,GAAQJ,KAAK/G;YACboH,OAAOhE,GAAAA,KAAAA;YAAAA,MAAAA,GAAAA,KAAAA;QAAAA,GAAAA,IAAAA,CAIJ4D,KAAK,gBAAgBxQ,GAAAA,IAAAA,cAAAA,GAAAA,KAAAA,cAAAA,mBAAAA,GAAAA,KAAAA,SAAAA,QAAAA,KAAAA,2CAAAA,GAAAA,KAAAA,YAAAA,GAAAA,KAAAA;IAAAA;IAAAA,eAAAA,EAAAA,EAAAA;QAAAA,MAAAA,KAAAA,IAAAA,QAAAA,GAAAA,OAoCtBA,KAAAA;YACJqB,MAAMjB,IAAAA;YACNmN,QAAAA,IAAAA;YACAgF,SAAShF;YACTqD,WAAAA,GAAAA;YAEAnB,MAAMlC;YAAAA,MAAAA,GAAAA;YAAAA,SAAAA,GAAAA;YAAAA,YAAAA,GAAAA,IAAAA,CAAAA,EAAAA;YAAAA,WAAAA,GAAAA;QAAAA;QAAAA,IAAAA,CAAAA,KAAAA,eAAAA,KAAAA,GAAAA,kBAAAA,IAAAA,CAYD8F,YAAYC,MAAAA,GAAAA,oBAAAA,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,QAAAA,CAAAA,yBAAAA,KAAAA,IAAAA,CAAAA,YAAAA,QAAAA,CAAAA,KAAAA,GAAAA,QAAAA;IAAAA;IAAAA,YAAAA,EAAAA,EAAAA;QAgBnBtT,MAAM4Q,KAAAA,OAAAA,OAAAA,CAAAA,GAAAA;QAAAA,GAAAA,OAAAA,GAAAA,QAAAA,QAAAA,sBAAAA,iBAAAA,GAAAA,QAKJ5Q,CAAAA,GAAMmL,OAAAA,GAASsE,IAAAA,CAAK,EAAA,GAAA,GACpBzP,GAAM2N,QAAQf,GAAAA,IAAAA,CAAAA,EAAAA,EAAAA,GAAAA,WAAAA,GAAAA,KAAAA,GAAAA,IAAAA,CAAAA,KAAAA,GAAAA,MAAAA;IAAAA;IAAAA,MAAAA,OAAAA;QAAAA,IAAAA;YAAAA,MAAAA,IAAAA,CAAAA,WAAAA;QAAAA,EAuBd,OAAOmE,IAAAA;YAAAA,OAAAA,QAAAA,OAAAA;QAAAA;QAAAA,OAAAA,QAAAA,QAAAA,IAAAA;IAAAA;IAAAA,MAAAA,QAAAA;QAsBT,IAAA,CAAA,IAAA,CAAA,YAAA,OAAA,QAAA,QAAA,IAAA;QAAA,IAAA;YAAA,MAAA,IAAA,CAAA,WAAA;QAAA,EAGE,OAAOA,IAAAA;YAAAA,OAAAA,QAAAA,OAAAA;QAAAA;QAAAA,OAAAA,QAAAA,QAAAA,IAAAA;IAAAA;IAAAA,yBAAAA;QAAAA,GAAAA,cAAAA,QAAAA,KAAAA;IAAAA;IAAAA,YAAAA,EAAAA,EA4Ka1Q,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,cAAAA,OAAAA,IAAAA;YAKlBA,IAAAA,KAAAA,QAAAA,KAAAA,EAAAA,CAAAA,OAAAA,MAAAA,KAAAA;YACAH,KAAAA,IAAAA,KAAmB;gBAAA,UAAA;YAAA;QAAA;QAAA,IAAA,aAAA,eAAA,SAAA,KAAA;YAAA,KAAA,MAWjBI,GAAAA,YAAAA,CAAAA,GAAAA,WAAAA,aAAAA,oBAAAA;YAEJmO,IAAAA,KAAAA,EAAAA;YAAAA,OAAAA,UAAAA,iBAAAA,GACmC8E,UAAAA,QAAAA,CAAAA;gBACjCjT,GAAAA,KAAAA,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,YAAAA,IAAAA,IAAAA;YAAAA,IAAAA;QAAAA;QAAAA,OAAAA,KAAAA,CAAAA,YAAAA,IAAAA,IAAAA;IAAAA;IAAAA,mBAqJaN,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OACjBE,GAAAA,YAAAA,GAAAA,IAAAA,CAAAA,YAAAA,IAAAA,IAAAA;IAAAA;IAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,YAAAA,IAAAA,IAAAA,IAAAA;IAAAA;IAAAA,YAAAA,EAAAA,EAiCsBG,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,GAAAA,cAAAA,cAAAA,OAAAA,IAIe;YACjCA,IAAAA,KAAAA,EAAAA,CAAkBmT,OAAAA;YAClBtT,KAAAA,IAAAA,KAAmB;gBAAA,UAAA;YAAA;QAAA;QAAA,OAAA,aAAA,eAAA,SAAA,MAAA,CAAA,KAAA,MAAA,GAAA,YAAA,CAAA,GAAA,WAAA,aAAA,oBAAA,GAAA,UAAA,iBAAA,GAAA,UAAA,MAAA,CAAA,KAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,YAAA,IAAA,IAAA,IAAA,KAAA,CAAA,YAAA,IAAA;IAAA;IAAA,eAAA,EAAA,EAAA,EAAA,EAAA,KAAA,CAAA,CAAA,EAAA;QAAA,IAAA,GAAA,cAAA,cAAA,OAAA,IAmDc;YACjCG,IAAAA,KAAAA,EAAAA,CAAkBmT,OAAAA;YAClBtT,KAAAA,IAAAA,KAAmB;gBAAA,UAAA;YAAA;QAAA;QAAA,IAAA,KAAA,MAAA,GAAA,YAAA,CAAA,GAAA,WAAA,aAAA,oBAAA,GAAA,QAAA,IAAA,OAAA,UAUXuT,iBAAAA,GAAAA,UAAAA,QAAAA,CAAAA;YAAAA,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,IAAAA,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA;QAAAA,IAAAA,KAAAA,CAAAA;QAAAA,aAAAA,eAAAA,SAAAA,MAAAA,UAAAA,iBAAAA,GASyBzT,UAAAA,QAAAA,CAAAA;YACjCI,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,eAAAA,IAAAA,IAAAA;QAAAA,KAAAA,KAAAA,CAAAA,eAAAA,IAAAA,IAAAA;IAAAA;IAAAA,aAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA;QAAAA,OAAAA,KAAAA,cAAAA,YAAAA,KAAAA,IAAAA,UAAAA,IAAAA,KA2CJA,IAAAA,CAAAA,YAAAA,KAAAA,KAAAA;IAAAA;IAAAA,gBAAAA,EAAAA,EAAAA;QAAAA,IAAAA,CAAAA,cAAAA,IAAAA,CAAAA,YAAAA,OAAAA,CAAAA,KAAAA,OAAAA;IAAAA;IAAAA,aAuBWsT,EAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,YAAAA,SAAAA;IAAAA;IAAAA,IAAAA,OAAAA;QAAAA,OAAAA,IAAAA,CAAAA,WAAAA;IAAAA;IAAAA,IAAAA,KAAAA;QAAAA,OAAAA,IAAAA,CAAAA,WAAAA;IAAAA;IAAAA,IAAAA,aAAAA;QAAAA,OAAAA,IAAAA,CAAAA,WAAAA;IAAAA;IAAAA,IAAAA,eAAAA;QAAAA,OAAAA,IAAAA,CAAAA,WAAAA;IAAAA;IAAAA,IAAAA,eAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,aAAAA,EAAAA,EAAAA;QAAAA,IAAAA,IAAAA,CAAAA,cAkETvI,CAAAA,KAAAA,SAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,UAAAA;QAAAA,IAAAA,CAAAA,gBAAAA;IAAAA;IAAAA,IAAAA,QAAAA;QAAAA,OAAAA,IAAAA,CAAAA,WAAAA;IAAAA;IAAAA,IAAAA,OAAAA;QAAAA,OAAAA,IAAAA,CAAAA,WAAAA;IAAAA;IAAAA,IAAAA,oBAAAA;QAAAA,OAAAA,GAAAA,cAAAA,QAAAA,KAAAA,iFAAAA,CAAAA;IAAAA;AAAAA;AAAAA,IAAAA,UAAAA,QAAAA;IAAAA,IAAAA;QCl2BFwI,OAAO7C;IAAAA,EACP,OAAOA,KAAAA;QACP8C,IAAIC;QACJD,KAAKE,yBAAAA,OAAAA,aAAAA,CAAAA,OACyBC,YAAAA,CAAAA,CAAAA,GAAAA,OAAAA,OAAAA,OAAAA,WAAAA;IAAAA;IAAAA,IAAAA;QAO9BC;IAAAA,EACA,OAAA,KAAA;QACAJ,IAAII;QACJF,KDkCA1T,oDAAAA,OAAAA,cAAAA;IAAAA;AAAAA;A;;;;;;;;;;;;;;;;;;;CCmBIwK,GAAAA,MAAAA,gBAAAA;IAAAA,aAAAA;QAAAA,KAAAA,IAAAA,IAAAA,CAAAA,WAAAA;YAAAA,MAAAA;gBAAAA,QAAAA,UAAkBqJ,gBAAgB;gBAClCnT,SAAAA,UAAAA,gBAAAA;gBAAAA,UAAAA,IAAAA;YAAAA;QAAAA,GAAAA,IAAAA,CAAAA,YAAAA,MAAAA,IAAAA,CAAAA,aAAAA,CAAAA,GAAAA,IAAAA,CAAAA,UAAAA,EAAAA,EAAAA,IAAAA,CAAAA,sBAAAA,EAAAA,EAAAA,IAAAA,CAAAA,WAAAA,EAAAA,EAAAA,IAAAA,CAAAA,uBAAAA,EAAAA,EAAAA,IAAAA,CAAAA,oBAAAA,EAAAA,EAAAA,IAAAA,CAAAA,gBAAAA;IAAAA;IAAAA,MAAAA,OAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,IAAAA,IAAAA,CAAAA,aAAAA,CAAAA,MAAAA,GAAAA,YAAAA,IAAAA,CAAAA,cAAAA,CAAAA,cAAAA,OAAAA,MAAAA,CAAAA,KAAAA;YA2J+DoQ,UAAAA;YAAAA,OAAAA;QAAAA,CAAAA,GAAAA,MAAAA,CAAAA,GAAAA,QAAAA,CAAAA,CAAAA,CAAAA,GAAAA,IAAAA,CAAAA,SAAAA,OAAAA,cAAAA,OAAAA,GAAAA,YAAAA,GAAAA,YAAAA,QAAAA;QAAAA,MAAAA,KAAAA;YAuBjE7P,WAAAA,IAAAA,CAAAA;YACAuP,QAAAA,IAAAA;YACAsD,MAAAA;YAAAA,OAAAA,KAAAA;QAAAA,GAAAA,KAAAA;YAgBA7S,WAAAA,IAAAA,CAAAA;YACAuP,QAAAA,IAAAA;YAAAA,MAAAA;QAAAA,GAAAA,KAAAA;YAeAvP,WAAAA,IAAAA,CAAAA;YACAuP,QAAAA,IAAAA;YAAAA,MAAAA;QAAAA;QAAAA,IAAAA;YAAAA,cAAAA,OAAAA,GAAAA,4BAAAA,IAAAA,CAAAA,YAAAA,MAAAA,GAAAA,0BAAAA;gBAO2BuD,OAAAA,GAAAA;gBACxBA,UAAAA,GAAAA;YAAAA,KAAAA,IAAAA,CAAAA,YAAAA,MAAAA,UAAAA,kBAAAA;gBAAAA,OAAAA,GAAAA;gBAIAA,UAAAA,GAAAA;YAAAA;QAAAA,EAGHC,OAAAA,IAAAA;YAAAA,OACAA,GAAAA,QAAAA,IACAhU,IAAAA,CAAAA,KAAAA,SAAmBQ,KAAAA,cAAAA,OAAAA,GAAAA,YAAAA,GAAAA,SAAAA,KAAAA,QAAAA,OAAAA;QAAAA;QAAAA,IAAAA,CAAAA,KAAAA,qBAAAA,KAAAA,IAAAA,CAAAA,UAAAA,gBAAAA,IAAAA,CAAAA,wBAAAA,KAAAA,IAAAA;QAAAA,IAAAA;YAAAA,MAAAA,IAAAA,CAAAA;QAAAA,EAgBnBwT,OAAAA,IAAAA;YAAAA,OACAA,GAAAA,QAAmBA,IACnBhU,IAAAA,CAAAA,KAAAA,SAAAA,KAAAA,cAAAA,OAAAA,GAAAA,YAAAA,GAAAA,SAAAA,KAAAA,QAAAA,OAAAA;QAAAA;QAAAA,OAAAA,IAAAA,CAAAA,KAAAA,WAAAA,KAAAA,cAAAA,OAAAA,GAAAA,YAAAA,GAAAA,YAAAA,QAAAA,QAAAA,IAAAA;IAAAA;IAAAA,MAAAA,UAAAA;QAAAA,OAAAA,IAAAA,CAAAA,aAAAA,CAAAA,IAAAA,CAAAA,UAAAA,gBAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAAA,2BAAAA,KAAAA;YAAAA,aAAAA,cAAAA,OAAAA,UAAAA,SAAAA,UAAAA,SAAAA,IAAAA,CAAAA,YAAAA;YAAAA,IAAAA,KAAAA;gBAmDEiB,WAAAA,IAAAA,CAAAA;gBACAuP,QAAAA,IAAAA;gBAAAA,MAAAA;YAAAA;YAKFxQ,IAAAA,CAAKsN,KAAAA,YAAAA,KAELtN,IAAAA,CAAAA;QAAAA;IAAAA;IAAAA,aAAAA,EAAAA,EAAAA,KAAAA;QAAAA,cAAAA,CAAAA;IAAAA,CAAAA,EAAAA;QAAAA,IAAAA,IAAAA,CAAAA,YA2BmB;YACnB,IAAA,CAAKqQ,IAAAA,CAAAA,SAAAA,MAAAA,IAAAA,MAAAA;YAAAA,IAAAA,CAAAA,IAAAA;QAAAA;QAAAA,IAAAA,GAIK4D,cAAAA;YAAAA,IAAAA,IAAAA,KAAAA,GAAAA,KAAAA,IAAAA,CAAAA,oBAAAA,QAAAA,KAAAA,IAAAA,IAAAA,CAAAA,mBAAAA,CAAAA,GAAAA,CAAAA,OAAAA,GAAAA,YAAAA,OAAAA,IAAAA,CAAAA,mBAAAA,CAAAA,GAAAA;QAAAA,OAAAA,IAAAA,IAAAA,KAAAA,GAAAA,KAAAA,IAAAA,CAAAA,OAAAA,QAAAA,KAAAA,IAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GAAAA,CAAAA,OAAAA,GAAAA,YAAAA,OAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GAAAA;IAAAA;IAAAA,eAAAA,EAAAA,EAAAA,KAAAA;QAAAA,cAAAA,CAAAA;IAAAA,CAAAA,EAAAA;QAAAA,IAAAA,IAAAA,CAAAA,YA+BS;YACnB,IAAA,CAAK7K,IAAAA,CAAAA,SAAAA,MAAAA,IAAAA,MAAAA;YAAAA,IAAAA,CAAAA,IAAAA;YAAAA,KAAAA,GAAAA;QAAAA;QAAAA,IAAAA,GAKK6K,cAAAA;YAAAA,IAAAA,IAAAA,KAAAA,GAAAA,KAAAA,IAAAA,CAAAA,oBAAAA,QAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,mBAAAA,CAAAA,GAAAA,CAAAA,KAAAA,QAAAA,KAAAA,OAAAA,IAAAA,CAAAA,mBAAAA,CAAAA,GAAAA;QAAAA,OAAAA,IAAAA,IAAAA,KAAAA,GAAAA,KAAAA,IAAAA,CAAAA,OAAAA,QAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GAAAA,CAAAA,KAAAA,QAAAA,KAAAA,OAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GAAAA;IAAAA;IAAAA,gBAAAA,EAAAA,EAAAA,KAAAA;QAAAA,cAAAA,CAAAA;IAAAA,CAAAA,EAAAA;QAAAA,IAAAA,IAAAA,CAAAA,YAAAA;YAgCV,IAAA,CAAK7K,IAAAA,CAAAA,SAAAA,MAAAA,IAAAA,MAAAA;YAAAA,IAAAA,CAAAA,IAAAA;YAAAA,KAAAA,GAAAA;QAAAA;QAAAA,IAAAA,GAKK6K,cAAAA;YAAAA,IAAAA,IAAAA,KAAAA,GAAAA,KAAAA,IAAAA,CAAAA,qBAAAA,QAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,oBAAAA,CAAAA,GAAAA,CAAAA,KAAAA,QAAAA,KAAAA,OAAAA,IAAAA,CAAAA,oBAAAA,CAAAA,GAAAA;QAAAA,OAAAA,IAAAA,IAAAA,KAAAA,GAAAA,KAAAA,IAAAA,CAAAA,QAAAA,QAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,KAAAA,QAAAA,KAAAA,OAAAA,IAAAA,CAAAA,OAAAA,CAAAA,GAAAA;IAAAA;IAAAA,cAAAA,EAAAA,EAAAA,KAAAA;QAAAA,cAAAA,CAAAA;IAAAA,CAAAA,EAAAA;QAAAA,IAAAA,IAAAA,CAAAA,YAAAA;YAmCV,IAAA,CAAK5D,IAAAA,CAAAA,SAAAA,MAAAA,IAAAA,MAAAA;YAAAA,IAAAA,CAAAA,IAAAA;QAAAA;QAAAA,IAAAA,GAAAA,cAAAA;YAAAA,IAAAA,IAAAA,KAAAA,GAAAA,KAAAA,IAAAA,CAAAA,qBAAAA,QAAAA,KAAAA,IAAAA,IAAAA,CAAAA,oBAAAA,CAAAA,GAAAA,CAAAA,OAAAA,GAAAA,YAAAA,OAAAA,IAAAA,CAAAA,oBAAAA,CAAAA,GAAAA;QAAAA,OAAAA,IAAAA,IAAAA,KAAAA,GAAAA,KAAAA,IAAAA,CAAAA,QAAAA,QAAAA,KAAAA,IAAAA,IAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,OAAAA,GAAAA,YAAAA,OAAAA,IAAAA,CAAAA,OAAAA,CAAAA,GAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAqBEjP,cAAAA,QAAAA,KAAAA,uFAAAA,UAAAA,aAAAA,IAAAA,IAAAA,CAAAA;IAAAA;IAAAA,UAcDqL,EAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CACCrL,cAAAA,CAAAA,QAAAA,KAAAA,yEAAAA,KAAAA,SAAAA,GAAAA,GAAAA,CAAAA,MAAAA,OAAAA,MAAAA,KAAAA,MAAAA,OAAAA,UAAAA,eAAAA,UAAAA,aAAAA,IAAAA,IAAAA,CAAAA,eAAAA;IAAAA;IAAAA,iBAAAA,EAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAmBAA,cAAAA,QAAAA,KAAAA,yEAAAA,UAAAA,iBAAAA;IAAAA;IAAAA,eAAAA,EAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAcAA,cAAAA,QAAAA,KAAAA,+FAAAA,UAAAA,iBAAAA;IAAAA;IAAAA,gBAAAA,EAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAgBAA,cAAAA,QAAAA,KAAAA,+FAAAA,UAAAA,gBAAAA,IAAAA,IAAAA,CAAAA;IAAAA;IAAAA,kBAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAeAA,cAAAA,QAAAA,KAAAA,oFAAAA,UAAAA,eAAAA,IAAAA;IAAAA;IAAAA,mBAAAA,EAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,cAAAA,QAAAA,KAAAA,+EAAAA,UAAAA,YAAAA;IAAAA;IAAAA,MAAAA,2BAAAA;QA+BT,IAAI8S,KAAAA,EAAAA;QAAAA,OACJlU,IAAAA,CAAKmU,OAAOtG,QAAQvB,CAAAA,KAAAA,GAAAA,KAAAA,GAAAA,aAEpBtM,IAAAA,CAAAA,QAAAA,QAAAA,CAAAA,KAAAA,GAAAA,KAAAA,GAAAA,aACOoU,QAAAA,IAAYF,IAAAA,KAAAA;YACjBlU,IAAAA,CAAKqU,UAAAA,EAAAA,EACLrU,IAAAA,CAAAA,WAAAA,EAAAA;QAAAA;IAAAA;IAAAA,wBAAAA,EAAAA,EAAAA;QAAAA,IAAAA,CAAAA;QAAAA,IAAAA,KAAAA;YA4DAwQ,WAAAA,GAAaD;YACbtP,MAAAA,GAAAA,KAAAA;YAAAA,QAAAA,IAAAA;QAAAA;QAAAA,IAAAA,gBAAAA,GAOIuL,KAAAA,SAAAA,WAAAA,GAAAA,KAAAA,YAAAA;YAAAA,aAAAA,GAAAA,KAAAA,OAAAA,GAAAA,OAAAA,IAAAA,CAAAA,cAAAA,GAAAA,KAAAA,MAAAA,YAAAA,GAAAA,KAAAA,QAAAA,CAAAA,GAAAA,OAAAA,IAAAA,CAAAA,aAAAA,GAAAA,KAAAA,GAAAA,GAAAA,IAAAA,CAAAA,KAAAA,GAAAA,KAAAA,OAAAA;YAAAA,MAAAA,KAAAA,OAAAA,OAAAA,CAAAA,GAAAA;YAYJ8H,GAAAA,OAAAA,gBAAAA,IAAAA,CAAAA,KAAAA,GAAAA,MAAAA;QAAAA,OAKK,IAAA,mBAAA,GAAM9D,KAAAA,SAAAA,cAAAA,GAAAA,KAAAA,YAAAA;YAAAA,YAAAA,GAAAA,KAAAA,OAAAA,GAAAA,OAAAA,IAAAA,CAAAA,aAAAA,GAAAA,KAAAA,IAAAA;gBAAAA,cAAAA,CAAAA;YAAAA,KAAAA,aAAAA,GAAAA,KAAAA,QAAAA,CAAAA,GAAAA,OAAAA,IAAAA,CAAAA,cAAAA,GAAAA,KAAAA,IAAAA;gBAAAA,cAAAA,CAAAA;YAAAA,EAAAA,GAAAA,IAAAA,CAAAA,KAAAA,GAAAA,KAAAA,OAAAA;YAWX8D,MAAAA,KAAAA,OAAAA,OAAAA,CAAAA,GAAAA;YACAA,GAAAA,OAAAA,gBAAAA,IAAAA,CAAAA,KAAAA,GAAAA,MAAAA;QAAAA;IAAAA;IAAAA,MAAAA,0BAAAA;QAAAA,OAAAA,QAAAA,IAAAA;YAAAA,IAAAA,CAAAA;YAAAA,IAAAA,CAAAA;SAAAA;IAAAA;IAAAA,MAAAA,gBAAAA;QAAAA,IAAAA,CAAAA,IAAAA,CAAAA,WAAAA;QAAAA,IAAAA,IAAAA,KAAAA,IAAAA,CA8BgBF,QAAAA,SAAAA,GAAAA,MAAAA,GAAAA,KAAAA;YAChB,MAAMG,KAAAA,IAAAA,CAAeC,OAAAA,CAAAA,GAAAA;YAAAA,MAAAA,KAAAA,IAAAA,CAAAA,UAAAA,OAAAA,UAAAA,KAAAA,CAAAA,KAAAA,OAAAA,GAAAA,eAKnBxU,CAAAA,IAAAA,CAAKoU,oBAAoB7T,KAAAA,KAAAA,IAAAA,CAAAA,QAAAA,OAAAA,IAAAA,EAAAA;QAAAA;QAAAA,IAAAA,KAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,UAAAA,OAAAA,QAAAA,CAAAA;YAAAA,IAAAA,CAAAA,IAAAA,CAAAA,QAAAA,KAAAA,CAAAA,KAAAA,GAAAA,eAAAA,KAAAA;gBAAAA,IAAAA,KAAAA,IAAAA,CAAAA,oBAAAA,KAAAA,CAAAA,KAAAA,GAAAA,eAAAA;gBAAAA,MAAAA,CAAAA,KAAAA,IAAAA,MAAAA,GAAAA,GAAAA,IAAAA,CAAAA,QAAAA,KAAAA,KAAAA,GAAAA,KAAAA,GAAAA;YAAAA;QAAAA,IAAAA,QAAAA,IAAAA;IAAAA;IAAAA,MAAAA,iBAAAA;QAAAA,IAAAA,CAAAA,IAAAA,CAAAA,WAAAA;QAAAA,IAAAA,IAAAA,KAAAA,IAAAA,CAwCX8T,SAAAA,SAAAA,GAAAA,MAAAA,GAAAA,KAAAA;YAChB,MAAMF,KAAU9T,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA;YAAAA,MAAAA,KAAAA,IAAAA,CAAAA,UAAAA,QAAAA,UAAAA,KAAAA,CAAAA,KAAAA,OAAAA,GAAAA,gBAKdL,CAAAA,IAAAA,CAAKqU,qBAAqB9T,KAAAA,KAAAA,IAAAA,CAAAA,SAAAA,OAAAA,IAAAA,EAAAA;QAAAA;QAAAA,IAAAA,KAAAA,EAAAA;QAAAA,OAAAA,IAAAA,CAAAA,UAAAA,QAAAA,QAAAA,CAAAA;YAAAA,IAAAA,CAAAA,IAAAA,CAAAA,SAAAA,KAAAA,CAAAA,KAAAA,GAAAA,gBAAAA,KAAAA;gBAAAA,IAAAA,KAAAA,IAAAA,CAAAA,qBAAAA,KAAAA,CAAAA,KAAAA,GAAAA,gBAAAA;gBAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,GAAAA,IAAAA,CAAAA,SAAAA,KAAAA,KAAAA,GAAAA,KAAAA,GAAAA;YAAAA;QAAAA,IAAAA,QAAAA,IAAAA;IAAAA;IAAAA,IAAAA,UAAAA;QAAAA,OAAAA,SAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,SAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,SAAAA;QAAAA,OAAAA,IAAAA,CA8ErBa,cAAAA,QAAAA,KAAAA,sEAAAA,UAAAA;IAAAA;IAAAA,IAAAA,YAAAA;QAAAA,OAAAA,IAAAA,CAAAA,cAAAA,QAAAA,KAAAA,4EAAAA,UAAAA;IAAAA;IAAAA,IAAAA,eAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,aAAAA,EAAAA,EAAAA;QAAAA,IAAAA,IAAAA,CAAAA,cA4CP2J,CAAAA,KAAAA,SAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IAAAA,UAAAA;QAAAA,IAAAA,CAAAA,gBAAAA;IAAAA;IAAAA,IAAAA,UAAAA;QAAAA,OAAAA,IAAAA,CAAAA;IAAAA;IAAAA,IAAAA,YAAAA;QAAAA,OAAAA,eAAAA,OAAAA,aAAAA,CAAAA,CAAAA,UAAAA;IAAAA;IAAAA,IAAAA,eAAAA;QAAAA,OAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,aAAAA,CAAAA,IAAAA,CAAAA,UAAAA,YAAAA;IAAAA;IAAAA,IAAAA,OAAAA;QAAAA,OAAAA,YAAAA;IAAAA;IAAAA,IAAAA,UAAAA;QAAAA,OAAAA;IAAAA;IAAAA,IAAAA,UAAAA;QAAAA,OAAAA;IAAAA;IAAAA,IAAAA,iBAAAA;QAAAA,OAAAA,IAAAA,CAAAA,cAAAA,QAAAA,KAAAA,2EAAAA,aAAAA;IAAAA;IAAAA,IAAAA,uBAAAA;QAAAA,OAAAA,IAAAA,CAAAA,cAAAA,QAAAA,KAAAA,kFAAAA,aAAAA;IAAAA;IAAAA,IAAAA,6BAAAA;QAAAA,OAAAA,IAAAA,CA4HO3J,cAAAA,QAAAA,KAAAA,8FAAAA,aAAAA;IAAAA;IAAAA,IAAAA,+BAAAA;QAAAA,OAAAA,IAAAA,CAAAA,cAAAA,QAAAA,KAAAA,+GAAAA,aAAAA;IAAAA;IAAAA,IAAAA,4BAAAA;QAAAA,OAAAA,IAAAA,CAAAA,cAAAA,QAAAA,KAAAA,6FAAAA,aAAAA;IAAAA;IAAAA,IAAAA,QAAAA;QAAAA,OAAAA,IAAAA,CAAAA,cAAAA,QAAAA,KAAAA,wCAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;SAAAA;IAAAA;AAAAA;AAgEbmJ,MAnjCQC,KAAAA,IAAAA;AAAAA,GAAAA,cAAAA,MAAAA,QAAAA,eAAAA,cAAAA,QAAAA,YAAAA,WAAAA,QAAAA,QAAAA,OAAAA,QAAAA,eAAAA,cAAAA,QAAAA,UAAAA,SAAAA,QAAAA,OAAAA,MAAAA,QAAAA,SAAAA,QAAAA,QAAAA,gBAAAA,eAAAA,QAAAA,YAAAA,WAAAA,QAAAA,UAAAA;;;ACjGR,oCAAoC;AACpC,IAAI,UAAU,OAAO,UAAU,CAAC;AAEhC,2EAA2E;AAC3E,2EAA2E;AAC3E,+EAA+E;AAC/E,8DAA8D;AAE9D,IAAI;AACJ,IAAI;AAEJ,SAAS;IACL,MAAM,IAAI,MAAM;AACpB;AACA,SAAS;IACL,MAAM,IAAI,MAAM;AACpB;AACC,CAAA;IACG,IAAI;QACA,IAAI,OAAO,eAAe,YACtB,mBAAmB;aAEnB,mBAAmB;IAE3B,EAAE,OAAO,GAAG;QACR,mBAAmB;IACvB;IACA,IAAI;QACA,IAAI,OAAO,iBAAiB,YACxB,qBAAqB;aAErB,qBAAqB;IAE7B,EAAE,OAAO,GAAG;QACR,qBAAqB;IACzB;AACJ,CAAA;AACA,SAAS,WAAW,GAAG;IACnB,IAAI,qBAAqB,YACrB,uCAAuC;IACvC,OAAO,WAAW,KAAK;IAE3B,wDAAwD;IACxD,IAAI,AAAC,CAAA,qBAAqB,oBAAoB,CAAC,gBAAe,KAAM,YAAY;QAC5E,mBAAmB;QACnB,OAAO,WAAW,KAAK;IAC3B;IACA,IAAI;QACA,sEAAsE;QACtE,OAAO,iBAAiB,KAAK;IACjC,EAAE,OAAM,GAAE;QACN,IAAI;YACA,kHAAkH;YAClH,OAAO,iBAAiB,KAAK,MAAM,KAAK;QAC5C,EAAE,OAAM,GAAE;YACN,iKAAiK;YACjK,OAAO,iBAAiB,KAAK,IAAI,EAAE,KAAK;QAC5C;IACJ;AAGJ;AACA,SAAS,gBAAgB,MAAM;IAC3B,IAAI,uBAAuB,cACvB,uCAAuC;IACvC,OAAO,aAAa;IAExB,0DAA0D;IAC1D,IAAI,AAAC,CAAA,uBAAuB,uBAAuB,CAAC,kBAAiB,KAAM,cAAc;QACrF,qBAAqB;QACrB,OAAO,aAAa;IACxB;IACA,IAAI;QACA,sEAAsE;QACtE,OAAO,mBAAmB;IAC9B,EAAE,OAAO,GAAE;QACP,IAAI;YACA,mHAAmH;YACnH,OAAO,mBAAmB,KAAK,MAAM;QACzC,EAAE,OAAO,GAAE;YACP,kKAAkK;YAClK,4EAA4E;YAC5E,OAAO,mBAAmB,KAAK,IAAI,EAAE;QACzC;IACJ;AAIJ;AACA,IAAI,QAAQ,EAAE;AACd,IAAI,WAAW;AACf,IAAI;AACJ,IAAI,aAAa;AAEjB,SAAS;IACL,IAAI,CAAC,YAAY,CAAC,cACd;IAEJ,WAAW;IACX,IAAI,aAAa,QACb,QAAQ,aAAa,OAAO;SAE5B,aAAa;IAEjB,IAAI,MAAM,QACN;AAER;AAEA,SAAS;IACL,IAAI,UACA;IAEJ,IAAI,UAAU,WAAW;IACzB,WAAW;IAEX,IAAI,MAAM,MAAM;IAChB,MAAM,IAAK;QACP,eAAe;QACf,QAAQ,EAAE;QACV,MAAO,EAAE,aAAa,IAClB,IAAI,cACA,YAAY,CAAC,WAAW,CAAC;QAGjC,aAAa;QACb,MAAM,MAAM;IAChB;IACA,eAAe;IACf,WAAW;IACX,gBAAgB;AACpB;AAEA,QAAQ,WAAW,SAAU,GAAG;IAC5B,IAAI,OAAO,IAAI,MAAM,UAAU,SAAS;IACxC,IAAI,UAAU,SAAS,GACnB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,QAAQ,IAClC,IAAI,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC,EAAE;IAGlC,MAAM,KAAK,IAAI,KAAK,KAAK;IACzB,IAAI,MAAM,WAAW,KAAK,CAAC,UACvB,WAAW;AAEnB;AAEA,+BAA+B;AAC/B,SAAS,KAAK,GAAG,EAAE,KAAK;IACpB,IAAI,CAAC,MAAM;IACX,IAAI,CAAC,QAAQ;AACjB;AACA,KAAK,UAAU,MAAM;IACjB,IAAI,CAAC,IAAI,MAAM,MAAM,IAAI,CAAC;AAC9B;AACA,QAAQ,QAAQ;AAChB,QAAQ,UAAU;AAClB,QAAQ,MAAM,CAAC;AACf,QAAQ,OAAO,EAAE;AACjB,QAAQ,UAAU,IAAI,sCAAsC;AAC5D,QAAQ,WAAW,CAAC;AAEpB,SAAS,QAAQ;AAEjB,QAAQ,KAAK;AACb,QAAQ,cAAc;AACtB,QAAQ,OAAO;AACf,QAAQ,MAAM;AACd,QAAQ,iBAAiB;AACzB,QAAQ,qBAAqB;AAC7B,QAAQ,OAAO;AACf,QAAQ,kBAAkB;AAC1B,QAAQ,sBAAsB;AAE9B,QAAQ,YAAY,SAAU,IAAI;IAAI,OAAO,EAAE;AAAC;AAEhD,QAAQ,UAAU,SAAU,IAAI;IAC5B,MAAM,IAAI,MAAM;AACpB;AAEA,QAAQ,MAAM;IAAc,OAAO;AAAI;AACvC,QAAQ,QAAQ,SAAU,GAAG;IACzB,MAAM,IAAI,MAAM;AACpB;AACA,QAAQ,QAAQ;IAAa,OAAO;AAAG;;;;ACvLvC;;;;;;;;CAQC,GAEA,CAAA;IAEC;IAEA,oBAAoB,GACpB,2EAA2E,GAE3E;;;GAGC,GACD,IAAI,gBAAe;QACjB,IAAI,CAAC;IACP;IACA,cAAa,YAAY;QACvB;;;KAGC,GACD,MAAM;YACJ,IAAI,OAAO,IAAI,IAAI;YAEnB,8BAA8B;YAC9B,KAAK,WAAW;YAEhB,wCAAwC;YACxC,KAAK,kBAAkB,EAAE;YACzB,KAAK,gBAAgB;YAErB,uBAAuB;YACvB,KAAK,UAAU,CAAC;YAChB,KAAK,SAAS,EAAE;YAChB,KAAK,SAAS;YACd,KAAK,UAAU;YACf,KAAK,gBAAgB;YACrB,KAAK,aAAa,AAAC,OAAO,WAAW,eAAe,OAAO,YAAa,OAAO,YAAY;YAE3F,qBAAqB;YACrB,KAAK,aAAa;YAClB,KAAK,UAAU;YACf,KAAK,gBAAgB;YACrB,KAAK,cAAc;YACnB,KAAK,MAAM;YAEX,mDAAmD;YACnD,KAAK,aAAa;YAElB,sDAAsD;YACtD,KAAK;YAEL,OAAO;QACT;QAEA;;;;KAIC,GACD,QAAQ,SAAS,GAAG;YAClB,IAAI,OAAO,IAAI,IAAI;YACnB,MAAM,WAAW;YAEjB,+DAA+D;YAC/D,IAAI,CAAC,KAAK,KACR;YAGF,IAAI,OAAO,QAAQ,eAAe,OAAO,KAAK,OAAO,GAAG;gBACtD,KAAK,UAAU;gBAEf,iDAAiD;gBACjD,IAAI,KAAK,QACP,OAAO;gBAGT,gEAAgE;gBAChE,IAAI,KAAK,eACP,KAAK,WAAW,KAAK,eAAe,KAAK,QAAO,IAAI;gBAGtD,4DAA4D;gBAC5D,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,OAAO,QAAQ,IAClC,IAAI,CAAC,KAAK,MAAM,CAAC,EAAE,CAAC,WAAW;oBAC7B,4CAA4C;oBAC5C,IAAI,MAAM,KAAK,MAAM,CAAC,EAAE,CAAC;oBAEzB,kDAAkD;oBAClD,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;wBAC/B,IAAI,QAAQ,KAAK,MAAM,CAAC,EAAE,CAAC,WAAW,GAAG,CAAC,EAAE;wBAE5C,IAAI,SAAS,MAAM,OACjB,MAAM,MAAM,SAAS,MAAM,UAAU;oBAEzC;gBACF;gBAGF,OAAO;YACT;YAEA,OAAO,KAAK;QACd;QAEA;;;KAGC,GACD,MAAM,SAAS,KAAK;YAClB,IAAI,OAAO,IAAI,IAAI;YAEnB,+DAA+D;YAC/D,IAAI,CAAC,KAAK,KACR;YAGF,KAAK,SAAS;YAEd,wDAAwD;YACxD,IAAI,KAAK,eACP,KAAK,WAAW,KAAK,eAAe,QAAQ,IAAI,KAAK,SAAS,QAAO,IAAI;YAG3E,+CAA+C;YAC/C,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,OAAO,QAAQ,IAClC,IAAI,CAAC,KAAK,MAAM,CAAC,EAAE,CAAC,WAAW;gBAC7B,4CAA4C;gBAC5C,IAAI,MAAM,KAAK,MAAM,CAAC,EAAE,CAAC;gBAEzB,4DAA4D;gBAC5D,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;oBAC/B,IAAI,QAAQ,KAAK,MAAM,CAAC,EAAE,CAAC,WAAW,GAAG,CAAC,EAAE;oBAE5C,IAAI,SAAS,MAAM,OACjB,MAAM,MAAM,QAAQ,AAAC,QAAS,OAAO,MAAM;gBAE/C;YACF;YAGF,OAAO;QACT;QAEA;;KAEC,GACD,MAAM;YACJ,IAAI,OAAO,IAAI,IAAI;YAEnB,wCAAwC;YACxC,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,OAAO,QAAQ,IAClC,KAAK,MAAM,CAAC,EAAE,CAAC;YAGjB,OAAO;QACT;QAEA;;;KAGC,GACD,QAAQ;YACN,IAAI,OAAO,IAAI,IAAI;YAEnB,IAAK,IAAI,IAAE,KAAK,OAAO,SAAO,GAAG,KAAG,GAAG,IACrC,KAAK,MAAM,CAAC,EAAE,CAAC;YAGjB,4DAA4D;YAC5D,IAAI,KAAK,iBAAiB,KAAK,OAAO,OAAO,KAAK,IAAI,UAAU,aAAa;gBAC3E,KAAK,IAAI;gBACT,KAAK,MAAM;gBACX;YACF;YAEA,OAAO;QACT;QAEA;;;;KAIC,GACD,QAAQ,SAAS,GAAG;YAClB,OAAO,AAAC,CAAA,IAAI,IAAI,OAAK,EAAG,OAAO,CAAC,IAAI,QAAQ,OAAO,IAAI;QACzD;QAEA;;;KAGC,GACD,QAAQ;YACN,IAAI,OAAO,IAAI,IAAI;YAEnB,+DAA+D;YAC/D,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,SAAS,cAAc;YAExD,oDAAoD;YACpD,KAAK;YAEL,+BAA+B;YAC/B,IAAI,CAAC,KAAK,eAAe;gBACvB,kEAAkE;gBAClE,IAAI,OAAO,UAAU,aACnB,IAAI;oBACF,IAAI,OAAO,IAAI;oBAEf,kDAAkD;oBAClD,IAAI,OAAO,KAAK,qBAAqB,aACnC,KAAK,gBAAgB;gBAEzB,EAAE,OAAM,GAAG;oBACT,KAAK,UAAU;gBACjB;qBAEA,KAAK,UAAU;YAEnB;YAEA,+DAA+D;YAC/D,IAAI;gBACF,IAAI,OAAO,IAAI;gBACf,IAAI,KAAK,OACP,KAAK,UAAU;YAEnB,EAAE,OAAO,GAAG,CAAC;YAEb,8BAA8B;YAC9B,IAAI,CAAC,KAAK,SACR,KAAK;YAGP,OAAO;QACT;QAEA;;;KAGC,GACD,cAAc;YACZ,IAAI,OAAO,IAAI,IAAI;YACnB,IAAI,YAAY;YAEhB,wEAAwE;YACxE,IAAI;gBACF,YAAY,AAAC,OAAO,UAAU,cAAe,IAAI,UAAU;YAC7D,EAAE,OAAO,KAAK;gBACZ,OAAO;YACT;YAEA,IAAI,CAAC,aAAa,OAAO,UAAU,gBAAgB,YACjD,OAAO;YAGT,IAAI,WAAW,UAAU,YAAY,eAAe,QAAQ,QAAQ;YAEpE,iFAAiF;YACjF,IAAI,KAAK,KAAK,aAAa,KAAK,WAAW,YAAY;YACvD,IAAI,aAAa,GAAG,MAAM;YAC1B,IAAI,aAAc,cAAc,SAAS,UAAU,CAAC,EAAE,CAAC,MAAM,IAAI,CAAC,EAAE,EAAE,MAAM;YAC5E,IAAI,cAAc,GAAG,QAAQ,cAAc,MAAM,GAAG,QAAQ,cAAc;YAC1E,IAAI,gBAAgB,GAAG,MAAM;YAC7B,IAAI,cAAe,eAAe,iBAAiB,SAAS,aAAa,CAAC,EAAE,EAAE,MAAM;YAEpF,KAAK,UAAU;gBACb,KAAK,CAAC,CAAE,CAAA,CAAC,cAAe,CAAA,YAAY,UAAU,YAAY,cAAc,QAAQ,QAAQ,GAAE,CAAC;gBAC3F,MAAM,CAAC,CAAC;gBACR,MAAM,CAAC,CAAC,UAAU,YAAY,4BAA4B,QAAQ,QAAQ;gBAC1E,KAAK,CAAC,CAAC,UAAU,YAAY,8BAA8B,QAAQ,QAAQ;gBAC3E,KAAK,CAAC,CAAC,UAAU,YAAY,8BAA8B,QAAQ,QAAQ;gBAC3E,KAAK,CAAC,CAAC,AAAC,CAAA,UAAU,YAAY,4BAA4B,UAAU,YAAY,YAAW,EAAG,QAAQ,QAAQ;gBAC9G,KAAK,CAAC,CAAC,UAAU,YAAY,cAAc,QAAQ,QAAQ;gBAC3D,KAAK,CAAC,CAAC,UAAU,YAAY,gBAAgB,QAAQ,QAAQ;gBAC7D,KAAK,CAAC,CAAC,AAAC,CAAA,UAAU,YAAY,mBAAmB,UAAU,YAAY,iBAAiB,UAAU,YAAY,aAAY,EAAG,QAAQ,QAAQ;gBAC7I,KAAK,CAAC,CAAC,AAAC,CAAA,UAAU,YAAY,mBAAmB,UAAU,YAAY,iBAAiB,UAAU,YAAY,aAAY,EAAG,QAAQ,QAAQ;gBAC7I,KAAK,CAAC,CAAC,AAAC,CAAA,UAAU,YAAY,mBAAmB,UAAU,YAAY,iBAAiB,UAAU,YAAY,aAAY,EAAG,QAAQ,QAAQ;gBAC7I,MAAM,CAAC,CAAE,CAAA,CAAC,eAAe,UAAU,YAAY,+BAA+B,QAAQ,QAAQ,GAAE;gBAChG,MAAM,CAAC,CAAE,CAAA,CAAC,eAAe,UAAU,YAAY,+BAA+B,QAAQ,QAAQ,GAAE;gBAChG,OAAO,CAAC,CAAC,UAAU,YAAY,4BAA4B,QAAQ,QAAQ;gBAC3E,MAAM,CAAC,CAAC,AAAC,CAAA,UAAU,YAAY,oBAAoB,UAAU,YAAY,cAAa,EAAG,QAAQ,QAAQ;YAC3G;YAEA,OAAO;QACT;QAEA;;;;;KAKC,GACD,cAAc;YACZ,IAAI,OAAO,IAAI,IAAI;YAEnB,+EAA+E;YAC/E,IAAI,KAAK,kBAAkB,CAAC,KAAK,KAC/B;YAGF,KAAK,iBAAiB;YACtB,KAAK,aAAa;YAElB,mGAAmG;YACnG,yGAAyG;YACzG,wFAAwF;YACxF,IAAI,CAAC,KAAK,mBAAmB,KAAK,IAAI,eAAe,OAAO;gBAC1D,KAAK,kBAAkB;gBACvB,KAAK;YACP;YAEA,qFAAqF;YACrF,8CAA8C;YAC9C,KAAK,iBAAiB,KAAK,IAAI,aAAa,GAAG,GAAG;YAElD,+DAA+D;YAC/D,0DAA0D;YAC1D,oDAAoD;YACpD,IAAI,SAAS,SAAS,CAAC;gBACrB,yDAAyD;gBACzD,6DAA6D;gBAC7D,0DAA0D;gBAC1D,4DAA4D;gBAC5D,8DAA8D;gBAC9D,uBAAuB;gBACvB,MAAO,KAAK,gBAAgB,SAAS,KAAK,cACxC,IAAI;oBACF,IAAI,YAAY,IAAI;oBAEpB,mEAAmE;oBACnE,sCAAsC;oBACtC,UAAU,YAAY;oBAEtB,kCAAkC;oBAClC,KAAK,mBAAmB;gBAC1B,EAAE,OAAO,GAAG;oBACV,KAAK,UAAU;oBACf;gBACF;gBAGF,yDAAyD;gBACzD,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,OAAO,QAAQ,IAClC,IAAI,CAAC,KAAK,MAAM,CAAC,EAAE,CAAC,WAAW;oBAC7B,4CAA4C;oBAC5C,IAAI,MAAM,KAAK,MAAM,CAAC,EAAE,CAAC;oBAEzB,sDAAsD;oBACtD,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;wBAC/B,IAAI,QAAQ,KAAK,MAAM,CAAC,EAAE,CAAC,WAAW,GAAG,CAAC,EAAE;wBAE5C,IAAI,SAAS,MAAM,SAAS,CAAC,MAAM,MAAM,WAAW;4BAClD,MAAM,MAAM,YAAY;4BACxB,MAAM,MAAM;wBACd;oBACF;gBACF;gBAGF,6CAA6C;gBAC7C,KAAK;gBAEL,0BAA0B;gBAC1B,IAAI,SAAS,KAAK,IAAI;gBACtB,OAAO,SAAS,KAAK;gBACrB,OAAO,QAAQ,KAAK,IAAI;gBAExB,yBAAyB;gBACzB,IAAI,OAAO,OAAO,UAAU,aAC1B,OAAO,OAAO;qBAEd,OAAO,MAAM;gBAGf,oHAAoH;gBACpH,IAAI,OAAO,KAAK,IAAI,WAAW,YAC7B,KAAK,IAAI;gBAGX,wEAAwE;gBACxE,OAAO,UAAU;oBACf,OAAO,WAAW;oBAElB,yEAAyE;oBACzE,KAAK,iBAAiB;oBAEtB,mCAAmC;oBACnC,SAAS,oBAAoB,cAAc,QAAQ;oBACnD,SAAS,oBAAoB,YAAY,QAAQ;oBACjD,SAAS,oBAAoB,SAAS,QAAQ;oBAC9C,SAAS,oBAAoB,WAAW,QAAQ;oBAEhD,oDAAoD;oBACpD,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,OAAO,QAAQ,IAClC,KAAK,MAAM,CAAC,EAAE,CAAC,MAAM;gBAEzB;YACF;YAEA,wDAAwD;YACxD,SAAS,iBAAiB,cAAc,QAAQ;YAChD,SAAS,iBAAiB,YAAY,QAAQ;YAC9C,SAAS,iBAAiB,SAAS,QAAQ;YAC3C,SAAS,iBAAiB,WAAW,QAAQ;YAE7C,OAAO;QACT;QAEA;;;;KAIC,GACD,mBAAmB;YACjB,IAAI,OAAO,IAAI,IAAI;YAEnB,sDAAsD;YACtD,IAAI,KAAK,gBAAgB,QACvB,OAAO,KAAK,gBAAgB;YAG9B,oDAAoD;YACpD,IAAI,WAAW,IAAI,QAAQ;YAC3B,IAAI,YAAY,OAAO,YAAY,eAAgB,CAAA,oBAAoB,WAAW,OAAO,SAAS,SAAS,UAAS,GAClH,SAAS,MAAM;gBACb,QAAQ,KAAK;YACf;YAGF,OAAO,IAAI;QACb;QAEA;;;KAGC,GACD,oBAAoB,SAAS,KAAK;YAChC,IAAI,OAAO,IAAI,IAAI;YAEnB,wEAAwE;YACxE,IAAI,MAAM,WACR,KAAK,gBAAgB,KAAK;YAG5B,OAAO;QACT;QAEA;;;;KAIC,GACD,cAAc;YACZ,IAAI,OAAO,IAAI;YAEf,IAAI,CAAC,KAAK,eAAe,CAAC,KAAK,OAAO,OAAO,KAAK,IAAI,YAAY,eAAe,CAAC,QAAO,eACvF;YAGF,mCAAmC;YACnC,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,OAAO,QAAQ,IAAK;gBACvC,IAAI,KAAK,MAAM,CAAC,EAAE,CAAC,WACjB,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,MAAM,CAAC,EAAE,CAAC,QAAQ,QAAQ,IAAK;oBAClD,IAAI,CAAC,KAAK,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,SAC7B,OAAO;gBAEX;YAEJ;YAEA,IAAI,KAAK,eACP,aAAa,KAAK;YAGpB,gEAAgE;YAChE,KAAK,gBAAgB,WAAW;gBAC9B,IAAI,CAAC,KAAK,aACR;gBAGF,KAAK,gBAAgB;gBACrB,KAAK,QAAQ;gBAEb,mEAAmE;gBACnE,IAAI,mBAAmB;oBACrB,KAAK,QAAQ;oBAEb,IAAI,KAAK,qBAAqB;wBAC5B,OAAO,KAAK;wBACZ,KAAK;oBACP;gBACF;gBAEA,wDAAwD;gBACxD,wDAAwD;gBACxD,KAAK,IAAI,UAAU,KAAK,kBAAkB;YAC5C,GAAG;YAEH,OAAO;QACT;QAEA;;;KAGC,GACD,aAAa;YACX,IAAI,OAAO,IAAI;YAEf,IAAI,CAAC,KAAK,OAAO,OAAO,KAAK,IAAI,WAAW,eAAe,CAAC,QAAO,eACjE;YAGF,IAAI,KAAK,UAAU,aAAa,KAAK,IAAI,UAAU,iBAAiB,KAAK,eAAe;gBACtF,aAAa,KAAK;gBAClB,KAAK,gBAAgB;YACvB,OAAO,IAAI,KAAK,UAAU,eAAe,KAAK,UAAU,aAAa,KAAK,IAAI,UAAU,eAAe;gBACrG,KAAK,IAAI,SAAS,KAAK;oBACrB,KAAK,QAAQ;oBAEb,gDAAgD;oBAChD,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,OAAO,QAAQ,IAClC,KAAK,MAAM,CAAC,EAAE,CAAC,MAAM;gBAEzB;gBAEA,IAAI,KAAK,eAAe;oBACtB,aAAa,KAAK;oBAClB,KAAK,gBAAgB;gBACvB;YACF,OAAO,IAAI,KAAK,UAAU,cACxB,KAAK,sBAAsB;YAG7B,OAAO;QACT;IACF;IAEA,qCAAqC;IACrC,IAAI,UAAS,IAAI;IAEjB,mBAAmB,GACnB,2EAA2E,GAE3E;;;GAGC,GACD,IAAI,QAAO,SAAS,CAAC;QACnB,IAAI,OAAO,IAAI;QAEf,2CAA2C;QAC3C,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,WAAW,GAAG;YAChC,QAAQ,MAAM;YACd;QACF;QAEA,KAAK,KAAK;IACZ;IACA,MAAK,YAAY;QACf;;;;KAIC,GACD,MAAM,SAAS,CAAC;YACd,IAAI,OAAO,IAAI;YAEf,+DAA+D;YAC/D,IAAI,CAAC,QAAO,KACV;YAGF,yCAAyC;YACzC,KAAK,YAAY,EAAE,YAAY;YAC/B,KAAK,UAAU,AAAC,OAAO,EAAE,WAAW,WAAY,EAAE,SAAS;gBAAC,EAAE;aAAO;YACrE,KAAK,SAAS,EAAE,SAAS;YACzB,KAAK,SAAS,EAAE,QAAQ;YACxB,KAAK,QAAQ,EAAE,QAAQ;YACvB,KAAK,QAAQ,EAAE,QAAQ;YACvB,KAAK,WAAW,AAAC,OAAO,EAAE,YAAY,aAAa,EAAE,YAAY,aAAc,EAAE,UAAU;YAC3F,KAAK,QAAQ,EAAE,QAAQ;YACvB,KAAK,UAAU,EAAE,UAAU,CAAC;YAC5B,KAAK,OAAO,AAAC,OAAO,EAAE,QAAQ,WAAY,EAAE,MAAM;gBAAC,EAAE;aAAI;YACzD,KAAK,UAAU,EAAE,WAAW,YAAY,EAAE,SAAS;YACnD,KAAK,OAAO;gBACV,QAAQ,EAAE,OAAO,EAAE,IAAI,SAAS,EAAE,IAAI,SAAS;gBAC/C,SAAS,EAAE,OAAO,EAAE,IAAI,UAAU,EAAE,IAAI,UAAU;gBAClD,iBAAiB,EAAE,OAAO,EAAE,IAAI,kBAAkB,EAAE,IAAI,kBAAkB;YAC5E;YAEA,sCAAsC;YACtC,KAAK,YAAY;YACjB,KAAK,SAAS;YACd,KAAK,UAAU,EAAE;YACjB,KAAK,aAAa,CAAC;YACnB,KAAK,SAAS,EAAE;YAChB,KAAK,YAAY;YAEjB,yBAAyB;YACzB,KAAK,SAAS,EAAE,QAAQ;gBAAC;oBAAC,IAAI,EAAE;gBAAK;aAAE,GAAG,EAAE;YAC5C,KAAK,UAAU,EAAE,SAAS;gBAAC;oBAAC,IAAI,EAAE;gBAAM;aAAE,GAAG,EAAE;YAC/C,KAAK,UAAU,EAAE,SAAS;gBAAC;oBAAC,IAAI,EAAE;gBAAM;aAAE,GAAG,EAAE;YAC/C,KAAK,eAAe,EAAE,cAAc;gBAAC;oBAAC,IAAI,EAAE;gBAAW;aAAE,GAAG,EAAE;YAC9D,KAAK,eAAe,EAAE,cAAc;gBAAC;oBAAC,IAAI,EAAE;gBAAW;aAAE,GAAG,EAAE;YAC9D,KAAK,WAAW,EAAE,UAAU;gBAAC;oBAAC,IAAI,EAAE;gBAAO;aAAE,GAAG,EAAE;YAClD,KAAK,UAAU,EAAE,SAAS;gBAAC;oBAAC,IAAI,EAAE;gBAAM;aAAE,GAAG,EAAE;YAC/C,KAAK,UAAU,EAAE,SAAS;gBAAC;oBAAC,IAAI,EAAE;gBAAM;aAAE,GAAG,EAAE;YAC/C,KAAK,UAAU,EAAE,SAAS;gBAAC;oBAAC,IAAI,EAAE;gBAAM;aAAE,GAAG,EAAE;YAC/C,KAAK,YAAY,EAAE,WAAW;gBAAC;oBAAC,IAAI,EAAE;gBAAQ;aAAE,GAAG,EAAE;YACrD,KAAK,UAAU,EAAE,SAAS;gBAAC;oBAAC,IAAI,EAAE;gBAAM;aAAE,GAAG,EAAE;YAC/C,KAAK,UAAU,EAAE,SAAS;gBAAC;oBAAC,IAAI,EAAE;gBAAM;aAAE,GAAG,EAAE;YAC/C,KAAK,YAAY,EAAE,WAAW;gBAAC;oBAAC,IAAI,EAAE;gBAAQ;aAAE,GAAG,EAAE;YACrD,KAAK,YAAY,EAAE;YAEnB,4BAA4B;YAC5B,KAAK,YAAY,QAAO,iBAAiB,CAAC,KAAK;YAE/C,qCAAqC;YACrC,IAAI,OAAO,QAAO,QAAQ,eAAe,QAAO,OAAO,QAAO,YAC5D,QAAO;YAGT,0DAA0D;YAC1D,QAAO,OAAO,KAAK;YAEnB,iEAAiE;YACjE,IAAI,KAAK,WACP,KAAK,OAAO,KAAK;gBACf,OAAO;gBACP,QAAQ;oBACN,KAAK;gBACP;YACF;YAGF,mDAAmD;YACnD,IAAI,KAAK,YAAY,KAAK,aAAa,QACrC,KAAK;YAGP,OAAO;QACT;QAEA;;;KAGC,GACD,MAAM;YACJ,IAAI,OAAO,IAAI;YACf,IAAI,MAAM;YAEV,8CAA8C;YAC9C,IAAI,QAAO,SAAS;gBAClB,KAAK,MAAM,aAAa,MAAM;gBAC9B;YACF;YAEA,uCAAuC;YACvC,IAAI,OAAO,KAAK,SAAS,UACvB,KAAK,OAAO;gBAAC,KAAK;aAAK;YAGzB,sEAAsE;YACtE,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,KAAK,QAAQ,IAAK;gBACrC,IAAI,KAAK;gBAET,IAAI,KAAK,WAAW,KAAK,OAAO,CAAC,EAAE,EACjC,mDAAmD;gBACnD,MAAM,KAAK,OAAO,CAAC,EAAE;qBAChB;oBACL,oCAAoC;oBACpC,MAAM,KAAK,IAAI,CAAC,EAAE;oBAClB,IAAI,OAAO,QAAQ,UAAU;wBAC3B,KAAK,MAAM,aAAa,MAAM;wBAC9B;oBACF;oBAEA,8DAA8D;oBAC9D,MAAM,0BAA0B,KAAK;oBACrC,IAAI,CAAC,KACH,MAAM,aAAa,KAAK,IAAI,MAAM,KAAK,EAAE,CAAC,EAAE;oBAG9C,IAAI,KACF,MAAM,GAAG,CAAC,EAAE,CAAC;gBAEjB;gBAEA,2CAA2C;gBAC3C,IAAI,CAAC,KACH,QAAQ,KAAK;gBAGf,wCAAwC;gBACxC,IAAI,OAAO,QAAO,OAAO,MAAM;oBAC7B,MAAM,KAAK,IAAI,CAAC,EAAE;oBAClB;gBACF;YACF;YAEA,IAAI,CAAC,KAAK;gBACR,KAAK,MAAM,aAAa,MAAM;gBAC9B;YACF;YAEA,KAAK,OAAO;YACZ,KAAK,SAAS;YAEd,qDAAqD;YACrD,0DAA0D;YAC1D,IAAI,OAAO,SAAS,aAAa,YAAY,IAAI,MAAM,GAAG,OAAO,SAAS;gBACxE,KAAK,SAAS;gBACd,KAAK,YAAY;YACnB;YAEA,oDAAoD;YACpD,IAAI,OAAM;YAEV,+CAA+C;YAC/C,IAAI,KAAK,WACP,WAAW;YAGb,OAAO;QACT;QAEA;;;;;KAKC,GACD,MAAM,SAAS,MAAM,EAAE,QAAQ;YAC7B,IAAI,OAAO,IAAI;YACf,IAAI,KAAK;YAET,wDAAwD;YACxD,IAAI,OAAO,WAAW,UAAU;gBAC9B,KAAK;gBACL,SAAS;YACX,OAAO,IAAI,OAAO,WAAW,YAAY,KAAK,WAAW,YAAY,CAAC,KAAK,OAAO,CAAC,OAAO,EACxF,kDAAkD;YAClD,OAAO;iBACF,IAAI,OAAO,WAAW,aAAa;gBACxC,8DAA8D;gBAC9D,SAAS;gBAET,4DAA4D;gBAC5D,2DAA2D;gBAC3D,IAAI,CAAC,KAAK,WAAW;oBACnB,IAAI,MAAM;oBACV,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,QAAQ,QAAQ,IACnC,IAAI,KAAK,OAAO,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,OAAO,CAAC,EAAE,CAAC,QAAQ;wBACtD;wBACA,KAAK,KAAK,OAAO,CAAC,EAAE,CAAC;oBACvB;oBAGF,IAAI,QAAQ,GACV,SAAS;yBAET,KAAK;gBAET;YACF;YAEA,mDAAmD;YACnD,IAAI,QAAQ,KAAK,KAAK,WAAW,MAAM,KAAK;YAE5C,0CAA0C;YAC1C,IAAI,CAAC,OACH,OAAO;YAGT,gCAAgC;YAChC,IAAI,MAAM,CAAC,QACT,SAAS,MAAM,WAAW;YAG5B,wEAAwE;YACxE,2EAA2E;YAC3E,+BAA+B;YAC/B,IAAI,KAAK,WAAW,UAAU;gBAC5B,sCAAsC;gBACtC,MAAM,UAAU;gBAEhB,sFAAsF;gBACtF,MAAM,SAAS;gBAEf,mDAAmD;gBACnD,IAAI,UAAU,MAAM;gBACpB,KAAK,OAAO,KAAK;oBACf,OAAO;oBACP,QAAQ;wBACN,KAAK,KAAK;oBACZ;gBACF;gBAEA,OAAO;YACT;YAEA,sEAAsE;YACtE,IAAI,MAAM,CAAC,MAAM,SAAS;gBACxB,oEAAoE;gBACpE,IAAI,CAAC,UACH,KAAK,WAAW;gBAGlB,OAAO,MAAM;YACf;YAEA,sEAAsE;YACtE,IAAI,KAAK,WACP,QAAO;YAGT,6DAA6D;YAC7D,IAAI,OAAO,KAAK,IAAI,GAAG,MAAM,QAAQ,IAAI,MAAM,QAAQ,KAAK,OAAO,CAAC,OAAO,CAAC,EAAE,GAAG;YACjF,IAAI,WAAW,KAAK,IAAI,GAAG,AAAE,CAAA,KAAK,OAAO,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,OAAO,CAAC,OAAO,CAAC,EAAE,AAAD,IAAK,OAAQ;YAC1F,IAAI,UAAU,AAAC,WAAW,OAAQ,KAAK,IAAI,MAAM;YACjD,IAAI,QAAQ,KAAK,OAAO,CAAC,OAAO,CAAC,EAAE,GAAG;YACtC,IAAI,OAAO,AAAC,CAAA,KAAK,OAAO,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,OAAO,CAAC,OAAO,CAAC,EAAE,AAAD,IAAK;YACjE,MAAM,UAAU;YAEhB,gEAAgE;YAChE,6EAA6E;YAC7E,MAAM,SAAS;YAEf,sCAAsC;YACtC,IAAI,YAAY;gBACd,MAAM,UAAU;gBAChB,MAAM,QAAQ;gBACd,MAAM,SAAS;gBACf,MAAM,QAAQ;gBACd,MAAM,QAAQ,CAAC,CAAE,CAAA,MAAM,SAAS,KAAK,OAAO,CAAC,OAAO,CAAC,EAAE,AAAD;YACxD;YAEA,iDAAiD;YACjD,IAAI,QAAQ,MAAM;gBAChB,KAAK,OAAO;gBACZ;YACF;YAEA,6BAA6B;YAC7B,IAAI,OAAO,MAAM;YACjB,IAAI,KAAK,WAAW;gBAClB,yEAAyE;gBACzE,IAAI,eAAe;oBACjB,KAAK,YAAY;oBACjB;oBACA,KAAK,eAAe;oBAEpB,6BAA6B;oBAC7B,IAAI,MAAM,AAAC,MAAM,UAAU,KAAK,SAAU,IAAI,MAAM;oBACpD,KAAK,KAAK,eAAe,KAAK,QAAO,IAAI;oBACzC,MAAM,aAAa,QAAO,IAAI;oBAE9B,6CAA6C;oBAC7C,IAAI,OAAO,KAAK,aAAa,UAAU,aACrC,MAAM,QAAQ,KAAK,aAAa,YAAY,GAAG,MAAM,SAAS,KAAK,aAAa,YAAY,GAAG,MAAM;yBAErG,MAAM,QAAQ,KAAK,aAAa,MAAM,GAAG,MAAM,SAAS,KAAK,aAAa,MAAM,GAAG,MAAM;oBAG3F,wCAAwC;oBACxC,IAAI,YAAY,UACd,KAAK,UAAU,CAAC,MAAM,IAAI,GAAG,WAAW,KAAK,OAAO,KAAK,MAAM,QAAQ;oBAGzE,IAAI,CAAC,UACH,WAAW;wBACT,KAAK,MAAM,QAAQ,MAAM;wBACzB,KAAK;oBACP,GAAG;gBAEP;gBAEA,IAAI,QAAO,UAAU,aAAa,QAAO,IAAI,UAAU,eACrD;qBACK;oBACL,KAAK,YAAY;oBAEjB,uDAAuD;oBACvD,KAAK,KAAK,UAAU;oBAEpB,wBAAwB;oBACxB,KAAK,YAAY,MAAM;gBACzB;YACF,OAAO;gBACL,2EAA2E;gBAC3E,IAAI,YAAY;oBACd,KAAK,cAAc;oBACnB,KAAK,QAAQ,MAAM,UAAU,KAAK,UAAU,QAAO,UAAU,KAAK;oBAClE,KAAK,SAAS,MAAM,UAAU,QAAO;oBACrC,KAAK,eAAe,MAAM;oBAE1B,gFAAgF;oBAChF,IAAI;wBACF,IAAI,OAAO,KAAK;wBAEhB,sFAAsF;wBACtF,IAAI,QAAQ,OAAO,YAAY,eAAgB,CAAA,gBAAgB,WAAW,OAAO,KAAK,SAAS,UAAS,GAAI;4BAC1G,sGAAsG;4BACtG,KAAK,YAAY;4BAEjB,gCAAgC;4BAChC;4BAEA,iDAAiD;4BACjD,KACG,KAAK;gCACJ,KAAK,YAAY;gCACjB,KAAK,YAAY;gCACjB,IAAI,CAAC,UACH,KAAK,MAAM,QAAQ,MAAM;qCAEzB,KAAK;4BAET,GACC,MAAM;gCACL,KAAK,YAAY;gCACjB,KAAK,MAAM,aAAa,MAAM,KAAK;gCAGnC,qCAAqC;gCACrC,MAAM,SAAS;gCACf,MAAM,UAAU;4BAClB;wBACJ,OAAO,IAAI,CAAC,UAAU;4BACpB,KAAK,YAAY;4BACjB;4BACA,KAAK,MAAM,QAAQ,MAAM;wBAC3B;wBAEA,yEAAyE;wBACzE,KAAK,eAAe,MAAM;wBAE1B,8EAA8E;wBAC9E,IAAI,KAAK,QAAQ;4BACf,KAAK,MAAM,aAAa,MAAM,KAAK;4BAEnC;wBACF;wBAEA,gEAAgE;wBAChE,IAAI,WAAW,eAAe,MAAM,OAClC,KAAK,UAAU,CAAC,MAAM,IAAI,GAAG,WAAW,KAAK,OAAO,KAAK,MAAM,QAAQ;6BAClE;4BACL,KAAK,UAAU,CAAC,MAAM,IAAI,GAAG;gCAC3B,iCAAiC;gCACjC,KAAK,OAAO;gCAEZ,uBAAuB;gCACvB,KAAK,oBAAoB,SAAS,KAAK,UAAU,CAAC,MAAM,IAAI,EAAE;4BAChE;4BACA,KAAK,iBAAiB,SAAS,KAAK,UAAU,CAAC,MAAM,IAAI,EAAE;wBAC7D;oBACF,EAAE,OAAO,KAAK;wBACZ,KAAK,MAAM,aAAa,MAAM,KAAK;oBACrC;gBACF;gBAEA,uEAAuE;gBACvE,IAAI,KAAK,QAAQ,0FAA0F;oBACzG,KAAK,MAAM,KAAK;oBAChB,KAAK;gBACP;gBAEA,qEAAqE;gBACrE,IAAI,qBAAqB,AAAC,UAAU,OAAO,UAAY,CAAC,KAAK,cAAc,QAAO,WAAW;gBAC7F,IAAI,KAAK,cAAc,KAAK,oBAC1B;qBACK;oBACL,KAAK,YAAY;oBACjB,KAAK,SAAS;oBAEd,IAAI,WAAW;wBACb,KAAK,SAAS;wBAEd,kBAAkB;wBAClB;wBAEA,uBAAuB;wBACvB,KAAK,oBAAoB,QAAO,eAAe,UAAU;oBAC3D;oBACA,KAAK,iBAAiB,QAAO,eAAe,UAAU;oBAEtD,wBAAwB;oBACxB,KAAK,YAAY,MAAM;gBACzB;YACF;YAEA,OAAO,MAAM;QACf;QAEA;;;;KAIC,GACD,OAAO,SAAS,EAAE;YAChB,IAAI,OAAO,IAAI;YAEf,6GAA6G;YAC7G,IAAI,KAAK,WAAW,YAAY,KAAK,WAAW;gBAC9C,KAAK,OAAO,KAAK;oBACf,OAAO;oBACP,QAAQ;wBACN,KAAK,MAAM;oBACb;gBACF;gBAEA,OAAO;YACT;YAEA,iDAAiD;YACjD,IAAI,MAAM,KAAK,aAAa;YAE5B,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;gBAC/B,uBAAuB;gBACvB,KAAK,YAAY,GAAG,CAAC,EAAE;gBAEvB,iBAAiB;gBACjB,IAAI,QAAQ,KAAK,WAAW,GAAG,CAAC,EAAE;gBAElC,IAAI,SAAS,CAAC,MAAM,SAAS;oBAC3B,2BAA2B;oBAC3B,MAAM,QAAQ,KAAK,KAAK,GAAG,CAAC,EAAE;oBAC9B,MAAM,YAAY;oBAClB,MAAM,UAAU;oBAEhB,gCAAgC;oBAChC,KAAK,UAAU,GAAG,CAAC,EAAE;oBAErB,IAAI,MAAM,OAAO;wBACf,IAAI,KAAK,WAAW;4BAClB,wCAAwC;4BACxC,IAAI,CAAC,MAAM,MAAM,cACf;4BAGF,IAAI,OAAO,MAAM,MAAM,aAAa,SAAS,aAC3C,MAAM,MAAM,aAAa,QAAQ;iCAEjC,MAAM,MAAM,aAAa,KAAK;4BAGhC,8BAA8B;4BAC9B,KAAK,aAAa,MAAM;wBAC1B,OAAO,IAAI,CAAC,MAAM,MAAM,MAAM,aAAa,MAAM,MAAM,aAAa,UAClE,MAAM,MAAM;oBAEhB;gBACF;gBAEA,qEAAqE;gBACrE,IAAI,CAAC,SAAS,CAAC,EAAE,EACf,KAAK,MAAM,SAAS,QAAQ,MAAM,MAAM;YAE5C;YAEA,OAAO;QACT;QAEA;;;;;KAKC,GACD,MAAM,SAAS,EAAE,EAAE,QAAQ;YACzB,IAAI,OAAO,IAAI;YAEf,6EAA6E;YAC7E,IAAI,KAAK,WAAW,YAAY,KAAK,WAAW;gBAC9C,KAAK,OAAO,KAAK;oBACf,OAAO;oBACP,QAAQ;wBACN,KAAK,KAAK;oBACZ;gBACF;gBAEA,OAAO;YACT;YAEA,kDAAkD;YAClD,IAAI,MAAM,KAAK,aAAa;YAE5B,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;gBAC/B,uBAAuB;gBACvB,KAAK,YAAY,GAAG,CAAC,EAAE;gBAEvB,iBAAiB;gBACjB,IAAI,QAAQ,KAAK,WAAW,GAAG,CAAC,EAAE;gBAElC,IAAI,OAAO;oBACT,2BAA2B;oBAC3B,MAAM,QAAQ,MAAM,UAAU;oBAC9B,MAAM,YAAY;oBAClB,MAAM,UAAU;oBAChB,MAAM,SAAS;oBAEf,gCAAgC;oBAChC,KAAK,UAAU,GAAG,CAAC,EAAE;oBAErB,IAAI,MAAM,OAAO;wBACf,IAAI,KAAK,WACP,gEAAgE;wBAChE;4BAAA,IAAI,MAAM,MAAM,cAAc;gCAC5B,IAAI,OAAO,MAAM,MAAM,aAAa,SAAS,aAC3C,MAAM,MAAM,aAAa,QAAQ;qCAEjC,MAAM,MAAM,aAAa,KAAK;gCAGhC,8BAA8B;gCAC9B,KAAK,aAAa,MAAM;4BAC1B;wBAAA,OACK,IAAI,CAAC,MAAM,MAAM,MAAM,aAAa,MAAM,MAAM,aAAa,UAAU;4BAC5E,MAAM,MAAM,cAAc,MAAM,UAAU;4BAC1C,MAAM,MAAM;4BAEZ,qEAAqE;4BACrE,IAAI,MAAM,MAAM,aAAa,UAC3B,KAAK,YAAY,MAAM;wBAE3B;oBACF;oBAEA,IAAI,CAAC,UACH,KAAK,MAAM,QAAQ,MAAM;gBAE7B;YACF;YAEA,OAAO;QACT;QAEA;;;;;KAKC,GACD,MAAM,SAAS,KAAK,EAAE,EAAE;YACtB,IAAI,OAAO,IAAI;YAEf,6EAA6E;YAC7E,IAAI,KAAK,WAAW,YAAW,KAAK,WAAW;gBAC7C,KAAK,OAAO,KAAK;oBACf,OAAO;oBACP,QAAQ;wBACN,KAAK,KAAK,OAAO;oBACnB;gBACF;gBAEA,OAAO;YACT;YAEA,mEAAmE;YACnE,IAAI,OAAO,OAAO,aAAa;gBAC7B,IAAI,OAAO,UAAU,WACnB,KAAK,SAAS;qBAEd,OAAO,KAAK;YAEhB;YAEA,gDAAgD;YAChD,IAAI,MAAM,KAAK,aAAa;YAE5B,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;gBAC/B,iBAAiB;gBACjB,IAAI,QAAQ,KAAK,WAAW,GAAG,CAAC,EAAE;gBAElC,IAAI,OAAO;oBACT,MAAM,SAAS;oBAEf,0DAA0D;oBAC1D,IAAI,MAAM,WACR,KAAK,UAAU,MAAM;oBAGvB,IAAI,KAAK,aAAa,MAAM,OAC1B,MAAM,MAAM,KAAK,eAAe,QAAQ,IAAI,MAAM,SAAS,QAAO,IAAI;yBACjE,IAAI,MAAM,OACf,MAAM,MAAM,QAAQ,QAAO,SAAS,OAAO;oBAG7C,KAAK,MAAM,QAAQ,MAAM;gBAC3B;YACF;YAEA,OAAO;QACT;QAEA;;;;;;;KAOC,GACD,QAAQ;YACN,IAAI,OAAO,IAAI;YACf,IAAI,OAAO;YACX,IAAI,KAAK;YAET,2CAA2C;YAC3C,IAAI,KAAK,WAAW,GAClB,0CAA0C;YAC1C,OAAO,KAAK;iBACP,IAAI,KAAK,WAAW,KAAK,KAAK,WAAW,KAAK,OAAO,IAAI,CAAC,EAAE,KAAK,aAAa;gBACnF,uEAAuE;gBACvE,IAAI,MAAM,KAAK;gBACf,IAAI,QAAQ,IAAI,QAAQ,IAAI,CAAC,EAAE;gBAC/B,IAAI,SAAS,GACX,KAAK,SAAS,IAAI,CAAC,EAAE,EAAE;qBAEvB,MAAM,WAAW,IAAI,CAAC,EAAE;YAE5B,OAAO,IAAI,KAAK,UAAU,GAAG;gBAC3B,MAAM,WAAW,IAAI,CAAC,EAAE;gBACxB,KAAK,SAAS,IAAI,CAAC,EAAE,EAAE;YACzB;YAEA,kDAAkD;YAClD,IAAI;YACJ,IAAI,OAAO,QAAQ,eAAe,OAAO,KAAK,OAAO,GAAG;gBACtD,sFAAsF;gBACtF,IAAI,KAAK,WAAW,YAAW,KAAK,WAAW;oBAC7C,KAAK,OAAO,KAAK;wBACf,OAAO;wBACP,QAAQ;4BACN,KAAK,OAAO,MAAM,MAAM;wBAC1B;oBACF;oBAEA,OAAO;gBACT;gBAEA,wBAAwB;gBACxB,IAAI,OAAO,OAAO,aAChB,KAAK,UAAU;gBAGjB,6BAA6B;gBAC7B,KAAK,KAAK,aAAa;gBACvB,IAAK,IAAI,IAAE,GAAG,IAAE,GAAG,QAAQ,IAAK;oBAC9B,iBAAiB;oBACjB,QAAQ,KAAK,WAAW,EAAE,CAAC,EAAE;oBAE7B,IAAI,OAAO;wBACT,MAAM,UAAU;wBAEhB,gCAAgC;wBAChC,IAAI,CAAC,IAAI,CAAC,EAAE,EACV,KAAK,UAAU,EAAE,CAAC,EAAE;wBAGtB,IAAI,KAAK,aAAa,MAAM,SAAS,CAAC,MAAM,QAC1C,MAAM,MAAM,KAAK,eAAe,KAAK,QAAO,IAAI;6BAC3C,IAAI,MAAM,SAAS,CAAC,MAAM,QAC/B,MAAM,MAAM,SAAS,MAAM,QAAO;wBAGpC,KAAK,MAAM,UAAU,MAAM;oBAC7B;gBACF;YACF,OAAO;gBACL,QAAQ,KAAK,KAAK,WAAW,MAAM,KAAK,OAAO,CAAC,EAAE;gBAClD,OAAO,QAAQ,MAAM,UAAU;YACjC;YAEA,OAAO;QACT;QAEA;;;;;;;KAOC,GACD,MAAM,SAAS,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE;YAC9B,IAAI,OAAO,IAAI;YAEf,6EAA6E;YAC7E,IAAI,KAAK,WAAW,YAAY,KAAK,WAAW;gBAC9C,KAAK,OAAO,KAAK;oBACf,OAAO;oBACP,QAAQ;wBACN,KAAK,KAAK,MAAM,IAAI,KAAK;oBAC3B;gBACF;gBAEA,OAAO;YACT;YAEA,gDAAgD;YAChD,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,WAAW,QAAQ;YAC/C,KAAK,KAAK,IAAI,KAAK,IAAI,GAAG,WAAW,MAAM;YAC3C,MAAM,WAAW;YAEjB,wCAAwC;YACxC,KAAK,OAAO,MAAM;YAElB,wCAAwC;YACxC,IAAI,MAAM,KAAK,aAAa;YAC5B,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;gBAC/B,iBAAiB;gBACjB,IAAI,QAAQ,KAAK,WAAW,GAAG,CAAC,EAAE;gBAElC,kEAAkE;gBAClE,IAAI,OAAO;oBACT,sFAAsF;oBACtF,IAAI,CAAC,IACH,KAAK,UAAU,GAAG,CAAC,EAAE;oBAGvB,wEAAwE;oBACxE,IAAI,KAAK,aAAa,CAAC,MAAM,QAAQ;wBACnC,IAAI,cAAc,QAAO,IAAI;wBAC7B,IAAI,MAAM,cAAe,MAAM;wBAC/B,MAAM,UAAU;wBAChB,MAAM,MAAM,KAAK,eAAe,MAAM;wBACtC,MAAM,MAAM,KAAK,wBAAwB,IAAI;oBAC/C;oBAEA,KAAK,mBAAmB,OAAO,MAAM,IAAI,KAAK,GAAG,CAAC,EAAE,EAAE,OAAO,OAAO;gBACtE;YACF;YAEA,OAAO;QACT;QAEA;;;;;;;;KAQC,GACD,oBAAoB,SAAS,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO;YAC5D,IAAI,OAAO,IAAI;YACf,IAAI,MAAM;YACV,IAAI,OAAO,KAAK;YAChB,IAAI,QAAQ,KAAK,IAAI,OAAO;YAC5B,IAAI,UAAU,KAAK,IAAI,GAAG,AAAC,QAAQ,IAAK,MAAM,QAAQ;YACtD,IAAI,WAAW,KAAK;YAEpB,kCAAkC;YAClC,MAAM,UAAU;YAEhB,iDAAiD;YACjD,MAAM,YAAY,YAAY;gBAC5B,2DAA2D;gBAC3D,IAAI,OAAO,AAAC,CAAA,KAAK,QAAQ,QAAO,IAAK;gBACrC,WAAW,KAAK;gBAChB,OAAO,OAAO;gBAEd,oCAAoC;gBACpC,MAAM,KAAK,MAAM,MAAM,OAAO;gBAE9B,+CAA+C;gBAC/C,IAAI,OAAO,GACT,MAAM,KAAK,IAAI,IAAI;qBAEnB,MAAM,KAAK,IAAI,IAAI;gBAGrB,qBAAqB;gBACrB,IAAI,KAAK,WACP,MAAM,UAAU;qBAEhB,KAAK,OAAO,KAAK,MAAM,KAAK;gBAG9B,0BAA0B;gBAC1B,IAAI,SACF,KAAK,UAAU;gBAGjB,qDAAqD;gBACrD,IAAI,AAAC,KAAK,QAAQ,OAAO,MAAQ,KAAK,QAAQ,OAAO,IAAK;oBACxD,cAAc,MAAM;oBACpB,MAAM,YAAY;oBAClB,MAAM,UAAU;oBAChB,KAAK,OAAO,IAAI,MAAM;oBACtB,KAAK,MAAM,QAAQ,MAAM;gBAC3B;YACF,GAAG;QACL;QAEA;;;;;KAKC,GACD,WAAW,SAAS,EAAE;YACpB,IAAI,OAAO,IAAI;YACf,IAAI,QAAQ,KAAK,WAAW;YAE5B,IAAI,SAAS,MAAM,WAAW;gBAC5B,IAAI,KAAK,WACP,MAAM,MAAM,KAAK,sBAAsB,QAAO,IAAI;gBAGpD,cAAc,MAAM;gBACpB,MAAM,YAAY;gBAClB,KAAK,OAAO,MAAM,SAAS;gBAC3B,MAAM,UAAU;gBAChB,KAAK,MAAM,QAAQ;YACrB;YAEA,OAAO;QACT;QAEA;;;;;;;KAOC,GACD,MAAM;YACJ,IAAI,OAAO,IAAI;YACf,IAAI,OAAO;YACX,IAAI,MAAM,IAAI;YAEd,wCAAwC;YACxC,IAAI,KAAK,WAAW,GAClB,gCAAgC;YAChC,OAAO,KAAK;iBACP,IAAI,KAAK,WAAW;gBACzB,IAAI,OAAO,IAAI,CAAC,EAAE,KAAK,WAAW;oBAChC,OAAO,IAAI,CAAC,EAAE;oBACd,KAAK,QAAQ;gBACf,OAAO;oBACL,kCAAkC;oBAClC,QAAQ,KAAK,WAAW,SAAS,IAAI,CAAC,EAAE,EAAE;oBAC1C,OAAO,QAAQ,MAAM,QAAQ;gBAC/B;mBACK,IAAI,KAAK,WAAW,GAAG;gBAC5B,OAAO,IAAI,CAAC,EAAE;gBACd,KAAK,SAAS,IAAI,CAAC,EAAE,EAAE;YACzB;YAEA,iDAAiD;YACjD,IAAI,MAAM,KAAK,aAAa;YAC5B,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;gBAC/B,QAAQ,KAAK,WAAW,GAAG,CAAC,EAAE;gBAE9B,IAAI,OAAO;oBACT,MAAM,QAAQ;oBACd,IAAI,KAAK,aAAa,MAAM,SAAS,MAAM,MAAM,cAAc;wBAC7D,MAAM,MAAM,aAAa,OAAO;wBAChC,IAAI,MAAM;4BACR,MAAM,MAAM,aAAa,YAAY,MAAM,UAAU;4BACrD,MAAM,MAAM,aAAa,UAAU,MAAM;4BAEzC,0DAA0D;4BAC1D,IAAI,KAAK,QAAQ,GAAG,CAAC,EAAE,GAAG;gCACxB,KAAK,MAAM,GAAG,CAAC,EAAE,EAAE;gCACnB,KAAK,KAAK,GAAG,CAAC,EAAE,EAAE;4BACpB;wBACF;oBACF;gBACF;YACF;YAEA,OAAO;QACT;QAEA;;;;;;;KAOC,GACD,MAAM;YACJ,IAAI,OAAO,IAAI;YACf,IAAI,OAAO;YACX,IAAI,MAAM;YAEV,2CAA2C;YAC3C,IAAI,KAAK,WAAW,GAClB,4DAA4D;YAC5D,KAAK,KAAK,OAAO,CAAC,EAAE,CAAC;iBAChB,IAAI,KAAK,WAAW,GAAG;gBAC5B,2EAA2E;gBAC3E,IAAI,MAAM,KAAK;gBACf,IAAI,QAAQ,IAAI,QAAQ,IAAI,CAAC,EAAE;gBAC/B,IAAI,SAAS,GACX,KAAK,SAAS,IAAI,CAAC,EAAE,EAAE;qBAEvB,OAAO,WAAW,IAAI,CAAC,EAAE;YAE7B,OAAO,IAAI,KAAK,WAAW,GAAG;gBAC5B,OAAO,WAAW,IAAI,CAAC,EAAE;gBACzB,KAAK,SAAS,IAAI,CAAC,EAAE,EAAE;YACzB;YAEA,wDAAwD;YACxD,IAAI;YACJ,IAAI,OAAO,SAAS,UAAU;gBAC5B,6FAA6F;gBAC7F,IAAI,KAAK,WAAW,YAAY,KAAK,WAAW;oBAC9C,KAAK,OAAO,KAAK;wBACf,OAAO;wBACP,QAAQ;4BACN,KAAK,KAAK,MAAM,MAAM;wBACxB;oBACF;oBAEA,OAAO;gBACT;gBAEA,sBAAsB;gBACtB,IAAI,OAAO,OAAO,aAChB,KAAK,QAAQ;gBAGf,6BAA6B;gBAC7B,KAAK,KAAK,aAAa;gBACvB,IAAK,IAAI,IAAE,GAAG,IAAE,GAAG,QAAQ,IAAK;oBAC9B,iBAAiB;oBACjB,QAAQ,KAAK,WAAW,EAAE,CAAC,EAAE;oBAE7B,IAAI,OAAO;wBACT,2EAA2E;wBAC3E,+EAA+E;wBAC/E,IAAI,KAAK,QAAQ,EAAE,CAAC,EAAE,GAAG;4BACvB,MAAM,YAAY,KAAK,KAAK,EAAE,CAAC,EAAE;4BACjC,MAAM,aAAa,KAAK,YAAY,QAAO,IAAI,cAAc,MAAM;wBACrE;wBACA,MAAM,QAAQ;wBAEd,4BAA4B;wBAC5B,IAAI,KAAK,aAAa,MAAM,SAAS,MAAM,MAAM,cAC/C,MAAM,MAAM,aAAa,aAAa,eAAe,MAAM,QAAO,IAAI;6BACjE,IAAI,MAAM,OACf,MAAM,MAAM,eAAe;wBAG7B,oBAAoB;wBACpB,IAAI,OAAO,KAAK,KAAK,EAAE,CAAC,EAAE;wBAC1B,IAAI,WAAW,AAAE,CAAA,KAAK,OAAO,CAAC,MAAM,QAAQ,CAAC,EAAE,GAAG,KAAK,OAAO,CAAC,MAAM,QAAQ,CAAC,EAAE,AAAD,IAAK,OAAQ;wBAC5F,IAAI,UAAU,AAAC,WAAW,OAAQ,KAAK,IAAI,MAAM;wBAEjD,qDAAqD;wBACrD,IAAI,KAAK,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,SAAS;4BAC5C,KAAK,YAAY,EAAE,CAAC,EAAE;4BACtB,KAAK,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,WAAW,KAAK,OAAO,KAAK,MAAM,QAAQ;wBACrE;wBAEA,KAAK,MAAM,QAAQ,MAAM;oBAC3B;gBACF;YACF,OAAO;gBACL,QAAQ,KAAK,WAAW;gBACxB,OAAO,QAAQ,MAAM,QAAQ,KAAK;YACpC;YAEA,OAAO;QACT;QAEA;;;;;;;KAOC,GACD,MAAM;YACJ,IAAI,OAAO,IAAI;YACf,IAAI,OAAO;YACX,IAAI,MAAM;YAEV,2CAA2C;YAC3C,IAAI,KAAK,WAAW,GAClB,gEAAgE;YAChE;gBAAA,IAAI,KAAK,QAAQ,QACf,KAAK,KAAK,OAAO,CAAC,EAAE,CAAC;YACvB,OACK,IAAI,KAAK,WAAW,GAAG;gBAC5B,8EAA8E;gBAC9E,IAAI,MAAM,KAAK;gBACf,IAAI,QAAQ,IAAI,QAAQ,IAAI,CAAC,EAAE;gBAC/B,IAAI,SAAS,GACX,KAAK,SAAS,IAAI,CAAC,EAAE,EAAE;qBAClB,IAAI,KAAK,QAAQ,QAAQ;oBAC9B,KAAK,KAAK,OAAO,CAAC,EAAE,CAAC;oBACrB,OAAO,WAAW,IAAI,CAAC,EAAE;gBAC3B;YACF,OAAO,IAAI,KAAK,WAAW,GAAG;gBAC5B,OAAO,WAAW,IAAI,CAAC,EAAE;gBACzB,KAAK,SAAS,IAAI,CAAC,EAAE,EAAE;YACzB;YAEA,+BAA+B;YAC/B,IAAI,OAAO,OAAO,aAChB,OAAO;YAGT,6EAA6E;YAC7E,IAAI,OAAO,SAAS,YAAa,CAAA,KAAK,WAAW,YAAY,KAAK,SAAQ,GAAI;gBAC5E,KAAK,OAAO,KAAK;oBACf,OAAO;oBACP,QAAQ;wBACN,KAAK,KAAK,MAAM,MAAM;oBACxB;gBACF;gBAEA,OAAO;YACT;YAEA,iBAAiB;YACjB,IAAI,QAAQ,KAAK,WAAW;YAE5B,IAAI;gBACF,IAAI,OAAO,SAAS,YAAY,QAAQ,GAAG;oBACzC,+DAA+D;oBAC/D,IAAI,UAAU,KAAK,QAAQ;oBAC3B,IAAI,SACF,KAAK,MAAM,IAAI;oBAGjB,mDAAmD;oBACnD,MAAM,QAAQ;oBACd,MAAM,SAAS;oBACf,KAAK,YAAY;oBAEjB,4CAA4C;oBAC5C,IAAI,CAAC,KAAK,aAAa,MAAM,SAAS,CAAC,MAAM,MAAM,MAAM,WACvD,MAAM,MAAM,cAAc;oBAG5B,4BAA4B;oBAC5B,IAAI,cAAc;wBAChB,iDAAiD;wBACjD,IAAI,SACF,KAAK,KAAK,IAAI;wBAGhB,KAAK,MAAM,QAAQ;oBACrB;oBAEA,oEAAoE;oBACpE,IAAI,WAAW,CAAC,KAAK,WAAW;wBAC9B,IAAI,WAAW;4BACb,IAAI,CAAC,KAAK,WACR;iCAEA,WAAW,UAAU;wBAEzB;wBACA,WAAW,UAAU;oBACvB,OACE;gBAEJ,OAAO;oBACL,IAAI,KAAK,WAAW;wBAClB,IAAI,WAAW,KAAK,QAAQ,MAAM,QAAO,IAAI,cAAc,MAAM,aAAa;wBAC9E,IAAI,WAAW,MAAM,YAAY,MAAM,YAAY,MAAM,QAAQ;wBACjE,OAAO,MAAM,QAAS,CAAA,WAAW,WAAW,KAAK,IAAI,MAAM,MAAK;oBAClE,OACE,OAAO,MAAM,MAAM;gBAEvB;;YAGF,OAAO;QACT;QAEA;;;;KAIC,GACD,SAAS,SAAS,EAAE;YAClB,IAAI,OAAO,IAAI;YAEf,sCAAsC;YACtC,IAAI,OAAO,OAAO,UAAU;gBAC1B,IAAI,QAAQ,KAAK,WAAW;gBAC5B,OAAO,QAAQ,CAAC,MAAM,UAAU;YAClC;YAEA,mEAAmE;YACnE,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,QAAQ,QAAQ,IAAK;gBACxC,IAAI,CAAC,KAAK,OAAO,CAAC,EAAE,CAAC,SACnB,OAAO;YAEX;YAEA,OAAO;QACT;QAEA;;;;KAIC,GACD,UAAU,SAAS,EAAE;YACnB,IAAI,OAAO,IAAI;YACf,IAAI,WAAW,KAAK;YAEpB,gEAAgE;YAChE,IAAI,QAAQ,KAAK,WAAW;YAC5B,IAAI,OACF,WAAW,KAAK,OAAO,CAAC,MAAM,QAAQ,CAAC,EAAE,GAAG;YAG9C,OAAO;QACT;QAEA;;;KAGC,GACD,OAAO;YACL,OAAO,IAAI,CAAC;QACd;QAEA;;;KAGC,GACD,QAAQ;YACN,IAAI,OAAO,IAAI;YAEf,kCAAkC;YAClC,IAAI,SAAS,KAAK;YAClB,IAAK,IAAI,IAAE,GAAG,IAAE,OAAO,QAAQ,IAAK;gBAClC,6CAA6C;gBAC7C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SACb,KAAK,KAAK,MAAM,CAAC,EAAE,CAAC;gBAGtB,mCAAmC;gBACnC,IAAI,CAAC,KAAK,WAAW;oBACnB,6EAA6E;oBAC7E,KAAK,YAAY,MAAM,CAAC,EAAE,CAAC;oBAE3B,8BAA8B;oBAC9B,MAAM,CAAC,EAAE,CAAC,MAAM,oBAAoB,SAAS,MAAM,CAAC,EAAE,CAAC,UAAU;oBACjE,MAAM,CAAC,EAAE,CAAC,MAAM,oBAAoB,QAAO,eAAe,MAAM,CAAC,EAAE,CAAC,SAAS;oBAC7E,MAAM,CAAC,EAAE,CAAC,MAAM,oBAAoB,SAAS,MAAM,CAAC,EAAE,CAAC,QAAQ;oBAE/D,6CAA6C;oBAC7C,QAAO,mBAAmB,MAAM,CAAC,EAAE,CAAC;gBACtC;gBAEA,8BAA8B;gBAC9B,OAAO,MAAM,CAAC,EAAE,CAAC;gBAEjB,wCAAwC;gBACxC,KAAK,YAAY,MAAM,CAAC,EAAE,CAAC;YAC7B;YAEA,qDAAqD;YACrD,IAAI,QAAQ,QAAO,OAAO,QAAQ;YAClC,IAAI,SAAS,GACX,QAAO,OAAO,OAAO,OAAO;YAG9B,mEAAmE;YACnE,IAAI,WAAW;YACf,IAAK,IAAE,GAAG,IAAE,QAAO,OAAO,QAAQ,IAChC,IAAI,QAAO,MAAM,CAAC,EAAE,CAAC,SAAS,KAAK,QAAQ,KAAK,KAAK,QAAQ,QAAO,MAAM,CAAC,EAAE,CAAC,SAAS,GAAG;gBACxF,WAAW;gBACX;YACF;YAGF,IAAI,SAAS,UACX,OAAO,KAAK,CAAC,KAAK,KAAK;YAGzB,uBAAuB;YACvB,QAAO,UAAU;YAEjB,oBAAoB;YACpB,KAAK,SAAS;YACd,KAAK,UAAU,EAAE;YACjB,OAAO;YAEP,OAAO;QACT;QAEA;;;;;;;KAOC,GACD,IAAI,SAAS,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI;YAC9B,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,IAAI,CAAC,QAAQ,MAAM;YAEhC,IAAI,OAAO,OAAO,YAChB,OAAO,KAAK,OAAO;gBAAC,IAAI;gBAAI,IAAI;gBAAI,MAAM;YAAI,IAAI;gBAAC,IAAI;gBAAI,IAAI;YAAE;YAGnE,OAAO;QACT;QAEA;;;;;;KAMC,GACD,KAAK,SAAS,KAAK,EAAE,EAAE,EAAE,EAAE;YACzB,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,IAAI,CAAC,QAAQ,MAAM;YAChC,IAAI,IAAI;YAER,sCAAsC;YACtC,IAAI,OAAO,OAAO,UAAU;gBAC1B,KAAK;gBACL,KAAK;YACP;YAEA,IAAI,MAAM,IACR,2DAA2D;YAC3D,IAAK,IAAE,GAAG,IAAE,OAAO,QAAQ,IAAK;gBAC9B,IAAI,OAAQ,OAAO,MAAM,CAAC,EAAE,CAAC;gBAC7B,IAAI,OAAO,MAAM,CAAC,EAAE,CAAC,MAAM,QAAQ,CAAC,MAAM,MAAM;oBAC9C,OAAO,OAAO,GAAG;oBACjB;gBACF;YACF;iBACK,IAAI,OACT,qCAAqC;YACrC,IAAI,CAAC,QAAQ,MAAM,GAAG,EAAE;iBACnB;gBACL,sCAAsC;gBACtC,IAAI,OAAO,OAAO,KAAK;gBACvB,IAAK,IAAE,GAAG,IAAE,KAAK,QAAQ,IACvB,IAAI,AAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,WAAW,KAAM,MAAM,QAAQ,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAC/D,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE;YAGxB;YAEA,OAAO;QACT;QAEA;;;;;;KAMC,GACD,MAAM,SAAS,KAAK,EAAE,EAAE,EAAE,EAAE;YAC1B,IAAI,OAAO,IAAI;YAEf,4BAA4B;YAC5B,KAAK,GAAG,OAAO,IAAI,IAAI;YAEvB,OAAO;QACT;QAEA;;;;;;KAMC,GACD,OAAO,SAAS,KAAK,EAAE,EAAE,EAAE,GAAG;YAC5B,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,IAAI,CAAC,QAAQ,MAAM;YAEhC,mDAAmD;YACnD,IAAK,IAAI,IAAE,OAAO,SAAO,GAAG,KAAG,GAAG,IAChC,oDAAoD;YACpD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,MAAM,CAAC,EAAE,CAAC,OAAO,MAAM,UAAU,QAAQ;gBAC5D,WAAW,CAAA,SAAS,EAAE;oBACpB,GAAG,KAAK,IAAI,EAAE,IAAI;gBACpB,CAAA,EAAE,KAAK,MAAM,MAAM,CAAC,EAAE,CAAC,KAAK;gBAE5B,kDAAkD;gBAClD,IAAI,MAAM,CAAC,EAAE,CAAC,MACZ,KAAK,IAAI,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC;YAE5C;YAGF,wEAAwE;YACxE,KAAK,WAAW;YAEhB,OAAO;QACT;QAEA;;;;;KAKC,GACD,YAAY,SAAS,KAAK;YACxB,IAAI,OAAO,IAAI;YAEf,IAAI,KAAK,OAAO,SAAS,GAAG;gBAC1B,IAAI,OAAO,KAAK,MAAM,CAAC,EAAE;gBAEzB,mDAAmD;gBACnD,IAAI,KAAK,UAAU,OAAO;oBACxB,KAAK,OAAO;oBACZ,KAAK;gBACP;gBAEA,2CAA2C;gBAC3C,IAAI,CAAC,OACH,KAAK;YAET;YAEA,OAAO;QACT;QAEA;;;;KAIC,GACD,QAAQ,SAAS,KAAK;YACpB,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,MAAM;YAEnB,sEAAsE;YACtE,yEAAyE;YACzE,yDAAyD;YACzD,IAAI,CAAC,KAAK,aAAa,MAAM,SAAS,CAAC,MAAM,MAAM,UAAU,CAAC,MAAM,MAAM,SAAS,MAAM,MAAM,cAAc,MAAM,OAAO;gBACxH,WAAW,KAAK,OAAO,KAAK,MAAM,QAAQ;gBAC1C,OAAO;YACT;YAEA,0BAA0B;YAC1B,IAAI,OAAO,CAAC,CAAE,CAAA,MAAM,SAAS,KAAK,OAAO,CAAC,OAAO,CAAC,EAAE,AAAD;YAEnD,wBAAwB;YACxB,KAAK,MAAM,OAAO,MAAM;YAExB,6CAA6C;YAC7C,IAAI,CAAC,KAAK,aAAa,MACrB,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;YAGxC,6CAA6C;YAC7C,IAAI,KAAK,aAAa,MAAM;gBAC1B,KAAK,MAAM,QAAQ,MAAM;gBACzB,MAAM,QAAQ,MAAM,UAAU;gBAC9B,MAAM,YAAY;gBAClB,MAAM,aAAa,QAAO,IAAI;gBAE9B,IAAI,UAAU,AAAE,CAAA,MAAM,QAAQ,MAAM,MAAK,IAAK,OAAQ,KAAK,IAAI,MAAM;gBACrE,KAAK,UAAU,CAAC,MAAM,IAAI,GAAG,WAAW,KAAK,OAAO,KAAK,MAAM,QAAQ;YACzE;YAEA,2BAA2B;YAC3B,IAAI,KAAK,aAAa,CAAC,MAAM;gBAC3B,MAAM,UAAU;gBAChB,MAAM,SAAS;gBACf,MAAM,QAAQ,MAAM,UAAU;gBAC9B,MAAM,YAAY;gBAClB,KAAK,YAAY,MAAM;gBAEvB,8BAA8B;gBAC9B,KAAK,aAAa,MAAM;gBAExB,uEAAuE;gBACvE,QAAO;YACT;YAEA,sCAAsC;YACtC,IAAI,CAAC,KAAK,aAAa,CAAC,MACtB,KAAK,KAAK,MAAM,KAAK;YAGvB,OAAO;QACT;QAEA;;;;KAIC,GACD,aAAa,SAAS,EAAE;YACtB,IAAI,OAAO,IAAI;YAEf,IAAI,KAAK,UAAU,CAAC,GAAG,EAAE;gBACvB,kDAAkD;gBAClD,IAAI,OAAO,KAAK,UAAU,CAAC,GAAG,KAAK,YACjC,aAAa,KAAK,UAAU,CAAC,GAAG;qBAC3B;oBACL,IAAI,QAAQ,KAAK,WAAW;oBAC5B,IAAI,SAAS,MAAM,OACjB,MAAM,MAAM,oBAAoB,SAAS,KAAK,UAAU,CAAC,GAAG,EAAE;gBAElE;gBAEA,OAAO,KAAK,UAAU,CAAC,GAAG;YAC5B;YAEA,OAAO;QACT;QAEA;;;;KAIC,GACD,YAAY,SAAS,EAAE;YACrB,IAAI,OAAO,IAAI;YAEf,yDAAyD;YACzD,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,QAAQ,QAAQ,IAAK;gBACxC,IAAI,OAAO,KAAK,OAAO,CAAC,EAAE,CAAC,KACzB,OAAO,KAAK,OAAO,CAAC,EAAE;YAE1B;YAEA,OAAO;QACT;QAEA;;;KAGC,GACD,gBAAgB;YACd,IAAI,OAAO,IAAI;YAEf,KAAK;YAEL,2CAA2C;YAC3C,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,QAAQ,QAAQ,IAAK;gBACxC,IAAI,KAAK,OAAO,CAAC,EAAE,CAAC,QAClB,OAAO,KAAK,OAAO,CAAC,EAAE,CAAC;YAE3B;YAEA,mDAAmD;YACnD,OAAO,IAAI,OAAM;QACnB;QAEA;;KAEC,GACD,QAAQ;YACN,IAAI,OAAO,IAAI;YACf,IAAI,QAAQ,KAAK;YACjB,IAAI,MAAM;YACV,IAAI,IAAI;YAER,gEAAgE;YAChE,IAAI,KAAK,QAAQ,SAAS,OACxB;YAGF,uCAAuC;YACvC,IAAK,IAAE,GAAG,IAAE,KAAK,QAAQ,QAAQ,IAC/B,IAAI,KAAK,OAAO,CAAC,EAAE,CAAC,QAClB;YAIJ,yDAAyD;YACzD,IAAK,IAAE,KAAK,QAAQ,SAAS,GAAG,KAAG,GAAG,IAAK;gBACzC,IAAI,OAAO,OACT;gBAGF,IAAI,KAAK,OAAO,CAAC,EAAE,CAAC,QAAQ;oBAC1B,oDAAoD;oBACpD,IAAI,KAAK,aAAa,KAAK,OAAO,CAAC,EAAE,CAAC,OACpC,KAAK,OAAO,CAAC,EAAE,CAAC,MAAM,WAAW;oBAGnC,6CAA6C;oBAC7C,KAAK,QAAQ,OAAO,GAAG;oBACvB;gBACF;YACF;QACF;QAEA;;;;KAIC,GACD,cAAc,SAAS,EAAE;YACvB,IAAI,OAAO,IAAI;YAEf,IAAI,OAAO,OAAO,aAAa;gBAC7B,IAAI,MAAM,EAAE;gBACZ,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,QAAQ,QAAQ,IACnC,IAAI,KAAK,KAAK,OAAO,CAAC,EAAE,CAAC;gBAG3B,OAAO;YACT,OACE,OAAO;gBAAC;aAAG;QAEf;QAEA;;;;KAIC,GACD,gBAAgB,SAAS,KAAK;YAC5B,IAAI,OAAO,IAAI;YAEf,wCAAwC;YACxC,MAAM,MAAM,eAAe,QAAO,IAAI;YACtC,MAAM,MAAM,aAAa,SAAS,KAAK,CAAC,KAAK,KAAK;YAElD,+BAA+B;YAC/B,IAAI,MAAM,SACR,MAAM,MAAM,aAAa,QAAQ,MAAM;iBAEvC,MAAM,MAAM,aAAa,QAAQ,MAAM;YAGzC,mCAAmC;YACnC,MAAM,MAAM,aAAa,OAAO,MAAM;YACtC,IAAI,MAAM,OAAO;gBACf,MAAM,MAAM,aAAa,YAAY,MAAM,UAAU;gBACrD,MAAM,MAAM,aAAa,UAAU,MAAM,SAAS;YACpD;YACA,MAAM,MAAM,aAAa,aAAa,eAAe,MAAM,OAAO,QAAO,IAAI;YAE7E,OAAO;QACT;QAEA;;;;KAIC,GACD,cAAc,SAAS,IAAI;YACzB,IAAI,OAAO,IAAI;YACf,IAAI,QAAQ,QAAO,cAAc,QAAO,WAAW,OAAO,QAAQ,YAAY;YAE9E,IAAI,CAAC,KAAK,cACR,OAAO;YAGT,IAAI,QAAO,kBAAkB,KAAK,cAAc;gBAC9C,KAAK,aAAa,UAAU;gBAC5B,KAAK,aAAa,WAAW;gBAC7B,IAAI,OACF,IAAI;oBAAE,KAAK,aAAa,SAAS,QAAO;gBAAgB,EAAE,OAAM,GAAG,CAAC;YAExE;YACA,KAAK,eAAe;YAEpB,OAAO;QACT;QAEA;;;KAGC,GACD,aAAa,SAAS,IAAI;YACxB,IAAI,UAAU,kBAAkB,KAAK,QAAO,cAAc,QAAO,WAAW;YAC5E,IAAI,CAAC,SACH,KAAK,MAAM;QAEf;IACF;IAEA,0BAA0B,GAC1B,2EAA2E,GAE3E;;;GAGC,GACD,IAAI,SAAQ,SAAS,IAAI;QACvB,IAAI,CAAC,UAAU;QACf,IAAI,CAAC;IACP;IACA,OAAM,YAAY;QAChB;;;KAGC,GACD,MAAM;YACJ,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,KAAK;YAElB,gCAAgC;YAChC,KAAK,SAAS,OAAO;YACrB,KAAK,QAAQ,OAAO;YACpB,KAAK,UAAU,OAAO;YACtB,KAAK,QAAQ,OAAO;YACpB,KAAK,QAAQ;YACb,KAAK,UAAU;YACf,KAAK,SAAS;YACd,KAAK,UAAU;YAEf,uCAAuC;YACvC,KAAK,MAAM,EAAE,QAAO;YAEpB,mCAAmC;YACnC,OAAO,QAAQ,KAAK;YAEpB,uBAAuB;YACvB,KAAK;YAEL,OAAO;QACT;QAEA;;;KAGC,GACD,QAAQ;YACN,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,KAAK;YAClB,IAAI,SAAS,AAAC,QAAO,UAAU,KAAK,UAAU,KAAK,QAAQ,SAAU,IAAI,KAAK;YAE9E,IAAI,OAAO,WAAW;gBACpB,iFAAiF;gBACjF,KAAK,QAAQ,AAAC,OAAO,QAAO,IAAI,eAAe,cAAe,QAAO,IAAI,mBAAmB,QAAO,IAAI;gBACvG,KAAK,MAAM,KAAK,eAAe,QAAQ,QAAO,IAAI;gBAClD,KAAK,MAAM,SAAS;gBACpB,KAAK,MAAM,QAAQ,QAAO;YAC5B,OAAO,IAAI,CAAC,QAAO,SAAS;gBAC1B,8CAA8C;gBAC9C,KAAK,QAAQ,QAAO;gBAEpB,qFAAqF;gBACrF,KAAK,WAAW,KAAK,eAAe,KAAK;gBACzC,KAAK,MAAM,iBAAiB,SAAS,KAAK,UAAU;gBAEpD,uEAAuE;gBACvE,KAAK,UAAU,KAAK,cAAc,KAAK;gBACvC,KAAK,MAAM,iBAAiB,QAAO,eAAe,KAAK,SAAS;gBAEhE,2EAA2E;gBAC3E,6CAA6C;gBAC7C,KAAK,SAAS,KAAK,aAAa,KAAK;gBACrC,KAAK,MAAM,iBAAiB,SAAS,KAAK,QAAQ;gBAElD,4BAA4B;gBAC5B,KAAK,MAAM,MAAM,OAAO;gBACxB,KAAK,MAAM,UAAU,OAAO,aAAa,OAAO,SAAS,OAAO;gBAChE,KAAK,MAAM,SAAS,SAAS,QAAO;gBAEpC,4BAA4B;gBAC5B,KAAK,MAAM;YACb;YAEA,OAAO;QACT;QAEA;;;KAGC,GACD,OAAO;YACL,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,KAAK;YAElB,6CAA6C;YAC7C,KAAK,SAAS,OAAO;YACrB,KAAK,QAAQ,OAAO;YACpB,KAAK,UAAU,OAAO;YACtB,KAAK,QAAQ,OAAO;YACpB,KAAK,QAAQ;YACb,KAAK,YAAY;YACjB,KAAK,UAAU;YACf,KAAK,SAAS;YACd,KAAK,UAAU;YAEf,uEAAuE;YACvE,KAAK,MAAM,EAAE,QAAO;YAEpB,OAAO;QACT;QAEA;;KAEC,GACD,gBAAgB;YACd,IAAI,OAAO,IAAI;YAEf,8CAA8C;YAC9C,KAAK,QAAQ,MAAM,aAAa,KAAK,KAAK,KAAK,MAAM,QAAQ,KAAK,MAAM,MAAM,OAAO;YAErF,4BAA4B;YAC5B,KAAK,MAAM,oBAAoB,SAAS,KAAK,UAAU;QACzD;QAEA;;KAEC,GACD,eAAe;YACb,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,KAAK;YAElB,2EAA2E;YAC3E,OAAO,YAAY,KAAK,KAAK,KAAK,MAAM,WAAW,MAAM;YAEzD,qCAAqC;YACrC,IAAI,OAAO,KAAK,OAAO,SAAS,WAAW,GACzC,OAAO,UAAU;gBAAC,WAAW;oBAAC;oBAAG,OAAO,YAAY;iBAAK;YAAA;YAG3D,IAAI,OAAO,WAAW,UAAU;gBAC9B,OAAO,SAAS;gBAChB,OAAO,MAAM;gBACb,OAAO;YACT;YAEA,4BAA4B;YAC5B,KAAK,MAAM,oBAAoB,QAAO,eAAe,KAAK,SAAS;QACrE;QAEA;;KAEC,GACD,cAAc;YACZ,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,KAAK;YAElB,8DAA8D;YAC9D,IAAI,OAAO,cAAc,UAAU;gBACjC,+DAA+D;gBAC/D,2EAA2E;gBAC3E,OAAO,YAAY,KAAK,KAAK,KAAK,MAAM,WAAW,MAAM;gBAEzD,2DAA2D;gBAC3D,IAAI,OAAO,QAAQ,SAAS,CAAC,EAAE,KAAK,UAClC,OAAO,QAAQ,SAAS,CAAC,EAAE,GAAG,OAAO,YAAY;gBAGnD,gCAAgC;gBAChC,OAAO,OAAO;YAChB;YAEA,8DAA8D;YAC9D,KAAK,MAAM,oBAAoB,SAAS,KAAK,QAAQ;QACvD;IACF;IAEA,oBAAoB,GACpB,2EAA2E,GAE3E,IAAI,QAAQ,CAAC;IAEb;;;GAGC,GACD,IAAI,aAAa,SAAS,IAAI;QAC5B,IAAI,MAAM,KAAK;QAEf,kEAAkE;QAClE,IAAI,KAAK,CAAC,IAAI,EAAE;YACd,mCAAmC;YACnC,KAAK,YAAY,KAAK,CAAC,IAAI,CAAC;YAE5B,iCAAiC;YACjC,UAAU;YAEV;QACF;QAEA,IAAI,sBAAsB,KAAK,MAAM;YACnC,gFAAgF;YAChF,IAAI,OAAO,KAAK,IAAI,MAAM,IAAI,CAAC,EAAE;YACjC,IAAI,WAAW,IAAI,WAAW,KAAK;YACnC,IAAK,IAAI,IAAE,GAAG,IAAE,KAAK,QAAQ,EAAE,EAC7B,QAAQ,CAAC,EAAE,GAAG,KAAK,WAAW;YAGhC,gBAAgB,SAAS,QAAQ;QACnC,OAAO;YACL,gCAAgC;YAChC,IAAI,MAAM,IAAI;YACd,IAAI,KAAK,KAAK,KAAK,QAAQ,KAAK;YAChC,IAAI,kBAAkB,KAAK,KAAK;YAChC,IAAI,eAAe;YAEnB,2CAA2C;YAC3C,IAAI,KAAK,KAAK,SACZ,OAAO,KAAK,KAAK,KAAK,SAAS,QAAQ,SAAS,GAAG;gBACjD,IAAI,iBAAiB,KAAK,KAAK,KAAK,OAAO,CAAC,IAAI;YAClD;YAGF,IAAI,SAAS;gBACX,+CAA+C;gBAC/C,IAAI,OAAO,AAAC,CAAA,IAAI,SAAS,EAAC,CAAE,CAAC,EAAE;gBAC/B,IAAI,SAAS,OAAO,SAAS,OAAO,SAAS,KAAK;oBAChD,KAAK,MAAM,aAAa,MAAM,4CAA4C,IAAI,SAAS;oBACvF;gBACF;gBAEA,gBAAgB,IAAI,UAAU;YAChC;YACA,IAAI,UAAU;gBACZ,+CAA+C;gBAC/C,IAAI,KAAK,WAAW;oBAClB,KAAK,SAAS;oBACd,KAAK,YAAY;oBACjB,KAAK,UAAU,EAAE;oBACjB,OAAO,KAAK,CAAC,IAAI;oBACjB,KAAK;gBACP;YACF;YACA,YAAY;QACd;IACF;IAEA;;;GAGC,GACD,IAAI,cAAc,SAAS,GAAG;QAC5B,IAAI;YACF,IAAI;QACN,EAAE,OAAO,GAAG;YACV,IAAI;QACN;IACF;IAEA;;;;GAIC,GACD,IAAI,kBAAkB,SAAS,WAAW,EAAE,IAAI;QAC9C,wCAAwC;QACxC,IAAI,QAAQ;YACV,KAAK,MAAM,aAAa,MAAM;QAChC;QAEA,6BAA6B;QAC7B,IAAI,UAAU,SAAS,MAAM;YAC3B,IAAI,UAAU,KAAK,QAAQ,SAAS,GAAG;gBACrC,KAAK,CAAC,KAAK,KAAK,GAAG;gBACnB,UAAU,MAAM;YAClB,OACE;QAEJ;QAEA,0CAA0C;QAC1C,IAAI,OAAO,YAAY,eAAe,QAAO,IAAI,gBAAgB,WAAW,GAC1E,QAAO,IAAI,gBAAgB,aAAa,KAAK,SAAS,MAAM;aAE5D,QAAO,IAAI,gBAAgB,aAAa,SAAS;IAErD;IAEA;;;;GAIC,GACD,IAAI,YAAY,SAAS,IAAI,EAAE,MAAM;QACnC,oBAAoB;QACpB,IAAI,UAAU,CAAC,KAAK,WAClB,KAAK,YAAY,OAAO;QAG1B,qCAAqC;QACrC,IAAI,OAAO,KAAK,KAAK,SAAS,WAAW,GACvC,KAAK,UAAU;YAAC,WAAW;gBAAC;gBAAG,KAAK,YAAY;aAAK;QAAA;QAGvD,yBAAyB;QACzB,IAAI,KAAK,WAAW,UAAU;YAC5B,KAAK,SAAS;YACd,KAAK,MAAM;YACX,KAAK;QACP;IACF;IAEA;;GAEC,GACD,IAAI,oBAAoB;QACtB,yFAAyF;QACzF,IAAI,CAAC,QAAO,eACV;QAGF,wEAAwE;QACxE,IAAI;YACF,IAAI,OAAO,iBAAiB,aAC1B,QAAO,MAAM,IAAI;iBACZ,IAAI,OAAO,uBAAuB,aACvC,QAAO,MAAM,IAAI;iBAEjB,QAAO,gBAAgB;QAE3B,EAAE,OAAM,GAAG;YACT,QAAO,gBAAgB;QACzB;QAEA,4EAA4E;QAC5E,IAAI,CAAC,QAAO,KACV,QAAO,gBAAgB;QAGzB,iFAAiF;QACjF,qDAAqD;QACrD,IAAI,MAAO,iBAAiB,KAAK,QAAO,cAAc,QAAO,WAAW;QACxE,IAAI,aAAa,QAAO,cAAc,QAAO,WAAW,WAAW,MAAM;QACzE,IAAI,UAAU,aAAa,SAAS,UAAU,CAAC,EAAE,EAAE,MAAM;QACzD,IAAI,OAAO,WAAW,UAAU,GAAG;YACjC,IAAI,SAAS,SAAS,KAAK,QAAO,cAAc,QAAO,WAAW,UAAU;YAC5E,IAAI,QAAO,cAAc,CAAC,QACxB,QAAO,gBAAgB;QAE3B;QAEA,qGAAqG;QACrG,IAAI,QAAO,eAAe;YACxB,QAAO,aAAa,AAAC,OAAO,QAAO,IAAI,eAAe,cAAe,QAAO,IAAI,mBAAmB,QAAO,IAAI;YAC9G,QAAO,WAAW,KAAK,eAAe,QAAO,SAAS,IAAI,QAAO,SAAS,QAAO,IAAI;YACrF,QAAO,WAAW,QAAQ,QAAO,IAAI;QACvC;QAEA,8BAA8B;QAC9B,QAAO;IACT;IAEA,qFAAqF;IACrF,IAAI,OAAO,WAAW,cAAc,OAAO,KACzC,OAAO,EAAE,EAAE;QACT,OAAO;YACL,QAAQ;YACR,MAAM;QACR;IACF;IAKA,QAAQ,SAAS;IACjB,QAAQ,OAAO;IAGjB,+CAA+C;IAC/C,IAAI,OAAO,WAAW,aAAa;QACjC,OAAO,eAAe;QACtB,OAAO,SAAS;QAChB,OAAO,OAAO;QACd,OAAO,QAAQ;IACjB,OAAO,IAAI,OAAO,WAAW,aAAa;QACxC,OAAO,eAAe;QACtB,OAAO,SAAS;QAChB,OAAO,OAAO;QACd,OAAO,QAAQ;IACjB;AACF,CAAA;AAGA;;;;;;;;;;CAUC,GAEA,CAAA;IAEC;IAEA,4BAA4B;IAC5B,aAAa,UAAU,OAAO;QAAC;QAAG;QAAG;KAAE;IACvC,aAAa,UAAU,eAAe;QAAC;QAAG;QAAG;QAAI;QAAG;QAAG;KAAE;IAEzD,oBAAoB,GACpB,2EAA2E,GAE3E;;;;;GAKC,GACD,aAAa,UAAU,SAAS,SAAS,GAAG;QAC1C,IAAI,OAAO,IAAI;QAEf,0CAA0C;QAC1C,IAAI,CAAC,KAAK,OAAO,CAAC,KAAK,IAAI,UACzB,OAAO;QAGT,0DAA0D;QAC1D,IAAK,IAAI,IAAE,KAAK,OAAO,SAAO,GAAG,KAAG,GAAG,IACrC,KAAK,MAAM,CAAC,EAAE,CAAC,OAAO;QAGxB,OAAO;IACT;IAEA;;;;;;;GAOC,GACD,aAAa,UAAU,MAAM,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC;QAC3C,IAAI,OAAO,IAAI;QAEf,0CAA0C;QAC1C,IAAI,CAAC,KAAK,OAAO,CAAC,KAAK,IAAI,UACzB,OAAO;QAGT,2CAA2C;QAC3C,IAAI,AAAC,OAAO,MAAM,WAAY,KAAK,IAAI,CAAC,EAAE,GAAG;QAC7C,IAAI,AAAC,OAAO,MAAM,WAAY,KAAK,IAAI,CAAC,EAAE,GAAG;QAE7C,IAAI,OAAO,MAAM,UAAU;YACzB,KAAK,OAAO;gBAAC;gBAAG;gBAAG;aAAE;YAErB,IAAI,OAAO,KAAK,IAAI,SAAS,cAAc,aAAa;gBACtD,KAAK,IAAI,SAAS,UAAU,gBAAgB,KAAK,IAAI,CAAC,EAAE,EAAE,OAAO,IAAI,aAAa;gBAClF,KAAK,IAAI,SAAS,UAAU,gBAAgB,KAAK,IAAI,CAAC,EAAE,EAAE,OAAO,IAAI,aAAa;gBAClF,KAAK,IAAI,SAAS,UAAU,gBAAgB,KAAK,IAAI,CAAC,EAAE,EAAE,OAAO,IAAI,aAAa;YACpF,OACE,KAAK,IAAI,SAAS,YAAY,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE;QAE1E,OACE,OAAO,KAAK;QAGd,OAAO;IACT;IAEA;;;;;;;;;;;;;GAaC,GACD,aAAa,UAAU,cAAc,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;QAClE,IAAI,OAAO,IAAI;QAEf,0CAA0C;QAC1C,IAAI,CAAC,KAAK,OAAO,CAAC,KAAK,IAAI,UACzB,OAAO;QAGT,2CAA2C;QAC3C,IAAI,KAAK,KAAK;QACd,IAAI,AAAC,OAAO,MAAM,WAAY,EAAE,CAAC,EAAE,GAAG;QACtC,IAAI,AAAC,OAAO,MAAM,WAAY,EAAE,CAAC,EAAE,GAAG;QACtC,MAAM,AAAC,OAAO,QAAQ,WAAY,EAAE,CAAC,EAAE,GAAG;QAC1C,MAAM,AAAC,OAAO,QAAQ,WAAY,EAAE,CAAC,EAAE,GAAG;QAC1C,MAAM,AAAC,OAAO,QAAQ,WAAY,EAAE,CAAC,EAAE,GAAG;QAE1C,IAAI,OAAO,MAAM,UAAU;YACzB,KAAK,eAAe;gBAAC;gBAAG;gBAAG;gBAAG;gBAAK;gBAAK;aAAI;YAE5C,IAAI,OAAO,KAAK,IAAI,SAAS,aAAa,aAAa;gBACrD,KAAK,IAAI,SAAS,SAAS,gBAAgB,GAAG,OAAO,IAAI,aAAa;gBACtE,KAAK,IAAI,SAAS,SAAS,gBAAgB,GAAG,OAAO,IAAI,aAAa;gBACtE,KAAK,IAAI,SAAS,SAAS,gBAAgB,GAAG,OAAO,IAAI,aAAa;gBACtE,KAAK,IAAI,SAAS,IAAI,gBAAgB,KAAK,OAAO,IAAI,aAAa;gBACnE,KAAK,IAAI,SAAS,IAAI,gBAAgB,KAAK,OAAO,IAAI,aAAa;gBACnE,KAAK,IAAI,SAAS,IAAI,gBAAgB,KAAK,OAAO,IAAI,aAAa;YACrE,OACE,KAAK,IAAI,SAAS,eAAe,GAAG,GAAG,GAAG,KAAK,KAAK;QAExD,OACE,OAAO;QAGT,OAAO;IACT;IAEA,mBAAmB,GACnB,2EAA2E,GAE3E;;;;GAIC,GACD,KAAK,UAAU,OAAO,AAAC,SAAS,MAAM;QACpC,OAAO,SAAS,CAAC;YACf,IAAI,OAAO,IAAI;YAEf,yCAAyC;YACzC,KAAK,eAAe,EAAE,eAAe;gBAAC;gBAAG;gBAAG;aAAE;YAC9C,KAAK,UAAU,EAAE,UAAU;YAC3B,KAAK,OAAO,EAAE,OAAO;YACrB,KAAK,cAAc;gBACjB,gBAAgB,OAAO,EAAE,mBAAmB,cAAc,EAAE,iBAAiB;gBAC7E,gBAAgB,OAAO,EAAE,mBAAmB,cAAc,EAAE,iBAAiB;gBAC7E,eAAe,OAAO,EAAE,kBAAkB,cAAc,EAAE,gBAAgB;gBAC1E,eAAe,OAAO,EAAE,kBAAkB,cAAc,EAAE,gBAAgB;gBAC1E,aAAa,OAAO,EAAE,gBAAgB,cAAc,EAAE,cAAc;gBACpE,cAAc,OAAO,EAAE,iBAAiB,cAAc,EAAE,eAAe;gBACvE,aAAa,OAAO,EAAE,gBAAgB,cAAc,EAAE,cAAc;gBACpE,eAAe,OAAO,EAAE,kBAAkB,cAAc,EAAE,gBAAgB;YAC5E;YAEA,yBAAyB;YACzB,KAAK,YAAY,EAAE,WAAW;gBAAC;oBAAC,IAAI,EAAE;gBAAQ;aAAE,GAAG,EAAE;YACrD,KAAK,SAAS,EAAE,QAAQ;gBAAC;oBAAC,IAAI,EAAE;gBAAK;aAAE,GAAG,EAAE;YAC5C,KAAK,iBAAiB,EAAE,gBAAgB;gBAAC;oBAAC,IAAI,EAAE;gBAAa;aAAE,GAAG,EAAE;YAEpE,8DAA8D;YAC9D,OAAO,OAAO,KAAK,IAAI,EAAE;QAC3B;IACF,EAAG,KAAK,UAAU;IAElB;;;;;GAKC,GACD,KAAK,UAAU,SAAS,SAAS,GAAG,EAAE,EAAE;QACtC,IAAI,OAAO,IAAI;QAEf,0CAA0C;QAC1C,IAAI,CAAC,KAAK,WACR,OAAO;QAGT,0FAA0F;QAC1F,IAAI,KAAK,WAAW,UAAU;YAC5B,KAAK,OAAO,KAAK;gBACf,OAAO;gBACP,QAAQ;oBACN,KAAK,OAAO,KAAK;gBACnB;YACF;YAEA,OAAO;QACT;QAEA,qFAAqF;QACrF,IAAI,aAAa,AAAC,OAAO,OAAO,IAAI,uBAAuB,cAAe,YAAY;QAEtF,uDAAuD;QACvD,IAAI,OAAO,OAAO,aAAa;YAC7B,iEAAiE;YACjE,IAAI,OAAO,QAAQ,UAAU;gBAC3B,KAAK,UAAU;gBACf,KAAK,OAAO;oBAAC;oBAAK;oBAAG;iBAAE;YACzB,OACE,OAAO,KAAK;QAEhB;QAEA,0DAA0D;QAC1D,IAAI,MAAM,KAAK,aAAa;QAC5B,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;YAC/B,iBAAiB;YACjB,IAAI,QAAQ,KAAK,WAAW,GAAG,CAAC,EAAE;YAElC,IAAI,OAAO;gBACT,IAAI,OAAO,QAAQ,UAAU;oBAC3B,MAAM,UAAU;oBAChB,MAAM,OAAO;wBAAC;wBAAK;wBAAG;qBAAE;oBAExB,IAAI,MAAM,OAAO;wBACf,oEAAoE;wBACpE,MAAM,YAAY,eAAe;wBAEjC,gEAAgE;wBAChE,IAAI,CAAC,MAAM,WAAW,CAAC,MAAM,QAAQ,KACnC,YAAY,OAAO;wBAGrB,IAAI,eAAe;4BACjB,IAAI,OAAO,MAAM,QAAQ,cAAc,aAAa;gCAClD,MAAM,QAAQ,UAAU,eAAe,KAAK,OAAO,IAAI;gCACvD,MAAM,QAAQ,UAAU,eAAe,GAAG,OAAO,IAAI;gCACrD,MAAM,QAAQ,UAAU,eAAe,GAAG,OAAO,IAAI;4BACvD,OACE,MAAM,QAAQ,YAAY,KAAK,GAAG;+BAGpC,MAAM,QAAQ,IAAI,eAAe,KAAK,OAAO,IAAI;oBAErD;oBAEA,KAAK,MAAM,UAAU,MAAM;gBAC7B,OACE,OAAO,MAAM;YAEjB;QACF;QAEA,OAAO;IACT;IAEA;;;;;;;GAOC,GACD,KAAK,UAAU,MAAM,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;QACvC,IAAI,OAAO,IAAI;QAEf,0CAA0C;QAC1C,IAAI,CAAC,KAAK,WACR,OAAO;QAGT,wFAAwF;QACxF,IAAI,KAAK,WAAW,UAAU;YAC5B,KAAK,OAAO,KAAK;gBACf,OAAO;gBACP,QAAQ;oBACN,KAAK,IAAI,GAAG,GAAG,GAAG;gBACpB;YACF;YAEA,OAAO;QACT;QAEA,2CAA2C;QAC3C,IAAI,AAAC,OAAO,MAAM,WAAY,IAAI;QAClC,IAAI,AAAC,OAAO,MAAM,WAAY,OAAO;QAErC,yDAAyD;QACzD,IAAI,OAAO,OAAO,aAAa;YAC7B,mEAAmE;YACnE,IAAI,OAAO,MAAM,UACf,KAAK,OAAO;gBAAC;gBAAG;gBAAG;aAAE;iBAErB,OAAO,KAAK;QAEhB;QAEA,6DAA6D;QAC7D,IAAI,MAAM,KAAK,aAAa;QAC5B,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;YAC/B,iBAAiB;YACjB,IAAI,QAAQ,KAAK,WAAW,GAAG,CAAC,EAAE;YAElC,IAAI,OAAO;gBACT,IAAI,OAAO,MAAM,UAAU;oBACzB,MAAM,OAAO;wBAAC;wBAAG;wBAAG;qBAAE;oBAEtB,IAAI,MAAM,OAAO;wBACf,gEAAgE;wBAChE,IAAI,CAAC,MAAM,WAAW,MAAM,QAAQ,KAClC,YAAY,OAAO;wBAGrB,IAAI,OAAO,MAAM,QAAQ,cAAc,aAAa;4BAClD,MAAM,QAAQ,UAAU,eAAe,GAAG,OAAO,IAAI;4BACrD,MAAM,QAAQ,UAAU,eAAe,GAAG,OAAO,IAAI;4BACrD,MAAM,QAAQ,UAAU,eAAe,GAAG,OAAO,IAAI;wBACvD,OACE,MAAM,QAAQ,YAAY,GAAG,GAAG;oBAEpC;oBAEA,KAAK,MAAM,OAAO,MAAM;gBAC1B,OACE,OAAO,MAAM;YAEjB;QACF;QAEA,OAAO;IACT;IAEA;;;;;;;;;GASC,GACD,KAAK,UAAU,cAAc,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;QAC/C,IAAI,OAAO,IAAI;QAEf,0CAA0C;QAC1C,IAAI,CAAC,KAAK,WACR,OAAO;QAGT,2FAA2F;QAC3F,IAAI,KAAK,WAAW,UAAU;YAC5B,KAAK,OAAO,KAAK;gBACf,OAAO;gBACP,QAAQ;oBACN,KAAK,YAAY,GAAG,GAAG,GAAG;gBAC5B;YACF;YAEA,OAAO;QACT;QAEA,2CAA2C;QAC3C,IAAI,AAAC,OAAO,MAAM,WAAY,KAAK,YAAY,CAAC,EAAE,GAAG;QACrD,IAAI,AAAC,OAAO,MAAM,WAAY,KAAK,YAAY,CAAC,EAAE,GAAG;QAErD,4DAA4D;QAC5D,IAAI,OAAO,OAAO,aAAa;YAC7B,sEAAsE;YACtE,IAAI,OAAO,MAAM,UACf,KAAK,eAAe;gBAAC;gBAAG;gBAAG;aAAE;iBAE7B,OAAO,KAAK;QAEhB;QAEA,gEAAgE;QAChE,IAAI,MAAM,KAAK,aAAa;QAC5B,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;YAC/B,iBAAiB;YACjB,IAAI,QAAQ,KAAK,WAAW,GAAG,CAAC,EAAE;YAElC,IAAI,OAAO;gBACT,IAAI,OAAO,MAAM,UAAU;oBACzB,MAAM,eAAe;wBAAC;wBAAG;wBAAG;qBAAE;oBAE9B,IAAI,MAAM,OAAO;wBACf,gEAAgE;wBAChE,IAAI,CAAC,MAAM,SAAS;4BAClB,uDAAuD;4BACvD,IAAI,CAAC,MAAM,MACT,MAAM,OAAO,KAAK,QAAQ;gCAAC;gCAAG;gCAAG;6BAAK;4BAGxC,YAAY,OAAO;wBACrB;wBAEA,IAAI,OAAO,MAAM,QAAQ,iBAAiB,aAAa;4BACrD,MAAM,QAAQ,aAAa,eAAe,GAAG,OAAO,IAAI;4BACxD,MAAM,QAAQ,aAAa,eAAe,GAAG,OAAO,IAAI;4BACxD,MAAM,QAAQ,aAAa,eAAe,GAAG,OAAO,IAAI;wBAC1D,OACE,MAAM,QAAQ,eAAe,GAAG,GAAG;oBAEvC;oBAEA,KAAK,MAAM,eAAe,MAAM;gBAClC,OACE,OAAO,MAAM;YAEjB;QACF;QAEA,OAAO;IACT;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BC,GACD,KAAK,UAAU,aAAa;QAC1B,IAAI,OAAO,IAAI;QACf,IAAI,OAAO;QACX,IAAI,GAAG,IAAI;QAEX,0CAA0C;QAC1C,IAAI,CAAC,KAAK,WACR,OAAO;QAGT,2CAA2C;QAC3C,IAAI,KAAK,WAAW,GAClB,8CAA8C;QAC9C,OAAO,KAAK;aACP,IAAI,KAAK,WAAW;YACzB,IAAI,OAAO,IAAI,CAAC,EAAE,KAAK,UAAU;gBAC/B,IAAI,IAAI,CAAC,EAAE;gBAEX,0CAA0C;gBAC1C,IAAI,OAAO,OAAO,aAAa;oBAC7B,IAAI,CAAC,EAAE,YACL,EAAE,aAAa;wBACb,gBAAgB,EAAE;wBAClB,gBAAgB,EAAE;wBAClB,eAAe,EAAE;wBACjB,eAAe,EAAE;wBACjB,aAAa,EAAE;wBACf,aAAa,EAAE;wBACf,eAAe,EAAE;wBACjB,cAAc,EAAE;oBAClB;oBAGF,KAAK,cAAc;wBACjB,gBAAgB,OAAO,EAAE,WAAW,mBAAmB,cAAc,EAAE,WAAW,iBAAiB,KAAK;wBACxG,gBAAgB,OAAO,EAAE,WAAW,mBAAmB,cAAc,EAAE,WAAW,iBAAiB,KAAK;wBACxG,eAAe,OAAO,EAAE,WAAW,kBAAkB,cAAc,EAAE,WAAW,gBAAgB,KAAK;wBACrG,eAAe,OAAO,EAAE,WAAW,kBAAkB,cAAc,EAAE,WAAW,gBAAgB,KAAK;wBACrG,aAAa,OAAO,EAAE,WAAW,gBAAgB,cAAc,EAAE,WAAW,cAAc,KAAK;wBAC/F,aAAa,OAAO,EAAE,WAAW,gBAAgB,cAAc,EAAE,WAAW,cAAc,KAAK;wBAC/F,eAAe,OAAO,EAAE,WAAW,kBAAkB,cAAc,EAAE,WAAW,gBAAgB,KAAK;wBACrG,cAAc,OAAO,EAAE,WAAW,iBAAiB,cAAc,EAAE,WAAW,eAAe,KAAK;oBACpG;gBACF;YACF,OAAO;gBACL,+CAA+C;gBAC/C,QAAQ,KAAK,WAAW,SAAS,IAAI,CAAC,EAAE,EAAE;gBAC1C,OAAO,QAAQ,MAAM,cAAc,KAAK;YAC1C;eACK,IAAI,KAAK,WAAW,GAAG;YAC5B,IAAI,IAAI,CAAC,EAAE;YACX,KAAK,SAAS,IAAI,CAAC,EAAE,EAAE;QACzB;QAEA,6CAA6C;QAC7C,IAAI,MAAM,KAAK,aAAa;QAC5B,IAAK,IAAI,IAAE,GAAG,IAAE,IAAI,QAAQ,IAAK;YAC/B,QAAQ,KAAK,WAAW,GAAG,CAAC,EAAE;YAE9B,IAAI,OAAO;gBACT,uCAAuC;gBACvC,IAAI,KAAK,MAAM;gBACf,KAAK;oBACH,gBAAgB,OAAO,EAAE,mBAAmB,cAAc,EAAE,iBAAiB,GAAG;oBAChF,gBAAgB,OAAO,EAAE,mBAAmB,cAAc,EAAE,iBAAiB,GAAG;oBAChF,eAAe,OAAO,EAAE,kBAAkB,cAAc,EAAE,gBAAgB,GAAG;oBAC7E,eAAe,OAAO,EAAE,kBAAkB,cAAc,EAAE,gBAAgB,GAAG;oBAC7E,aAAa,OAAO,EAAE,gBAAgB,cAAc,EAAE,cAAc,GAAG;oBACvE,aAAa,OAAO,EAAE,gBAAgB,cAAc,EAAE,cAAc,GAAG;oBACvE,eAAe,OAAO,EAAE,kBAAkB,cAAc,EAAE,gBAAgB,GAAG;oBAC7E,cAAc,OAAO,EAAE,iBAAiB,cAAc,EAAE,eAAe,GAAG;gBAC5E;gBAEA,yDAAyD;gBACzD,IAAI,SAAS,MAAM;gBACnB,IAAI,CAAC,QAAQ;oBACX,uDAAuD;oBACvD,IAAI,CAAC,MAAM,MACT,MAAM,OAAO,KAAK,QAAQ;wBAAC;wBAAG;wBAAG;qBAAK;oBAGxC,4BAA4B;oBAC5B,YAAY,OAAO;oBACnB,SAAS,MAAM;gBACjB;gBAEA,kEAAkE;gBAClE,OAAO,iBAAiB,GAAG;gBAC3B,OAAO,iBAAiB,GAAG;gBAC3B,OAAO,gBAAgB,GAAG;gBAC1B,OAAO,gBAAgB,GAAG;gBAC1B,OAAO,cAAc,GAAG;gBACxB,OAAO,cAAc,GAAG;gBACxB,OAAO,gBAAgB,GAAG;gBAC1B,OAAO,eAAe,GAAG;YAC3B;QACF;QAEA,OAAO;IACT;IAEA,0BAA0B,GAC1B,2EAA2E,GAE3E;;;;GAIC,GACD,MAAM,UAAU,OAAO,AAAC,SAAS,MAAM;QACrC,OAAO;YACL,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,KAAK;YAElB,yCAAyC;YACzC,KAAK,eAAe,OAAO;YAC3B,KAAK,UAAU,OAAO;YACtB,KAAK,OAAO,OAAO;YACnB,KAAK,cAAc,OAAO;YAE1B,oEAAoE;YACpE,OAAO,KAAK,IAAI;YAEhB,oDAAoD;YACpD,IAAI,KAAK,SACP,OAAO,OAAO,KAAK;iBACd,IAAI,KAAK,MACd,OAAO,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK;QAE9D;IACF,EAAG,MAAM,UAAU;IAEnB;;;;GAIC,GACD,MAAM,UAAU,QAAQ,AAAC,SAAS,MAAM;QACtC,OAAO;YACL,IAAI,OAAO,IAAI;YACf,IAAI,SAAS,KAAK;YAElB,qDAAqD;YACrD,KAAK,eAAe,OAAO;YAC3B,KAAK,UAAU,OAAO;YACtB,KAAK,OAAO,OAAO;YACnB,KAAK,cAAc,OAAO;YAE1B,oDAAoD;YACpD,IAAI,KAAK,SACP,OAAO,OAAO,KAAK;iBACd,IAAI,KAAK,MACd,OAAO,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK;iBACrD,IAAI,KAAK,SAAS;gBACvB,yBAAyB;gBACzB,KAAK,QAAQ,WAAW;gBACxB,KAAK,UAAU;gBACf,OAAO,eAAe;YACxB;YAEA,mCAAmC;YACnC,OAAO,OAAO,KAAK,IAAI;QACzB;IACF,EAAG,MAAM,UAAU;IAEnB,oBAAoB,GACpB,2EAA2E,GAE3E;;;;GAIC,GACD,IAAI,cAAc,SAAS,KAAK,EAAE,IAAI;QACpC,OAAO,QAAQ;QAEf,8BAA8B;QAC9B,IAAI,SAAS,WAAW;YACtB,MAAM,UAAU,OAAO,IAAI;YAC3B,MAAM,QAAQ,iBAAiB,MAAM,YAAY;YACjD,MAAM,QAAQ,iBAAiB,MAAM,YAAY;YACjD,MAAM,QAAQ,gBAAgB,MAAM,YAAY;YAChD,MAAM,QAAQ,gBAAgB,MAAM,YAAY;YAChD,MAAM,QAAQ,cAAc,MAAM,YAAY;YAC9C,MAAM,QAAQ,cAAc,MAAM,YAAY;YAC9C,MAAM,QAAQ,gBAAgB,MAAM,YAAY;YAChD,MAAM,QAAQ,eAAe,MAAM,YAAY;YAE/C,IAAI,OAAO,MAAM,QAAQ,cAAc,aAAa;gBAClD,MAAM,QAAQ,UAAU,eAAe,MAAM,IAAI,CAAC,EAAE,EAAE,OAAO,IAAI;gBACjE,MAAM,QAAQ,UAAU,eAAe,MAAM,IAAI,CAAC,EAAE,EAAE,OAAO,IAAI;gBACjE,MAAM,QAAQ,UAAU,eAAe,MAAM,IAAI,CAAC,EAAE,EAAE,OAAO,IAAI;YACnE,OACE,MAAM,QAAQ,YAAY,MAAM,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,EAAE;YAGvE,IAAI,OAAO,MAAM,QAAQ,iBAAiB,aAAa;gBACrD,MAAM,QAAQ,aAAa,eAAe,MAAM,YAAY,CAAC,EAAE,EAAE,OAAO,IAAI;gBAC5E,MAAM,QAAQ,aAAa,eAAe,MAAM,YAAY,CAAC,EAAE,EAAE,OAAO,IAAI;gBAC5E,MAAM,QAAQ,aAAa,eAAe,MAAM,YAAY,CAAC,EAAE,EAAE,OAAO,IAAI;YAC9E,OACE,MAAM,QAAQ,eAAe,MAAM,YAAY,CAAC,EAAE,EAAE,MAAM,YAAY,CAAC,EAAE,EAAE,MAAM,YAAY,CAAC,EAAE;QAEpG,OAAO;YACL,MAAM,UAAU,OAAO,IAAI;YAC3B,MAAM,QAAQ,IAAI,eAAe,MAAM,SAAS,OAAO,IAAI;QAC7D;QAEA,MAAM,QAAQ,QAAQ,MAAM;QAE5B,0BAA0B;QAC1B,IAAI,CAAC,MAAM,SACT,MAAM,QAAQ,MAAM,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;IAEzD;AACF,CAAA","sources":["../../../../AppData/Roaming/nvm/v16.14.2/node_modules/parcel/node_modules/@parcel/runtime-browser-hmr/lib/runtime-17b4a74e1dc3f9b4.js","src/index.js","node_modules/@tonaljs/tonal/dist/index.es.js","node_modules/@tonaljs/abc-notation/dist/index.es.js","node_modules/@tonaljs/core/dist/index.es.js","../../../../AppData/Roaming/nvm/v16.14.2/node_modules/parcel/node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/@tonaljs/array/dist/index.es.js","node_modules/@tonaljs/chord/dist/index.es.js","node_modules/@tonaljs/chord-detect/dist/index.es.js","node_modules/@tonaljs/chord-type/dist/index.es.js","node_modules/@tonaljs/pcset/dist/index.es.js","node_modules/@tonaljs/collection/dist/index.es.js","node_modules/@tonaljs/scale-type/dist/index.es.js","node_modules/@tonaljs/duration-value/dist/index.es.js","node_modules/@tonaljs/interval/dist/index.es.js","node_modules/@tonaljs/key/dist/index.es.js","node_modules/@tonaljs/note/dist/index.es.js","node_modules/@tonaljs/midi/dist/index.es.js","node_modules/@tonaljs/roman-numeral/dist/index.es.js","node_modules/@tonaljs/mode/dist/index.es.js","node_modules/@tonaljs/progression/dist/index.es.js","node_modules/@tonaljs/range/dist/index.es.js","node_modules/@tonaljs/scale/dist/index.es.js","node_modules/@tonaljs/time-signature/dist/index.es.js","node_modules/@tonaljs/chord-dictionary/dist/index.es.js","node_modules/webmidi/dist/cjs/webmidi.cjs.min.js","node_modules/webmidi/node_modules/djipevents/src/djipevents.js","node_modules/webmidi/src/Enumerations.js","node_modules/webmidi/src/Note.js","node_modules/webmidi/src/Utilities.js","node_modules/webmidi/src/OutputChannel.js","node_modules/webmidi/src/Output.js","node_modules/webmidi/src/Forwarder.js","node_modules/webmidi/src/InputChannel.js","node_modules/webmidi/src/Message.js","node_modules/webmidi/src/Input.js","node_modules/webmidi/src/WebMidi.js","node_modules/process/browser.js","node_modules/howler/dist/howler.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"890e741a975ef6c8\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n\n  // Web extension context\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","import { transpose , note } from '@tonaljs/tonal';\r\nimport {chord} from '@tonaljs/chord';\r\nimport { entries } from '@tonaljs/chord-dictionary';\r\nimport { Howler, Howl } from 'howler';\r\nimport {WebMidi} from \"webmidi\";\r\n\r\nconst sound = new Howl({\r\n    src: ['assets/piano.webm','assets/piano.mp3'],\r\n    //piano\r\n    sprite:{\"21\":[89e3,14117.73242630386],\"22\":[105e3,14117.73242630386],\"23\":[121e3,14117.73242630386],\"24\":[137e3,14117.73242630386],\"25\":[153e3,14117.73242630386],\"26\":[169e3,14117.73242630386],\"27\":[185e3,14117.73242630386],\"28\":[201e3,14117.73242630386],\"29\":[217e3,14117.73242630386],\"30\":[233e3,14117.73242630386],\"31\":[249e3,14117.73242630386],\"32\":[265e3,14860.77097505671],\"33\":[281e3,14117.73242630386],\"34\":[297e3,14860.77097505671],\"35\":[313e3,14860.77097505671],\"36\":[329e3,14860.77097505671],\"37\":[345e3,14860.77097505671],\"38\":[361e3,14117.73242630386],\"39\":[377e3,14117.73242630386],\"40\":[393e3,14117.73242630386],\"41\":[409e3,12631.65532879816],\"42\":[423e3,12631.65532879816],\"43\":[437e3,11888.616780045368],\"44\":[45e4,11145.578231292518],\"45\":[463e3,14117.73242630386],\"46\":[479e3,14117.73242630386],\"47\":[495e3,14117.73242630386],\"48\":[511e3,11888.616780045368],\"49\":[524e3,11888.616780045368],\"50\":[537e3,12631.65532879816],\"51\":[551e3,11888.616780045368],\"52\":[564e3,11145.57823129246],\"53\":[577e3,13374.693877551068],\"54\":[592e3,13374.693877551068],\"55\":[607e3,12631.65532879816],\"56\":[621e3,13374.693877551068],\"57\":[636e3,12631.65532879816],\"58\":[65e4,12631.65532879816],\"59\":[664e3,8173.424036281176],\"60\":[674e3,8173.424036281176],\"61\":[684e3,7430.385487528383],\"62\":[693e3,11888.616780045368],\"63\":[706e3,11145.57823129246],\"64\":[719e3,11145.57823129246],\"65\":[732e3,12631.65532879816],\"66\":[746e3,11888.616780045368],\"67\":[759e3,11888.616780045368],\"68\":[772e3,11888.616780045368],\"69\":[785e3,11888.616780045368],\"70\":[798e3,11888.616780045368],\"71\":[811e3,10402.539682539667],\"72\":[823e3,9659.501133786875],\"73\":[834e3,9659.501133786875],\"74\":[845e3,7430.385487528383],\"75\":[854e3,7430.385487528383],\"76\":[863e3,7430.385487528383],\"77\":[872e3,10402.539682539667],\"78\":[884e3,10402.539682539667],\"79\":[896e3,10402.539682539667],\"80\":[908e3,13374.693877551068],\"81\":[923e3,13374.693877551068],\"82\":[938e3,13374.693877551068],\"83\":[953e3,13374.693877551068],\"84\":[968e3,13374.693877551068],\"85\":[983e3,13374.693877551068],\"86\":[998e3,14117.73242630386],\"87\":[1014e3,14117.732426303746],\"88\":[103e4,14117.732426303746],\"89\":[1046e3,9659.501133786762],\"90\":[1057e3,9659.501133786762],\"91\":[1068e3,9659.501133786762],\"92\":[1079e3,9659.501133786762],\"93\":[109e4,9659.501133786762],\"94\":[1101e3,9659.501133786762],\"95\":[1112e3,12631.65532879816],\"96\":[1126e3,12631.65532879816],\"97\":[114e4,12631.65532879816],\"98\":[1154e3,8173.424036281176],\"99\":[1164e3,8173.424036281176],\"100\":[0,8173.42403628118],\"101\":[1e4,8916.46258503401],\"102\":[2e4,8916.46258503401],\"103\":[3e4,8916.46258503401],\"104\":[4e4,9659.501133786847],\"105\":[51e3,9659.501133786847],\"106\":[62e3,9659.501133786847],\"107\":[73e3,6687.346938775505],\"108\":[81e3,6687.346938775505]},\r\n    //epiano\r\n    //sprite:{\"21\":[27e3,14860.770975056688],\"22\":[43e3,14860.770975056688],\"23\":[59e3,14860.770975056696],\"24\":[75e3,14860.770975056696],\"25\":[91e3,14860.770975056696],\"26\":[107e3,14860.770975056696],\"27\":[123e3,14860.770975056681],\"28\":[139e3,14860.770975056681],\"29\":[155e3,14860.770975056681],\"30\":[171e3,14860.770975056681],\"31\":[187e3,14860.770975056681],\"32\":[203e3,14860.770975056681],\"33\":[219e3,14860.770975056681],\"34\":[235e3,14860.770975056681],\"35\":[251e3,14860.77097505671],\"36\":[267e3,14860.77097505671],\"37\":[283e3,14117.73242630386],\"38\":[299e3,14860.77097505671],\"39\":[315e3,14860.77097505671],\"40\":[331e3,14860.77097505671],\"41\":[347e3,14860.77097505671],\"42\":[363e3,14117.73242630386],\"43\":[379e3,14117.73242630386],\"44\":[395e3,14117.73242630386],\"45\":[411e3,14117.73242630386],\"46\":[427e3,14117.73242630386],\"47\":[443e3,14117.73242630386],\"48\":[459e3,14117.73242630386],\"49\":[475e3,14117.73242630386],\"50\":[491e3,14117.73242630386],\"51\":[507e3,14117.73242630386],\"52\":[523e3,14117.73242630386],\"53\":[539e3,12631.65532879816],\"54\":[553e3,14117.73242630386],\"55\":[569e3,14117.73242630386],\"56\":[585e3,14117.73242630386],\"57\":[601e3,14117.73242630386],\"58\":[617e3,14117.73242630386],\"59\":[633e3,12631.65532879816],\"60\":[647e3,11145.57823129246],\"61\":[66e4,11145.57823129246],\"62\":[673e3,11145.57823129246],\"63\":[686e3,8916.462585033969],\"64\":[696e3,8173.424036281176],\"65\":[706e3,9659.501133786875],\"66\":[717e3,10402.539682539667],\"67\":[729e3,11145.57823129246],\"68\":[742e3,10402.539682539667],\"69\":[754e3,10402.539682539667],\"70\":[766e3,11145.57823129246],\"71\":[779e3,10402.539682539667],\"72\":[791e3,9659.501133786875],\"73\":[802e3,8916.462585033969],\"74\":[812e3,8916.462585033969],\"75\":[822e3,8173.424036281176],\"76\":[832e3,8173.424036281176],\"77\":[842e3,8173.424036281176],\"78\":[852e3,7430.385487528383],\"79\":[861e3,6687.346938775477],\"80\":[869e3,6687.346938775477],\"81\":[877e3,6687.346938775477],\"82\":[885e3,6687.346938775477],\"83\":[893e3,5944.308390022684],\"84\":[9e5,5944.308390022684],\"85\":[907e3,5201.269841269891],\"86\":[914e3,5201.269841269891],\"87\":[921e3,4458.2312925169845],\"88\":[927e3,4458.2312925169845],\"89\":[933e3,3715.1927437641916],\"90\":[938e3,3715.1927437641916],\"91\":[943e3,2972.154195011285],\"92\":[947e3,2972.154195011285],\"93\":[951e3,2972.154195011285],\"94\":[955e3,2972.154195011285],\"95\":[959e3,2229.1156462584922],\"96\":[963e3,2229.1156462584922],\"97\":[967e3,2229.1156462584922],\"98\":[971e3,2229.1156462584922],\"99\":[975e3,2229.1156462584922],\"100\":[0,1486.077097505669],\"101\":[3e3,1486.0770975056691],\"102\":[6e3,1486.0770975056691],\"103\":[9e3,1486.0770975056691],\"104\":[12e3,1486.0770975056691],\"105\":[15e3,1486.0770975056673],\"106\":[18e3,1486.0770975056673],\"107\":[21e3,1486.0770975056673],\"108\":[24e3,1486.0770975056673]},\r\n    onload() {\r\n        console.log('Sound file has been loaded. Do something here!');\r\n        soundEngine.init();\r\n    },\r\n    onloaderror(e, msg) {\r\n        console.log('Error', e, msg);\r\n    }\r\n});\r\n\r\nconst startNotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']; \r\nconst chordQualities = ['M', 'maj7', 'maj9', 'm', 'm7', 'm9', 'dim', 'dim7', 'aug', 'A', 'A#', 'B']; \r\n\r\n//const startNoteSelector = document.querySelector('#start-note');\r\nconst octaveSelector = document.querySelector('#octave');\r\nconst buttons = document.querySelector('.buttons');\r\nconst roots = document.querySelector('.roots');\r\nconst intervalsInChord = document.querySelector('.intervals-in-chord');\r\nconst notesInChord = document.querySelector('.notes-in-chord');\r\nconst chordName = document.querySelector('.chord-name');\r\nvar mySynth;\r\nvar myKeyboard;\r\n\r\nlet selectedStartNote = 'C';\r\nlet selectedOctave = '2';\r\nlet selectedChord=\"M\";\r\n\r\nconst app = {\r\n    init() {\r\n        WebMidi.enable()\r\n        .then(() => this.onEnabled())\r\n        .catch(err => console.log(err));\r\n       // this.setupStartNotes();\r\n        this.setupOctaves();\r\n        this.setupButtons();\r\n        this.setupRoots();\r\n        this.setupEventListeners();\r\n    },\r\n    // setupStartNotes() {\r\n    //     startNotes.forEach(noteName => {\r\n    //         let noteNameOption = this.createElement('option', noteName);\r\n    //         startNoteSelector.appendChild(noteNameOption);\r\n    //     });\r\n    // },\r\n    onEnabled() {\r\n        \r\n        if (WebMidi.inputs.length < 1) {\r\n          document.body.innerHTML+= \"No device detected.\";\r\n        } else {\r\n            console.log(\"Inputs:\");\r\n            WebMidi.inputs.forEach((device, index) => {\r\n                //document.body.innerHTML+= `${index}: ${device.name} <br>`;\r\n                console.log(index+\":\"+device.name)\r\n              });\r\n              console.log(\"Outputs:\");\r\n              WebMidi.outputs.forEach((device, index) => {\r\n                //document.body.innerHTML+= `${index}: ${device.name} <br>`;\r\n                console.log(index+\":\"+device.name)\r\n              });\r\n        }\r\n\r\n        myKeyboard = WebMidi.inputs[1];\r\n        mySynth = WebMidi.outputs[0];\r\n        // const mySynth = WebMidi.getInputByName(\"TYPE NAME HERE!\")\r\n\r\n        myKeyboard.channels[1].addListener(\"noteon\", e => {\r\n         // document.body.innerHTML+= `${e.note.name} <br>`;\r\n          console.log(e.note.number);\r\n          sound.volume(0.75);\r\n          sound.play(e.note.number.toString());\r\n        });\r\n\r\n      },\r\n    setupOctaves() {\r\n        for (let i = 1; i <= 4; i++) {\r\n            let octaveNumber = this.createElement('option', i);\r\n            octaveSelector.appendChild(octaveNumber);\r\n        }\r\n    },\r\n    setupRoots() {\r\n        startNotes.forEach(root => {\r\n            let rootButton = this.createElement('button', root);\r\n            roots.appendChild(rootButton);\r\n            if(root==selectedStartNote)\r\n                rootButton.style.backgroundColor = \"MediumSpringGreen\";\r\n        });\r\n        \r\n    },\r\n    setupButtons() {\r\n        const chordNames = entries().map(entry => {\r\n            return entry.aliases[0];\r\n        }); \r\n        chordNames.forEach(chordName => {\r\n            let chordButton = this.createElement('button', chordName);\r\n            buttons.appendChild(chordButton);\r\n            if(chordName==selectedChord)\r\n                chordButton.style.backgroundColor = \"Tomato\";\r\n        });\r\n        \r\n    },\r\n    setupEventListeners() {\r\n        // startNoteSelector.addEventListener('change', () => {\r\n        //     selectedStartNote = startNoteSelector.value;\r\n        // });\r\n        octaveSelector.addEventListener('change', () => {\r\n            selectedOctave = octaveSelector.value;\r\n        });\r\n        roots.addEventListener('click', (event) => {\r\n            if (event.target.classList.contains('roots')) {\r\n                //alert(\"no existe!\");\r\n                return;\r\n            }\r\n            this.resetRootButtons();\r\n            event.target.style.backgroundColor = \"MediumSpringGreen\";\r\n            selectedStartNote = event.target.innerText;\r\n            this.displayAndPlayChord(selectedChord);\r\n        });\r\n        buttons.addEventListener('click', (event) => {\r\n            if (event.target.classList.contains('buttons')) {\r\n                return;\r\n            }\r\n            this.resetButtons();\r\n            event.target.style.backgroundColor = \"Tomato\";\r\n            console.log(event.target);\r\n            selectedChord = event.target.innerText;\r\n            console.log(selectedChord);\r\n        });\r\n\r\n        addEventListener(\"keydown\", (event) => { \r\n           \r\n            switch (event.key) {\r\n                case \"1\":\r\n                   this.changeRootButton(startNotes[0]);\r\n                  break; \r\n                case \"2\":\r\n                    this.changeRootButton(startNotes[1]);\r\n                  break;\r\n                case \"3\":\r\n                    this.changeRootButton(startNotes[2]);\r\n                  break;\r\n                case \"4\":\r\n                    this.changeRootButton(startNotes[3]);\r\n                  break;\r\n                case \"5\":\r\n                    this.changeRootButton(startNotes[4]);\r\n                  break;\r\n                case \"6\":\r\n                    this.changeRootButton(startNotes[5]);\r\n                  break;\r\n                  case \"7\":\r\n                    this.changeRootButton(startNotes[6]);\r\n                    break;\r\n                    case \"8\":\r\n                        this.changeRootButton(startNotes[7]);\r\n                        break;\r\n                      case \"9\":\r\n                        this.changeRootButton(startNotes[8]);\r\n                        break;\r\n                      case \"0\":\r\n                        this.changeRootButton(startNotes[9]);\r\n                        break;\r\n                      case \"-\":\r\n                        this.changeRootButton(startNotes[10]);\r\n                        break;\r\n                        case \"+\":\r\n                            this.changeRootButton(startNotes[11]);\r\n                            break;\r\n                            case \"=\":\r\n                                this.changeRootButton(startNotes[11]);\r\n                                break;\r\n                            case \"m\":\r\n                        this.changeChordButton(\"M\");\r\n                        break;\r\n                        case \"j\":\r\n                        this.changeChordButton(\"maj7\");\r\n                        break;\r\n                        case \"u\":\r\n                        this.changeChordButton(\"6\");\r\n                        break;\r\n                        case \"i\":\r\n                        this.changeChordButton(\"7\");\r\n                        break;\r\n                        case \"n\":\r\n                        this.changeChordButton(\"m\");\r\n                        break;\r\n                        case \"h\":\r\n                        this.changeChordButton(\"m7\");\r\n                        break;\r\n                        case \"y\":\r\n                        this.changeChordButton(\"m6\");\r\n                        break;\r\n                        case \"b\":\r\n                        this.changeChordButton(\"dim\");\r\n                        break;\r\n                        case \"g\":\r\n                        this.changeChordButton(\"dim7\");\r\n                        break;\r\n                        case \"v\":\r\n                            this.changeChordButton(\"aug\");\r\n                            break;\r\n                           \r\n                     \r\n                default:\r\n                  return; \r\n              }\r\n        });\r\n    },\r\n    resetRootButtons() {\r\n        const rootscollection = document.getElementsByClassName(\"roots\")[0].querySelectorAll(\"button\"); ;\r\n        rootscollection.forEach(rootsbutton => {\r\n            rootsbutton.style.backgroundColor = \"MediumSlateBlue\";\r\n        });\r\n    },\r\n    resetButtons() {\r\n        const buttonscollection = document.getElementsByClassName(\"buttons\")[0].querySelectorAll(\"button\"); ;\r\n        buttonscollection.forEach(chordbutton => {\r\n            chordbutton.style.backgroundColor = \"Orange\";\r\n        });\r\n    },\r\n    changeRootButton(val) {\r\n        this.resetRootButtons();\r\n        selectedStartNote = val;\r\n        const rootscollection = document.getElementsByClassName(\"roots\")[0].querySelectorAll(\"button\"); ;\r\n        rootscollection.forEach(rootsbutton => {\r\n            if(rootsbutton.innerText==val)\r\n            rootsbutton.style.backgroundColor = \"MediumSpringGreen\";\r\n        });\r\n        this.displayAndPlayChord(selectedChord);\r\n    },\r\n    changeChordButton(val) {\r\n        this.resetButtons();\r\n\r\n       this.resetButtons();\r\n       const rootscollection = document.getElementsByClassName(\"buttons\")[0].querySelectorAll(\"button\");\r\n       rootscollection.forEach(rootsbutton => {\r\n           if(rootsbutton.innerText==val)\r\n           rootsbutton.style.backgroundColor = \"Tomato\";\r\n       });\r\n        selectedChord = val;\r\n        console.log(selectedChord);\r\n    },\r\n    displayAndPlayChord(selectedChord) {\r\n        let chordIntervals = chord(selectedChord).intervals;\r\n        intervalsInChord.innerText = chordIntervals.join(' - ');\r\n        \r\n        const startNoteWithOctave = selectedStartNote + selectedOctave;\r\n        let chordNotes = chordIntervals.map(val => {\r\n            return transpose(startNoteWithOctave, val);\r\n        });\r\n\r\n        notesInChord.innerText = chordNotes.join(' - ');\r\n        chordName.innerText =  chord(selectedStartNote + selectedOctave+selectedChord).name;\r\n       \r\n        soundEngine.play(chordNotes);\r\n    },\r\n    createElement(elementName, content) {\r\n        let element = document.createElement(elementName);\r\n        element.innerHTML = content;\r\n        return element;\r\n    }\r\n}\r\n\r\nconst soundEngine = {\r\n    init() {\r\n        // const lengthOfNote = 2400;\r\n        // let timeIndex = 0;\r\n        // for (let i = 24; i <= 96; i++) {\r\n        //     sound['_sprite'][i] = [timeIndex, lengthOfNote];\r\n        //     timeIndex += lengthOfNote;\r\n        // }\r\n        \r\n    },\r\n    play(soundSequence) {\r\n\r\n        const chordMidiNumbers = soundSequence.map(noteName => {\r\n            return note(noteName).midi;\r\n        });\r\n        sound.volume(0.75);\r\n        chordMidiNumbers.forEach(noteMidiNumber => { \r\n            \r\n            sound.play(noteMidiNumber.toString());\r\n            mySynth.playNote(noteMidiNumber, {duration: 10});\r\n        });\r\n    }\r\n}\r\n\r\napp.init();\r\n",null,null,null,"exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/**\n * The `EventEmitter` class provides methods to implement the _observable_ design pattern. This\n * pattern allows one to _register_ a function to execute when a specific event is _emitted_ by the\n * emitter.\n *\n * It is intended to be an abstract class meant to be extended by (or mixed into) other objects.\n */\nexport class EventEmitter {\n\n  /**\n   * Creates a new `EventEmitter`object.\n   *\n   * @param {boolean} [eventsSuspended=false] Whether the `EventEmitter` is initially in a suspended\n   * state (i.e. not executing callbacks).\n   */\n  constructor(eventsSuspended = false) {\n\n    /**\n     * An object containing a property for each event with at least one registered listener. Each\n     * event property contains an array of all the [`Listener`]{@link Listener} objects registered\n     * for the event.\n     *\n     * @type {Object}\n     * @readonly\n     */\n    this.eventMap = {};\n\n    /**\n     * Whether or not the execution of callbacks is currently suspended for this emitter.\n     *\n     * @type {boolean}\n     */\n    this.eventsSuspended = eventsSuspended == true ? true : false;\n\n  }\n\n  /**\n   * The callback function is executed when the associated event is triggered via [`emit()`](#emit).\n   * The [`emit()`](#emit) method relays all additional arguments it received to the callback\n   * functions. Since [`emit()`](#emit) can be passed a variable number of arguments, it is up to\n   * the developer to make sure the arguments match those of the associated callback. In addition,\n   * the callback also separately receives all the arguments present in the listener's\n   * [`arguments`](Listener#arguments) property. This makes it easy to pass data from where the\n   * listener is added to where the listener is executed.\n   *\n   * @callback EventEmitter~callback\n   * @param {...*} [args] A variable number of arguments matching the ones (if any) that were passed\n   * to the [`emit()`](#emit) method (except, the first one) followed by the arguments found in the\n   * listener's [`arguments`](Listener#arguments) array.\n   */\n\n  /**\n   * Adds a listener for the specified event. It returns the [`Listener`]{@link Listener} object\n   * that was created and attached to the event.\n   *\n   * To attach a global listener that will be triggered for any events, use\n   * [`EventEmitter.ANY_EVENT`]{@link #ANY_EVENT} as the first parameter. Note that a global\n   * listener will also be triggered by non-registered events.\n   *\n   * @param {string|Symbol} event The event to listen to.\n   * @param {EventEmitter~callback} callback The callback function to execute when the event occurs.\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus executed first.\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   * @param {number} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n   * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {TypeError} The `callback` parameter must be a function.\n   */\n  addListener(event, callback, options = {}) {\n\n    if (\n      (typeof event === \"string\" && event.length < 1) ||\n      (event instanceof String && event.length < 1) ||\n      (typeof event !== \"string\" && !(event instanceof String) && event !== EventEmitter.ANY_EVENT)\n    ) {\n      throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n    }\n\n    if (typeof callback !== \"function\") throw new TypeError(\"The callback must be a function.\");\n\n    const listener = new Listener(event, this, callback, options);\n\n    if (!this.eventMap[event]) this.eventMap[event] = [];\n\n    if (options.prepend) {\n      this.eventMap[event].unshift(listener);\n    } else {\n      this.eventMap[event].push(listener);\n    }\n\n    return listener;\n\n  }\n\n  /**\n   * Adds a one-time listener for the specified event. The listener will be executed once and then\n   * destroyed. It returns the [`Listener`]{@link Listener} object that was created and attached\n   * to the event.\n   *\n   * To attach a global listener that will be triggered for any events, use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter. Note that a\n   * global listener will also be triggered by non-registered events.\n   *\n   * @param {string|Symbol} event The event to listen to\n   * @param {EventEmitter~callback} callback The callback function to execute when the event occurs\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=this] The context to invoke the callback function in.\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus executed first.\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n   * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {TypeError} The `callback` parameter must be a function.\n   */\n  addOneTimeListener(event, callback, options = {}) {\n    options.remaining = 1;\n    this.addListener(event, callback, options);\n  }\n\n  /**\n   * Identifier to use when adding or removing a listener that should be triggered when any events\n   * occur.\n   *\n   * @type {Symbol}\n   */\n  static get ANY_EVENT() {\n    return Symbol.for(\"Any event\");\n  }\n\n  /**\n   * Returns `true` if the specified event has at least one registered listener. If no event is\n   * specified, the method returns `true` if any event has at least one listener registered (this\n   * includes global listeners registered to\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n   *\n   * Note: to specifically check for global listeners added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}, use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} [event=(any event)] The event to check\n   * @param {function|Listener} [callback=(any callback)] The actual function that was added to the\n   * event or the {@link Listener} object returned by `addListener()`.\n   * @returns {boolean}\n   */\n  hasListener(event, callback) {\n\n    if (event === undefined) {\n\n      // Check for ANY_EVENT\n      if (\n        this.eventMap[EventEmitter.ANY_EVENT] && this.eventMap[EventEmitter.ANY_EVENT].length > 0\n      ) {\n        return true;\n      }\n\n      // Check for any regular events\n      return Object.entries(this.eventMap).some(([, value]) => {\n        return value.length > 0;\n      });\n\n    } else {\n\n      if (this.eventMap[event] && this.eventMap[event].length > 0) {\n\n        if (callback instanceof Listener) {\n          let result = this.eventMap[event].filter(listener => listener === callback);\n          return result.length > 0;\n        } else if (typeof callback === \"function\") {\n          let result = this.eventMap[event].filter(listener => listener.callback === callback);\n          return result.length > 0;\n        } else if (callback != undefined) {\n          return false;\n        }\n\n        return true;\n\n      } else {\n        return false;\n      }\n\n\n    }\n\n  }\n\n  /**\n   * An array of all the unique event names for which the emitter has at least one registered\n   * listener.\n   *\n   * Note: this excludes global events registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n   * specific event.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get eventNames() {\n    return Object.keys(this.eventMap);\n  }\n\n  /**\n   * Returns an array of all the [`Listener`]{@link Listener} objects that have been registered for\n   * a specific event.\n   *\n   * Please note that global events (those added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) are not returned for \"regular\"\n   * events. To get the list of global listeners, specifically use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} event The event to get listeners for.\n   * @returns {Listener[]} An array of [`Listener`]{@link Listener} objects.\n   */\n  getListeners(event) {\n    return this.eventMap[event] || [];\n  }\n\n  /**\n   * Suspends execution of all callbacks functions registered for the specified event type.\n   *\n   * You can suspend execution of callbacks registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `suspendEvent()`. Beware that this\n   * will not suspend all callbacks but only those registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem counter-intuitive\n   * at first glance, it allows the selective suspension of global listeners while leaving other\n   * listeners alone. If you truly want to suspends all callbacks for a specific\n   * [`EventEmitter`]{@link EventEmitter}, simply set its `eventsSuspended` property to `true`.\n   *\n   * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to suspend\n   * execution of all callback functions.\n   */\n  suspendEvent(event) {\n    this.getListeners(event).forEach(listener => {\n      listener.suspended = true;\n    });\n  }\n\n  /**\n   * Resumes execution of all suspended callback functions registered for the specified event type.\n   *\n   * You can resume execution of callbacks registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `unsuspendEvent()`. Beware that\n   * this will not resume all callbacks but only those registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem\n   * counter-intuitive, it allows the selective unsuspension of global listeners while leaving other\n   * callbacks alone.\n   *\n   * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to resume\n   * execution of all callback functions.\n   */\n  unsuspendEvent(event) {\n    this.getListeners(event).forEach(listener => {\n      listener.suspended = false;\n    });\n  }\n\n  /**\n   * Returns the number of listeners registered for a specific event.\n   *\n   * Please note that global events (those added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) do not count towards the remaining\n   * number for a \"regular\" event. To get the number of global listeners, specifically use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} event The event which is usually a string but can also be the special\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} symbol.\n   * @returns {number} An integer representing the number of listeners registered for the specified\n   * event.\n   */\n  getListenerCount(event) {\n    return this.getListeners(event).length;\n  }\n\n  /**\n   * Executes the callback function of all the [`Listener`]{@link Listener} objects registered for\n   * a given event. The callback functions are passed the additional arguments passed to `emit()`\n   * (if any) followed by the arguments present in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object (if any).\n   *\n   * If the [`eventsSuspended`]{@link #eventsSuspended} property is `true` or the\n   * [`Listener.suspended`]{@link Listener#suspended} property is `true`, the callback functions\n   * will not be executed.\n   *\n   * This function returns an array containing the return values of each of the callbacks.\n   *\n   * It should be noted that the regular listeners are triggered first followed by the global\n   * listeners (those added with [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n   *\n   * @param {string} event The event\n   * @param {...*} args Arbitrary number of arguments to pass along to the callback functions\n   *\n   * @returns {Array} An array containing the return value of each of the executed listener\n   * functions.\n   *\n   * @throws {TypeError} The `event` parameter must be a string.\n   */\n  emit(event, ...args) {\n\n    if (typeof event !== \"string\" && !(event instanceof String)) {\n      throw new TypeError(\"The 'event' parameter must be a string.\");\n    }\n\n    if (this.eventsSuspended) return;\n\n    // We collect return values from all listeners here\n    let results = [];\n\n    // We must make sure that we do not have undefined otherwise concat() will add an undefined\n    // entry in the array.\n    let listeners = this.eventMap[EventEmitter.ANY_EVENT] || [];\n    if (this.eventMap[event]) listeners = listeners.concat(this.eventMap[event]);\n\n    listeners.forEach(listener => {\n\n      // This is the per-listener suspension check\n      if (listener.suspended) return;\n\n      let params = [...args];\n      if (Array.isArray(listener.arguments)) params = params.concat(listener.arguments);\n\n      if (listener.remaining > 0) {\n        results.push(listener.callback.apply(listener.context, params));\n        listener.count++;\n      }\n\n      if (--listener.remaining < 1) listener.remove();\n\n    });\n\n    return results;\n\n  }\n\n  /**\n   * Removes all the listeners that were added to the object upon which the method is called and\n   * that match the specified criterias. If no parameters are passed, all listeners added to this\n   * object will be removed. If only the `event` parameter is passed, all listeners for that event\n   * will be removed from that object. You can remove global listeners by using\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter.\n   *\n   * To use more granular options, you must at least define the `event`. Then, you can specify the\n   * callback to match or one or more of the additional options.\n   *\n   * @param {string} [event] The event name.\n   * @param {EventEmitter~callback} [callback] Only remove the listeners that match this exact\n   * callback function.\n   * @param {Object} [options]\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, callback, options = {}) {\n\n    if (event === undefined) {\n      this.eventMap = {};\n      return;\n    } else if (!this.eventMap[event]) {\n      return;\n    }\n\n    // Find listeners that do not match the criterias (those are the ones we will keep)\n    let listeners = this.eventMap[event].filter(listener => {\n\n      return (callback && listener.callback !== callback) ||\n        (options.remaining && options.remaining !== listener.remaining) ||\n        (options.context && options.context !== listener.context);\n\n    });\n\n    if (listeners.length) {\n      this.eventMap[event] = listeners;\n    } else {\n      delete this.eventMap[event];\n    }\n\n  }\n\n  /**\n   * The `waitFor()` method is an async function which returns a promise. The promise is fulfilled\n   * when the specified event occurs. The event can be a regular event or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} (if you want to resolve as soon as any\n   * event is emitted).\n   *\n   * If the `duration` option is set, the promise will only be fulfilled if the event is emitted\n   * within the specified duration. If the event has not been fulfilled after the specified\n   * duration, the promise is rejected. This makes it super easy to wait for an event and timeout\n   * after a certain time if the event is not triggered.\n   *\n   * @param {string|Symbol} event The event to wait for\n   * @param {Object} [options={}]\n   * @param {number} [options.duration=Infinity] The number of milliseconds to wait before the\n   * promise is automatically rejected.\n   */\n  async waitFor(event, options = {}) {\n\n    options.duration = parseInt(options.duration);\n    if (isNaN(options.duration) || options.duration <= 0) options.duration = Infinity;\n\n    return new Promise((resolve, reject) => {\n\n      let timeout;\n\n      let listener = this.addListener(event, () => {\n        clearTimeout(timeout);\n        resolve();\n      }, {remaining: 1});\n\n      if (options.duration !== Infinity) {\n        timeout = setTimeout(() => {\n          listener.remove();\n          reject(\"The duration expired before the event was emitted.\");\n        }, options.duration);\n      }\n\n    });\n\n  }\n\n  /**\n   * The number of unique events that have registered listeners.\n   *\n   * Note: this excludes global events registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n   * specific event.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get eventCount() {\n    return Object.keys(this.eventMap).length;\n  }\n\n}\n\n/**\n * The `Listener` class represents a single event listener object. Such objects keep all relevant\n * contextual information such as the event being listened to, the object the listener was attached\n * to, the callback function and so on.\n *\n */\nexport class Listener {\n\n  /**\n   * Creates a new `Listener` object\n   *\n   * @param {string|Symbol} event The event being listened to\n   * @param {EventEmitter} target The [`EventEmitter`]{@link EventEmitter} object that the listener\n   * is attached to.\n   * @param {EventEmitter~callback} callback The function to call when the listener is triggered\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=target] The context to invoke the listener in (a.k.a. the\n   * value of `this` inside the callback function).\n   * @param {number} [options.remaining=Infinity] The remaining number of times after which the\n   * callback should automatically be removed.\n   * @param {array} [options.arguments] An array of arguments that will be passed separately to the\n   * callback function upon execution. The array is stored in the [`arguments`]{@link #arguments}\n   * property and can be retrieved or modified as desired.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {ReferenceError} The `target` parameter is mandatory.\n   * @throws {TypeError} The `callback` must be a function.\n   */\n  constructor(event, target, callback, options = {}) {\n\n    if (\n      typeof event !== \"string\" &&\n      !(event instanceof String) &&\n      event !== EventEmitter.ANY_EVENT\n    ) {\n      throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n    }\n\n    if (!target) {\n      throw new ReferenceError(\"The 'target' parameter is mandatory.\");\n    }\n\n    if (typeof callback !== \"function\") {\n      throw new TypeError(\"The 'callback' must be a function.\");\n    }\n\n    // Convert single value argument to array\n    if (options.arguments !== undefined && !Array.isArray(options.arguments)) {\n      options.arguments = [options.arguments];\n    }\n\n    // Define default options and merge declared options into them,\n    options = Object.assign({\n      context: target,\n      remaining: Infinity,\n      arguments: undefined,\n      duration: Infinity,\n    }, options);\n\n    // Make sure it is eventually deleted if a duration is supplied\n    if (options.duration !== Infinity) {\n      setTimeout(() => this.remove(), options.duration);\n    }\n\n    /**\n     * An array of arguments to pass to the callback function upon execution.\n     * @type {array}\n     */\n    this.arguments = options.arguments;\n\n    /**\n     * The callback function to execute.\n     * @type {Function}\n     */\n    this.callback = callback;\n\n    /**\n     * The context to execute the callback function in (a.k.a. the value of `this` inside the\n     * callback function)\n     * @type {Object}\n     */\n    this.context = options.context;\n\n    /**\n     * The number of times the listener function was executed.\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * The event name.\n     * @type {string}\n     */\n    this.event = event;\n\n    /**\n     * The remaining number of times after which the callback should automatically be removed.\n     * @type {number}\n     */\n    this.remaining = parseInt(options.remaining) >= 1 ? parseInt(options.remaining) : Infinity;\n\n    /**\n     * Whether this listener is currently suspended or not.\n     * @type {boolean}\n     */\n    this.suspended = false;\n\n    /**\n     * The object that the event is attached to (or that emitted the event).\n     * @type {EventEmitter}\n     */\n    this.target = target;\n\n  }\n\n  /**\n   * Removes the listener from its target.\n   */\n  remove() {\n    this.target.removeListener(\n      this.event,\n      this.callback,\n      {context: this.context, remaining: this.remaining}\n    );\n  }\n\n}\n","/**\n * The `Enumerations` class contains enumerations and arrays of elements used throughout the\n * library. All its properties are static and should be referenced using the class name. For\n * example: `Enumerations.CHANNEL_MESSAGES`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Enumerations {\n\n  /**\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.CHANNEL_MESSAGES instead)\n   * @private\n   * @static\n   */\n  static get MIDI_CHANNEL_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.CHANNEL_MESSAGES enum instead.\"\n      );\n    }\n\n    return Enumerations.CHANNEL_MESSAGES;\n\n  }\n\n  /**\n   * Enumeration of all MIDI channel message names and their associated 4-bit numerical value:\n   *\n   * | Message Name        | Hexadecimal | Decimal |\n   * |---------------------|-------------|---------|\n   * | `noteoff`           | 0x8         | 8       |\n   * | `noteon`            | 0x9         | 9       |\n   * | `keyaftertouch`     | 0xA         | 10      |\n   * | `controlchange`     | 0xB         | 11      |\n   * | `programchange`     | 0xC         | 12      |\n   * | `channelaftertouch` | 0xD         | 13      |\n   * | `pitchbend`         | 0xE         | 14      |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get CHANNEL_MESSAGES() {\n\n    return {\n      noteoff: 0x8,           // 8\n      noteon: 0x9,            // 9\n      keyaftertouch: 0xA,     // 10\n      controlchange: 0xB,     // 11\n      programchange: 0xC,     // 12\n      channelaftertouch: 0xD, // 13\n      pitchbend: 0xE          // 14\n    };\n\n  }\n\n  /**\n   * A simple array of the 16 valid MIDI channel numbers (`1` to `16`):\n   *\n   * @type {number[]}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get CHANNEL_NUMBERS() {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n  }\n\n  /**\n   * @type {number[]}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.CHANNEL_NUMBERS instead)\n   * @private\n   * @static\n   */\n  static get MIDI_CHANNEL_NUMBERS() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the \" +\n        \"Enumerations.CHANNEL_NUMBERS array instead.\"\n      );\n    }\n\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n\n  }\n\n  /**\n   * Enumeration of all MIDI channel mode message names and their associated numerical value:\n   *\n   *\n   * | Message Name          | Hexadecimal | Decimal |\n   * |-----------------------|-------------|---------|\n   * | `allsoundoff`         | 0x78        | 120     |\n   * | `resetallcontrollers` | 0x79        | 121     |\n   * | `localcontrol`        | 0x7A        | 122     |\n   * | `allnotesoff`         | 0x7B        | 123     |\n   * | `omnimodeoff`         | 0x7C        | 124     |\n   * | `omnimodeon`          | 0x7D        | 125     |\n   * | `monomodeon`          | 0x7E        | 126     |\n   * | `polymodeon`          | 0x7F        | 127     |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get CHANNEL_MODE_MESSAGES() {\n\n    return {\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * @enum {Object.<string, number>}\n   * @deprecated since 3.1 (use Enumerations.CHANNEL_MODE_MESSAGES instead)\n   * @private\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.CHANNEL_MODE_MESSAGES enum instead.\"\n      );\n    }\n\n    return Enumerations.CHANNEL_MODE_MESSAGES;\n\n  }\n\n  /**\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   * @private\n   * @deprecated since version 3.0.26 (use `CONTROL_CHANGE_MESSAGES` instead)\n   */\n  static get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.CONTROL_CHANGE_MESSAGES array instead.\"\n      );\n    }\n\n    return {\n\n      bankselectcoarse: 0,\n      modulationwheelcoarse: 1,\n      breathcontrollercoarse: 2,\n      controller3: 3,\n      footcontrollercoarse: 4,\n      portamentotimecoarse: 5,\n      dataentrycoarse: 6,\n      volumecoarse: 7,\n      balancecoarse: 8,\n      controller9: 9,\n      pancoarse: 10,\n      expressioncoarse: 11,\n      effectcontrol1coarse: 12,\n      effectcontrol2coarse: 13,\n      controller14: 14,\n      controller15: 15,\n      generalpurposeslider1: 16,\n      generalpurposeslider2: 17,\n      generalpurposeslider3: 18,\n      generalpurposeslider4: 19,\n      controller20: 20,\n      controller21: 21,\n      controller22: 22,\n      controller23: 23,\n      controller24: 24,\n      controller25: 25,\n      controller26: 26,\n      controller27: 27,\n      controller28: 28,\n      controller29: 29,\n      controller30: 30,\n      controller31: 31,\n      bankselectfine: 32,\n      modulationwheelfine: 33,\n      breathcontrollerfine: 34,\n      controller35: 35,\n      footcontrollerfine: 36,\n      portamentotimefine: 37,\n      dataentryfine: 38,\n      volumefine: 39,\n      balancefine: 40,\n      controller41: 41,\n      panfine: 42,\n      expressionfine: 43,\n      effectcontrol1fine: 44,\n      effectcontrol2fine: 45,\n      controller46: 46,\n      controller47: 47,\n      controller48: 48,\n      controller49: 49,\n      controller50: 50,\n      controller51: 51,\n      controller52: 52,\n      controller53: 53,\n      controller54: 54,\n      controller55: 55,\n      controller56: 56,\n      controller57: 57,\n      controller58: 58,\n      controller59: 59,\n      controller60: 60,\n      controller61: 61,\n      controller62: 62,\n      controller63: 63,\n      holdpedal: 64,\n      portamento: 65,\n      sustenutopedal: 66,\n      softpedal: 67,\n      legatopedal: 68,\n      hold2pedal: 69,\n      soundvariation: 70,\n      resonance: 71,\n      soundreleasetime: 72,\n      soundattacktime: 73,\n      brightness: 74,\n      soundcontrol6: 75,\n      soundcontrol7: 76,\n      soundcontrol8: 77,\n      soundcontrol9: 78,\n      soundcontrol10: 79,\n      generalpurposebutton1: 80,\n      generalpurposebutton2: 81,\n      generalpurposebutton3: 82,\n      generalpurposebutton4: 83,\n      controller84: 84,\n      controller85: 85,\n      controller86: 86,\n      controller87: 87,\n      controller88: 88,\n      controller89: 89,\n      controller90: 90,\n      reverblevel: 91,\n      tremololevel: 92,\n      choruslevel: 93,\n      celestelevel: 94,\n      phaserlevel: 95,\n      databuttonincrement: 96,\n      databuttondecrement: 97,\n      nonregisteredparametercoarse: 98,\n      nonregisteredparameterfine: 99,\n      registeredparametercoarse: 100,\n      registeredparameterfine: 101,\n      controller102: 102,\n      controller103: 103,\n      controller104: 104,\n      controller105: 105,\n      controller106: 106,\n      controller107: 107,\n      controller108: 108,\n      controller109: 109,\n      controller110: 110,\n      controller111: 111,\n      controller112: 112,\n      controller113: 113,\n      controller114: 114,\n      controller115: 115,\n      controller116: 116,\n      controller117: 117,\n      controller118: 118,\n      controller119: 119,\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n\n    };\n\n  }\n\n  /**\n   * An array of objects, ordered by control number, describing control change messages. Each object\n   * in the array has 3 properties with some objects having a fourth one (`position`) :\n   *\n   *  * `number`: MIDI control number (0-127);\n   *  * `name`: name of emitted event (eg: `bankselectcoarse`, `choruslevel`, etc) that can be\n   *  listened to;\n   *  * `description`: user-friendly description of the controller's purpose;\n   *  * `position` (optional): whether this controller's value should be considered an `msb` or\n   *  `lsb`\n   *\n   * Not all controllers have a predefined function. For those that don't, `name` is the word\n   * \"controller\" followed by the number (e.g. `controller112`).\n   *\n   * | Event name                     | Control Number |\n   * |--------------------------------|----------------|\n   * | `bankselectcoarse`             | 0              |\n   * | `modulationwheelcoarse`        | 1              |\n   * | `breathcontrollercoarse`       | 2              |\n   * | `controller3`                  | 3              |\n   * | `footcontrollercoarse`         | 4              |\n   * | `portamentotimecoarse`         | 5              |\n   * | `dataentrycoarse`              | 6              |\n   * | `volumecoarse`                 | 7              |\n   * | `balancecoarse`                | 8              |\n   * | `controller9`                  | 9              |\n   * | `pancoarse`                    | 10             |\n   * | `expressioncoarse`             | 11             |\n   * | `effectcontrol1coarse`         | 12             |\n   * | `effectcontrol2coarse`         | 13             |\n   * | `controller14`                 | 14             |\n   * | `controller15`                 | 15             |\n   * | `generalpurposecontroller1`    | 16             |\n   * | `generalpurposecontroller2`    | 17             |\n   * | `generalpurposecontroller3`    | 18             |\n   * | `generalpurposecontroller4`    | 19             |\n   * | `controller20`                 | 20             |\n   * | `controller21`                 | 21             |\n   * | `controller22`                 | 22             |\n   * | `controller23`                 | 23             |\n   * | `controller24`                 | 24             |\n   * | `controller25`                 | 25             |\n   * | `controller26`                 | 26             |\n   * | `controller27`                 | 27             |\n   * | `controller28`                 | 28             |\n   * | `controller29`                 | 29             |\n   * | `controller30`                 | 30             |\n   * | `controller31`                 | 31             |\n   * | `bankselectfine`               | 32             |\n   * | `modulationwheelfine`          | 33             |\n   * | `breathcontrollerfine`         | 34             |\n   * | `controller35`                 | 35             |\n   * | `footcontrollerfine`           | 36             |\n   * | `portamentotimefine`           | 37             |\n   * | `dataentryfine`                | 38             |\n   * | `channelvolumefine`            | 39             |\n   * | `balancefine`                  | 40             |\n   * | `controller41`                 | 41             |\n   * | `panfine`                      | 42             |\n   * | `expressionfine`               | 43             |\n   * | `effectcontrol1fine`           | 44             |\n   * | `effectcontrol2fine`           | 45             |\n   * | `controller46`                 | 46             |\n   * | `controller47`                 | 47             |\n   * | `controller48`                 | 48             |\n   * | `controller49`                 | 49             |\n   * | `controller50`                 | 50             |\n   * | `controller51`                 | 51             |\n   * | `controller52`                 | 52             |\n   * | `controller53`                 | 53             |\n   * | `controller54`                 | 54             |\n   * | `controller55`                 | 55             |\n   * | `controller56`                 | 56             |\n   * | `controller57`                 | 57             |\n   * | `controller58`                 | 58             |\n   * | `controller59`                 | 59             |\n   * | `controller60`                 | 60             |\n   * | `controller61`                 | 61             |\n   * | `controller62`                 | 62             |\n   * | `controller63`                 | 63             |\n   * | `damperpedal`                  | 64             |\n   * | `portamento`                   | 65             |\n   * | `sostenuto`                    | 66             |\n   * | `softpedal`                    | 67             |\n   * | `legatopedal`                  | 68             |\n   * | `hold2`                        | 69             |\n   * | `soundvariation`               | 70             |\n   * | `resonance`                    | 71             |\n   * | `releasetime`                  | 72             |\n   * | `attacktime`                   | 73             |\n   * | `brightness`                   | 74             |\n   * | `decaytime`                    | 75             |\n   * | `vibratorate`                  | 76             |\n   * | `vibratodepth`                 | 77             |\n   * | `vibratodelay`                 | 78             |\n   * | `controller79`                 | 79             |\n   * | `generalpurposecontroller5`    | 80             |\n   * | `generalpurposecontroller6`    | 81             |\n   * | `generalpurposecontroller7`    | 82             |\n   * | `generalpurposecontroller8`    | 83             |\n   * | `portamentocontrol`            | 84             |\n   * | `controller85`                 | 85             |\n   * | `controller86`                 | 86             |\n   * | `controller87`                 | 87             |\n   * | `highresolutionvelocityprefix` | 88             |\n   * | `controller89`                 | 89             |\n   * | `controller90`                 | 90             |\n   * | `effect1depth`                 | 91             |\n   * | `effect2depth`                 | 92             |\n   * | `effect3depth`                 | 93             |\n   * | `effect4depth`                 | 94             |\n   * | `effect5depth`                 | 95             |\n   * | `dataincrement`                | 96             |\n   * | `datadecrement`                | 97             |\n   * | `nonregisteredparameterfine`   | 98             |\n   * | `nonregisteredparametercoarse` | 99             |\n   * | `nonregisteredparameterfine`   | 100            |\n   * | `registeredparametercoarse`    | 101            |\n   * | `controller102`                | 102            |\n   * | `controller103`                | 103            |\n   * | `controller104`                | 104            |\n   * | `controller105`                | 105            |\n   * | `controller106`                | 106            |\n   * | `controller107`                | 107            |\n   * | `controller108`                | 108            |\n   * | `controller109`                | 109            |\n   * | `controller110`                | 110            |\n   * | `controller111`                | 111            |\n   * | `controller112`                | 112            |\n   * | `controller113`                | 113            |\n   * | `controller114`                | 114            |\n   * | `controller115`                | 115            |\n   * | `controller116`                | 116            |\n   * | `controller117`                | 117            |\n   * | `controller118`                | 118            |\n   * | `controller119`                | 119            |\n   * | `allsoundoff`                  | 120            |\n   * | `resetallcontrollers`          | 121            |\n   * | `localcontrol`                 | 122            |\n   * | `allnotesoff`                  | 123            |\n   * | `omnimodeoff`                  | 124            |\n   * | `omnimodeon`                   | 125            |\n   * | `monomodeon`                   | 126            |\n   * | `polymodeon`                   | 127            |\n   *\n   * @type {object[]}\n   * @readonly\n   * @static\n   * @since 3.1\n   */\n  static get CONTROL_CHANGE_MESSAGES() {\n\n    return [\n      {\n        number: 0,\n        name: \"bankselectcoarse\",\n        description: \"Bank Select (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 1,\n        name: \"modulationwheelcoarse\",\n        description: \"Modulation Wheel (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 2,\n        name: \"breathcontrollercoarse\",\n        description: \"Breath Controller (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 3,\n        name: \"controller3\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 4,\n        name: \"footcontrollercoarse\",\n        description: \"Foot Controller (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 5,\n        name: \"portamentotimecoarse\",\n        description: \"Portamento Time (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 6,\n        name: \"dataentrycoarse\",\n        description: \"Data Entry (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 7,\n        name: \"volumecoarse\",\n        description: \"Channel Volume (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 8,\n        name: \"balancecoarse\",\n        description: \"Balance (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 9,\n        name: \"controller9\",\n        description: \"Controller 9 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 10,\n        name: \"pancoarse\",\n        description: \"Pan (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 11,\n        name: \"expressioncoarse\",\n        description: \"Expression Controller (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 12,\n        name: \"effectcontrol1coarse\",\n        description: \"Effect Control 1 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 13,\n        name: \"effectcontrol2coarse\",\n        description: \"Effect Control 2 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 14,\n        name: \"controller14\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 15,\n        name: \"controller15\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 16,\n        name: \"generalpurposecontroller1\",\n        description: \"General Purpose Controller 1 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 17,\n        name: \"generalpurposecontroller2\",\n        description: \"General Purpose Controller 2 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 18,\n        name: \"generalpurposecontroller3\",\n        description: \"General Purpose Controller 3 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 19,\n        name: \"generalpurposecontroller4\",\n        description: \"General Purpose Controller 4 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 20,\n        name: \"controller20\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 21,\n        name: \"controller21\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 22,\n        name: \"controller22\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 23,\n        name: \"controller23\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 24,\n        name: \"controller24\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 25,\n        name: \"controller25\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 26,\n        name: \"controller26\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 27,\n        name: \"controller27\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 28,\n        name: \"controller28\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 29,\n        name: \"controller29\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 30,\n        name: \"controller30\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 31,\n        name: \"controller31\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 32,\n        name: \"bankselectfine\",\n        description: \"Bank Select (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 33,\n        name: \"modulationwheelfine\",\n        description: \"Modulation Wheel (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 34,\n        name: \"breathcontrollerfine\",\n        description: \"Breath Controller (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 35,\n        name: \"controller35\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 36,\n        name: \"footcontrollerfine\",\n        description: \"Foot Controller (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 37,\n        name: \"portamentotimefine\",\n        description: \"Portamento Time (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 38,\n        name: \"dataentryfine\",\n        description: \"Data Entry (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 39,\n        name: \"channelvolumefine\",\n        description: \"Channel Volume (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 40,\n        name: \"balancefine\",\n        description: \"Balance (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 41,\n        name: \"controller41\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 42,\n        name: \"panfine\",\n        description: \"Pan (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 43,\n        name: \"expressionfine\",\n        description: \"Expression Controller (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 44,\n        name: \"effectcontrol1fine\",\n        description: \"Effect control 1 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 45,\n        name: \"effectcontrol2fine\",\n        description: \"Effect control 2 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 46,\n        name: \"controller46\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 47,\n        name: \"controller47\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 48,\n        name: \"controller48\",\n        description: \"General Purpose Controller 1 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 49,\n        name: \"controller49\",\n        description: \"General Purpose Controller 2 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 50,\n        name: \"controller50\",\n        description: \"General Purpose Controller 3 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 51,\n        name: \"controller51\",\n        description: \"General Purpose Controller 4 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 52,\n        name: \"controller52\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 53,\n        name: \"controller53\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 54,\n        name: \"controller54\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 55,\n        name: \"controller55\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 56,\n        name: \"controller56\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 57,\n        name: \"controller57\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 58,\n        name: \"controller58\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 59,\n        name: \"controller59\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 60,\n        name: \"controller60\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 61,\n        name: \"controller61\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 62,\n        name: \"controller62\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 63,\n        name: \"controller63\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 64,\n        name: \"damperpedal\",\n        description: \"Damper Pedal On/Off\"\n      },\n      {\n        number: 65,\n        name: \"portamento\",\n        description: \"Portamento On/Off\"\n      },\n      {\n        number: 66,\n        name: \"sostenuto\",\n        description: \"Sostenuto On/Off\"\n      },\n      {\n        number: 67,\n        name: \"softpedal\",\n        description: \"Soft Pedal On/Off\"\n      },\n      {\n        number: 68,\n        name: \"legatopedal\",\n        description: \"Legato Pedal On/Off\"\n      },\n      {\n        number: 69,\n        name: \"hold2\",\n        description: \"Hold 2 On/Off\"\n      },\n      {\n        number: 70,\n        name: \"soundvariation\",\n        description: \"Sound Variation\",\n        position: \"lsb\"\n      },\n      {\n        number: 71,\n        name: \"resonance\",\n        description: \"Resonance\",\n        position: \"lsb\"\n      },\n      {\n        number: 72,\n        name: \"releasetime\",\n        description: \"Release Time\",\n        position: \"lsb\"\n      },\n      {\n        number: 73,\n        name: \"attacktime\",\n        description: \"Attack Time\",\n        position: \"lsb\"\n      },\n      {\n        number: 74,\n        name: \"brightness\",\n        description: \"Brightness\",\n        position: \"lsb\"\n      },\n      {\n        number: 75,\n        name: \"decaytime\",\n        description: \"Decay Time\",\n        position: \"lsb\"\n      },\n      {\n        number: 76,\n        name: \"vibratorate\",\n        description: \"Vibrato Rate\",\n        position: \"lsb\"\n      },\n      {\n        number: 77,\n        name: \"vibratodepth\",\n        description: \"Vibrato Depth\",\n        position: \"lsb\"\n      },\n      {\n        number: 78,\n        name: \"vibratodelay\",\n        description: \"Vibrato Delay\",\n        position: \"lsb\"\n      },\n      {\n        number: 79,\n        name: \"controller79\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 80,\n        name: \"generalpurposecontroller5\",\n        description: \"General Purpose Controller 5\",\n        position: \"lsb\"\n      },\n      {\n        number: 81,\n        name: \"generalpurposecontroller6\",\n        description: \"General Purpose Controller 6\",\n        position: \"lsb\"\n      },\n      {\n        number: 82,\n        name: \"generalpurposecontroller7\",\n        description: \"General Purpose Controller 7\",\n        position: \"lsb\"\n      },\n      {\n        number: 83,\n        name: \"generalpurposecontroller8\",\n        description: \"General Purpose Controller 8\",\n        position: \"lsb\"\n      },\n      {\n        number: 84,\n        name: \"portamentocontrol\",\n        description: \"Portamento Control\",\n        position: \"lsb\"\n      },\n      {\n        number: 85,\n        name: \"controller85\",\n        description: \"Undefined\"\n      },\n      {\n        number: 86,\n        name: \"controller86\",\n        description: \"Undefined\"\n      },\n      {\n        number: 87,\n        name: \"controller87\",\n        description: \"Undefined\"\n      },\n      {\n        number: 88,\n        name: \"highresolutionvelocityprefix\",\n        description: \"High Resolution Velocity Prefix\",\n        position: \"lsb\"\n      },\n      {\n        number: 89,\n        name: \"controller89\",\n        description: \"Undefined\"\n      },\n      {\n        number: 90,\n        name: \"controller90\",\n        description: \"Undefined\"\n      },\n      {\n        number: 91,\n        name: \"effect1depth\",\n        description: \"Effects 1 Depth (Reverb Send Level)\"\n      },\n      {\n        number: 92,\n        name: \"effect2depth\",\n        description: \"Effects 2 Depth\"\n      },\n      {\n        number: 93,\n        name: \"effect3depth\",\n        description: \"Effects 3 Depth (Chorus Send Level)\"\n      },\n      {\n        number: 94,\n        name: \"effect4depth\",\n        description: \"Effects 4 Depth\"\n      },\n      {\n        number: 95,\n        name: \"effect5depth\",\n        description: \"Effects 5 Depth\"\n      },\n      {\n        number: 96,\n        name: \"dataincrement\",\n        description: \"Data Increment\"\n      },\n      {\n        number: 97,\n        name: \"datadecrement\",\n        description: \"Data Decrement\"\n      },\n      {\n        number: 98,\n        name: \"nonregisteredparameterfine\",\n        description: \"Non-Registered Parameter Number (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 99,\n        name: \"nonregisteredparametercoarse\",\n        description: \"Non-Registered Parameter Number (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 100,\n        name: \"registeredparameterfine\",\n        description: \"Registered Parameter Number (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 101,\n        name: \"registeredparametercoarse\",\n        description: \"Registered Parameter Number (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 102,\n        name: \"controller102\",\n        description: \"Undefined\"\n      },\n      {\n        number: 103,\n        name: \"controller103\",\n        description: \"Undefined\"\n      },\n      {\n        number: 104,\n        name: \"controller104\",\n        description: \"Undefined\"\n      },\n      {\n        number: 105,\n        name: \"controller105\",\n        description: \"Undefined\"\n      },\n      {\n        number: 106,\n        name: \"controller106\",\n        description: \"Undefined\"\n      },\n      {\n        number: 107,\n        name: \"controller107\",\n        description: \"Undefined\"\n      },\n      {\n        number: 108,\n        name: \"controller108\",\n        description: \"Undefined\"\n      },\n      {\n        number: 109,\n        name: \"controller109\",\n        description: \"Undefined\"\n      },\n      {\n        number: 110,\n        name: \"controller110\",\n        description: \"Undefined\"\n      },\n      {\n        number: 111,\n        name: \"controller111\",\n        description: \"Undefined\"\n      },\n      {\n        number: 112,\n        name: \"controller112\",\n        description: \"Undefined\"\n      },\n      {\n        number: 113,\n        name: \"controller113\",\n        description: \"Undefined\"\n      },\n      {\n        number: 114,\n        name: \"controller114\",\n        description: \"Undefined\"\n      },\n      {\n        number: 115,\n        name: \"controller115\",\n        description: \"Undefined\"\n      },\n      {\n        number: 116,\n        name: \"controller116\",\n        description: \"Undefined\"\n      },\n      {\n        number: 117,\n        name: \"controller117\",\n        description: \"Undefined\"\n      },\n      {\n        number: 118,\n        name: \"controller118\",\n        description: \"Undefined\"\n      },\n      {\n        number: 119,\n        name: \"controller119\",\n        description: \"Undefined\"\n      },\n      {\n        number: 120,\n        name: \"allsoundoff\",\n        description: \"All Sound Off\"\n      },\n      {\n        number: 121,\n        name: \"resetallcontrollers\",\n        description: \"Reset All Controllers\"\n      },\n      {\n        number: 122,\n        name: \"localcontrol\",\n        description: \"Local Control On/Off\"\n      },\n      {\n        number: 123,\n        name: \"allnotesoff\",\n        description: \"All Notes Off\"\n      },\n      {\n        number: 124,\n        name: \"omnimodeoff\",\n        description: \"Omni Mode Off\"\n      },\n      {\n        number: 125,\n        name: \"omnimodeon\",\n        description: \"Omni Mode On\"\n      },\n      {\n        number: 126,\n        name: \"monomodeon\",\n        description: \"Mono Mode On\"\n      },\n      {\n        number: 127,\n        name: \"polymodeon\",\n        description: \"Poly Mode On\"\n      },\n    ];\n\n  }\n\n  /**\n   * Enumeration of all MIDI registered parameters and their associated pair of numerical values.\n   * MIDI registered parameters extend the original list of control change messages. Currently,\n   * there are only a limited number of them:\n   *\n   *\n   * | Control Function             | [LSB, MSB]   |\n   * |------------------------------|--------------|\n   * | `pitchbendrange`             | [0x00, 0x00] |\n   * | `channelfinetuning`          | [0x00, 0x01] |\n   * | `channelcoarsetuning`        | [0x00, 0x02] |\n   * | `tuningprogram`              | [0x00, 0x03] |\n   * | `tuningbank`                 | [0x00, 0x04] |\n   * | `modulationrange`            | [0x00, 0x05] |\n   * | `azimuthangle`               | [0x3D, 0x00] |\n   * | `elevationangle`             | [0x3D, 0x01] |\n   * | `gain`                       | [0x3D, 0x02] |\n   * | `distanceratio`              | [0x3D, 0x03] |\n   * | `maximumdistance`            | [0x3D, 0x04] |\n   * | `maximumdistancegain`        | [0x3D, 0x05] |\n   * | `referencedistanceratio`     | [0x3D, 0x06] |\n   * | `panspreadangle`             | [0x3D, 0x07] |\n   * | `rollangle`                  | [0x3D, 0x08] |\n   *\n   * @enum {Object.<string, number[]>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get REGISTERED_PARAMETERS() {\n\n    return {\n      pitchbendrange: [0x00, 0x00],\n      channelfinetuning: [0x00, 0x01],\n      channelcoarsetuning: [0x00, 0x02],\n      tuningprogram: [0x00, 0x03],\n      tuningbank: [0x00, 0x04],\n\n      modulationrange: [0x00, 0x05],\n      azimuthangle: [0x3D, 0x00],\n      elevationangle: [0x3D, 0x01],\n      gain: [0x3D, 0x02],\n      distanceratio: [0x3D, 0x03],\n      maximumdistance: [0x3D, 0x04],\n      maximumdistancegain: [0x3D, 0x05],\n      referencedistanceratio: [0x3D, 0x06],\n      panspreadangle: [0x3D, 0x07],\n      rollangle: [0x3D, 0x08]\n    };\n\n  }\n\n  /**\n   * @enum {Object.<string, number[]>}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.REGISTERED_PARAMETERS instead)\n   * @private\n   * @static\n   */\n  static get MIDI_REGISTERED_PARAMETERS() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the \" +\n        \"Enumerations.REGISTERED_PARAMETERS enum instead.\"\n      );\n    }\n\n    return Enumerations.MIDI_REGISTERED_PARAMETERS;\n\n  }\n\n  /**\n   * Enumeration of all valid MIDI system messages and matching numerical values. This library also\n   * uses two additional custom messages.\n   *\n   * **System Common Messages**\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `sysex`                | 0xF0        |  240    |\n   * | `timecode`             | 0xF1        |  241    |\n   * | `songposition`         | 0xF2        |  242    |\n   * | `songselect`           | 0xF3        |  243    |\n   * | `tunerequest`          | 0xF6        |  246    |\n   * | `sysexend`             | 0xF7        |  247    |\n   *\n   * The `sysexend` message is never actually received. It simply ends a sysex stream.\n   *\n   * **System Real-Time Messages**\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `clock`                | 0xF8        |  248    |\n   * | `start`                | 0xFA        |  250    |\n   * | `continue`             | 0xFB        |  251    |\n   * | `stop`                 | 0xFC        |  252    |\n   * | `activesensing`        | 0xFE        |  254    |\n   * | `reset`                | 0xFF        |  255    |\n   *\n   * Values 249 and 253 are relayed by the\n   * [Web MIDI API](https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API) but they do not\n   * serve any specific purpose. The\n   * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n   * simply states that they are undefined/reserved.\n   *\n   * **Custom Messages**\n   *\n   * These two messages are mostly for internal use. They are not MIDI messages and cannot be sent\n   * or forwarded.\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `midimessage`          |             |  0      |\n   * | `unknownsystemmessage` |             |  -1     |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get SYSTEM_MESSAGES() {\n\n    return {\n\n      // System common messages\n      sysex: 0xF0,            // 240\n      timecode: 0xF1,         // 241\n      songposition: 0xF2,     // 242\n      songselect: 0xF3,       // 243\n      tunerequest: 0xF6,      // 246\n      tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)\n      sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n      // System real-time messages\n      clock: 0xF8,            // 248\n      start: 0xFA,            // 250\n      continue: 0xFB,         // 251\n      stop: 0xFC,             // 252\n      activesensing: 0xFE,    // 254\n      reset: 0xFF,            // 255\n\n      // Custom WebMidi.js messages\n      midimessage: 0,\n      unknownsystemmessage: -1\n\n    };\n\n  }\n\n  /**\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.SYSTEM_MESSAGES instead)\n   * @private\n   * @static\n   */\n  static get MIDI_SYSTEM_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.SYSTEM_MESSAGES enum instead.\"\n      );\n    }\n\n    return Enumerations.SYSTEM_MESSAGES;\n\n  }\n\n  /**\n   * Array of channel-specific event names that can be listened for. This includes channel mode\n   * events and RPN/NRPN events.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  static get CHANNEL_EVENTS() {\n\n    return [\n\n      // MIDI channel message events\n      \"noteoff\",\n      \"controlchange\",\n      \"noteon\",\n      \"keyaftertouch\",\n      \"programchange\",\n      \"channelaftertouch\",\n      \"pitchbend\",\n\n      // MIDI channel mode events\n      \"allnotesoff\",\n      \"allsoundoff\",\n      \"localcontrol\",\n      \"monomode\",\n      \"omnimode\",\n      \"resetallcontrollers\",\n\n      // RPN/NRPN events\n      \"nrpn\",\n      \"nrpn-dataentrycoarse\",\n      \"nrpn-dataentryfine\",\n      \"nrpn-dataincrement\",\n      \"nrpn-datadecrement\",\n      \"rpn\",\n      \"rpn-dataentrycoarse\",\n      \"rpn-dataentryfine\",\n      \"rpn-dataincrement\",\n      \"rpn-datadecrement\",\n\n      // Legacy (remove in v4)\n      \"nrpn-databuttonincrement\",\n      \"nrpn-databuttondecrement\",\n      \"rpn-databuttonincrement\",\n      \"rpn-databuttondecrement\",\n\n    ];\n  }\n\n}\n","import {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Note` class represents a single musical note such as `\"D3\"`, `\"G#4\"`, `\"F-1\"`, `\"Gb7\"`, etc.\n *\n * `Note` objects can be played back on a single channel by calling\n * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same\n * output, by calling [`Output.playNote()`]{@link Output#playNote}.\n *\n * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.\n * These can be changed by passing in the appropriate option. It is also possible to set a\n * system-wide default for attack and release velocities by using the\n * [`WebMidi.defaults`](WebMidi#defaults) property.\n *\n * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and\n * [`rawRelease`](#rawRelease) to both get and set the values.\n *\n * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped\n * when the duration has elapsed by sending a `\"noteoff\"` event. By default, the duration is set to\n * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a\n * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},\n * [`Output.stopNote()`]{@link Output#stopNote} or similar.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Note {\n\n  /**\n   * Creates a `Note` object.\n   *\n   * @param value {string|number} The value used to create the note. If an identifier string is used,\n   * it must start with the note letter, optionally followed by an accidental and followed by the\n   * octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). If a number is used, it must be an\n   * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n   * explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @throws {Error} Invalid note identifier\n   * @throws {RangeError} Invalid name value\n   * @throws {RangeError} Invalid accidental value\n   * @throws {RangeError} Invalid octave value\n   * @throws {RangeError} Invalid duration value\n   * @throws {RangeError} Invalid attack value\n   * @throws {RangeError} Invalid release value\n   */\n  constructor(value, options = {}) {\n\n    // Assign property defaults\n    this.duration = WebMidi.defaults.note.duration;\n    this.attack = WebMidi.defaults.note.attack;\n    this.release = WebMidi.defaults.note.release;\n\n    // Assign property values from options (validation occurs in setter)\n    if (options.duration != undefined) this.duration = options.duration;\n    if (options.attack != undefined) this.attack = options.attack;\n    if (options.rawAttack != undefined) this.attack = Utilities.from7bitToFloat(options.rawAttack);\n    if (options.release != undefined) this.release = options.release;\n    if (options.rawRelease != undefined) {\n      this.release = Utilities.from7bitToFloat(options.rawRelease);\n    }\n\n    // Assign note depending on the way it was specified (name or number)\n    if (Number.isInteger(value)) {\n      this.identifier = Utilities.toNoteIdentifier(value);\n    } else {\n      this.identifier = value;\n    }\n\n  }\n\n  /**\n   * The name, optional accidental and octave of the note, as a string.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get identifier() {\n    return this._name + (this._accidental || \"\") + this._octave;\n  }\n  set identifier(value) {\n\n    const fragments = Utilities.getNoteDetails(value);\n\n    if (WebMidi.validation) {\n      if (!value) throw new Error(\"Invalid note identifier\");\n    }\n\n    this._name = fragments.name;\n    this._accidental = fragments.accidental;\n    this._octave = fragments.octave;\n\n  }\n\n  /**\n   * The name (letter) of the note. If you need the full name with octave and accidental, you can\n   * use the [`identifier`]{@link Note#identifier} property instead.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n\n    if (WebMidi.validation) {\n      value = value.toUpperCase();\n      if (![\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"].includes(value)) {\n        throw new Error(\"Invalid name value\");\n      }\n    }\n\n    this._name = value;\n\n  }\n\n  /**\n   * The accidental (#, ##, b or bb) of the note.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get accidental() {\n    return this._accidental;\n  }\n  set accidental(value) {\n\n    if (WebMidi.validation) {\n      value = value.toLowerCase();\n      if (![\"#\", \"##\", \"b\", \"bb\"].includes(value)) throw new Error(\"Invalid accidental value\");\n    }\n\n    this._accidental = value;\n\n  }\n\n  /**\n   * The octave of the note.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get octave() {\n    return this._octave;\n  }\n  set octave(value) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new Error(\"Invalid octave value\");\n    }\n\n    this._octave = value;\n\n  }\n\n  /**\n   * The duration of the note as a positive decimal number representing the number of milliseconds\n   * that the note should play for.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || value === null || value < 0) {\n        throw new RangeError(\"Invalid duration value.\");\n      }\n    }\n\n    this._duration = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as an integer between 0 and 1.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get attack() {\n    return this._attack;\n  }\n  set attack(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid attack value.\");\n      }\n    }\n\n    this._attack = value;\n\n  }\n\n  /**\n   * The release velocity of the note as an integer between 0 and 1.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get release() {\n    return this._release;\n  }\n  set release(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid release value.\");\n      }\n    }\n\n    this._release = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawAttack() {\n    return Utilities.fromFloatTo7Bit(this._attack);\n  }\n  set rawAttack(value) {\n    this._attack = Utilities.from7bitToFloat(value);\n  }\n\n  /**\n   * The release velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawRelease() {\n    return Utilities.fromFloatTo7Bit(this._release);\n  }\n  set rawRelease(value) {\n    this._release = Utilities.from7bitToFloat(value);\n  }\n\n  /**\n   * The MIDI number of the note (`0` - `127`). This number is derived from the note identifier\n   * using C4 as a reference for middle C.\n   *\n   * @type {number}\n   * @readonly\n   * @since 3.0.0\n   */\n  get number() {\n    return Utilities.toNoteNumber(this.identifier);\n  }\n\n  /**\n   * Returns a MIDI note number offset by octave and/or semitone. If the calculated value is less\n   * than 0, 0 will be returned. If the calculated value is more than 127, 127 will be returned. If\n   * an invalid value is supplied, 0 will be used.\n   *\n   * @param [octaveOffset] {number} An integer to offset the note number by octave.\n   * @param [semitoneOffset] {number} An integer to offset the note number by semitone.\n   * @returns {number} An integer between 0 and 127\n   */\n  getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(this.number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n}\n","import {Note} from \"./Note.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `Utilities` class contains general-purpose utility methods. All methods are static and\n * should be called using the class name. For example: `Utilities.getNoteDetails(\"C4\")`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Utilities {\n\n  /**\n   * Returns a MIDI note number matching the identifier passed in the form of a string. The\n   * identifier must include the octave number. The identifier also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n   * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n   *\n   * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number\n   * 60) as per the scientific pitch notation standard.\n   *\n   * The resulting note number can be offset by using the `octaveOffset` parameter.\n   *\n   * @param identifier {string} The identifier in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,\n   * Abb4, B##6, etc.\n   *\n   * @param {number} [octaveOffset=0] A integer to offset the octave by.\n   *\n   * @returns {number} The MIDI note number (an integer between 0 and 127).\n   *\n   * @throws RangeError Invalid 'octaveOffset' value\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteNumber(identifier, octaveOffset = 0) {\n\n    // Validation\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid 'octaveOffset' value\");\n    if (typeof identifier !== \"string\") identifier = \"\";\n\n    const fragments = this.getNoteDetails(identifier);\n    if (!fragments) throw new TypeError(\"Invalid note identifier\");\n\n    const notes = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n    let result = (fragments.octave + 1 + octaveOffset) * 12;\n    result += notes[fragments.name];\n\n    if (fragments.accidental) {\n      if (fragments.accidental.startsWith(\"b\")) {\n        result -= fragments.accidental.length;\n      } else {\n        result += fragments.accidental.length;\n      }\n    }\n\n    if (result < 0 || result > 127) throw new RangeError(\"Invalid octaveOffset value\");\n\n    return result;\n\n  }\n\n  /**\n   * Given a proper note identifier (`C#4`, `Gb-1`, etc.) or a valid MIDI note number (0-127), this\n   * method returns an object containing broken down details about the specified note (uppercase\n   * letter, accidental and octave).\n   *\n   * When a number is specified, the translation to note is done using a value of 60 for middle C\n   * (C4 = middle C).\n   *\n   * @param value {string|number} A note identifier A  atring (\"C#4\", \"Gb-1\", etc.) or a MIDI note\n   * number (0-127).\n   *\n   * @returns {{accidental: string, identifier: string, name: string, octave: number }}\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static getNoteDetails(value) {\n\n    if (Number.isInteger(value)) value = this.toNoteIdentifier(value);\n\n    const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)$/i);\n    if (!matches) throw new TypeError(\"Invalid note identifier\");\n\n    const name = matches[1].toUpperCase();\n    const octave = parseInt(matches[3]);\n    let accidental = matches[2].toLowerCase();\n    accidental = accidental === \"\" ? undefined : accidental;\n\n    const fragments = {\n      accidental: accidental,\n      identifier: name + (accidental || \"\") + octave,\n      name: name,\n      octave: octave\n    };\n\n    return fragments;\n\n  }\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n   * single integer or an array of integers.\n   *\n   * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n   * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n   * integers between 1 and 16 are silently ignored.\n   *\n   * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n   * numbers.\n   *\n   * @returns {number[]} An array of 0 or more valid MIDI channel numbers.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static sanitizeChannels(channel) {\n\n    let channels;\n\n    if (WebMidi.validation) {\n\n      if (channel === \"all\") { // backwards-compatibility\n        channels = [\"all\"];\n      } else if (channel === \"none\") { // backwards-compatibility\n        return [];\n      }\n\n    }\n\n    if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  }\n\n  /**\n   * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n   * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n   * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n   * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n   * returned.\n   *\n   * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n   * @return {number|false} A positive number or `false` (if the time cannot be converted)\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toTimestamp(time) {\n\n    let value = false;\n\n    const parsed = parseFloat(time);\n    if (isNaN(parsed)) return false;\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed >= 0) value = WebMidi.time + parsed;\n    } else {\n      if (parsed >= 0) value = parsed;\n    }\n\n    return value;\n\n  }\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a\n   * string containing a note identifier (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer\n   * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings\n   * will be parsed for integer value, if possible.\n   *\n   * If the input is an identifier, the resulting note number is offset by the `octaveOffset`\n   * parameter. For example, if you pass in \"C4\" (note number 60) and the `octaveOffset` value is\n   * -2, the resulting MIDI note number will be 36.\n   *\n   * @param input {string|number} A string or number to extract the MIDI note number from.\n   * @param octaveOffset {number} An integer to offset the octave by\n   *\n   * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n   * successfully be parsed to a note number.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static guessNoteNumber(input, octaveOffset) {\n\n    // Validate and, if necessary, assign default\n    octaveOffset = parseInt(octaveOffset) || 0;\n\n    let output = false;\n\n    // Check input type\n    if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint\n      output = parseInt(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      try {\n        output = this.toNoteNumber(input.trim(), octaveOffset);\n      } catch (e) {\n        return false;\n      }\n    }\n\n    return output;\n\n  }\n\n  /**\n   * Returns an identifier string representing a note name (with optional accidental) followed by an\n   * octave number. The octave can be offset by using the `octaveOffset` parameter.\n   *\n   * @param {number} number The MIDI note number to convert to a note identifier\n   * @param {number} octaveOffset An offset to apply to the resulting octave\n   *\n   * @returns {string}\n   *\n   * @throws RangeError Invalid note number\n   * @throws RangeError Invalid octaveOffset value\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteIdentifier(number, octaveOffset) {\n\n    number = parseInt(number);\n    if (isNaN(number) || number < 0 || number > 127) throw new RangeError(\"Invalid note number\");\n\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid octaveOffset value\");\n\n    const notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    const octave = Math.floor(number / 12 - 1) + octaveOffset;\n    return notes[number % 12] + octave.toString();\n\n  }\n\n  /**\n   * Converts the `input` parameter to a valid [`Note`]{@link Note} object. The input usually is an\n   * unsigned integer (0-127) or a note identifier (`\"C4\"`, `\"G#5\"`, etc.). If the input is a\n   * [`Note`]{@link Note} object, it will be returned as is.\n   *\n   * If the input is a note number or identifier, it is possible to specify options by providing the\n   * `options` parameter.\n   *\n   * @param [input] {number|string|Note}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note}\n   *\n   * @throws TypeError The input could not be parsed to a note\n   *\n   * @since version 3.0.0\n   * @static\n   */\n  static buildNote(input, options= {}) {\n\n    options.octaveOffset = parseInt(options.octaveOffset) || 0;\n\n    // If it's already a Note, we're done\n    if (input instanceof Note) return input;\n\n    let number = this.guessNoteNumber(input, options.octaveOffset);\n\n    if (number === false) { // We use a comparison b/c the note can be 0 (which equates to false)\n      throw new TypeError(`The input could not be parsed as a note (${input})`);\n    }\n\n    // If we got here, we have a proper note number. Before creating the new note, we strip out\n    // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().\n    options.octaveOffset = undefined;\n    return new Note(number, options);\n\n  }\n\n  /**\n   * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a\n   * [`Note`]{@link Note}  object or an array of the previous types, to an array of\n   * [`Note`]{@link Note}  objects.\n   *\n   * [`Note`]{@link Note}  objects are returned as is. For note numbers and identifiers, a\n   * [`Note`]{@link Note} object is created with the options specified. An error will be thrown when\n   * encountering invalid input.\n   *\n   * Note: if both the `attack` and `rawAttack` options are specified, the later has priority. The\n   * same goes for `release` and `rawRelease`.\n   *\n   * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note[]}\n   *\n   * @throws TypeError An element could not be parsed as a note.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static buildNoteArray(notes, options = {}) {\n\n    let result = [];\n    if (!Array.isArray(notes)) notes = [notes];\n\n    notes.forEach(note => {\n      result.push(this.buildNote(note, options));\n    });\n\n    return result;\n\n  }\n\n  /**\n   * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7\n   * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or\n   * smaller than 0.\n   *\n   * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the\n   * input value cannot be converted to an integer, the method returns 0.\n   *\n   * @param value {number} A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   * @static\n   */\n  static from7bitToFloat(value) {\n    if (value === Infinity) value = 127;\n    value = parseInt(value) || 0;\n    return Math.min(Math.max(value / 127, 0), 1);\n  }\n\n  /**\n   * Returns an integer between 0 and 127 which is the result of multiplying the input value by\n   * 127. The input value should be a number between 0 and 1 (inclusively). The returned value is\n   * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.\n   *\n   * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when\n   * the input value cannot be converted to a number, the method returns 0.\n   *\n   * @param value {number} A positive float between 0 and 1 (inclusive)\n   * @returns {number} A number between 0 and 127 (inclusive)\n   * @static\n   */\n  static fromFloatTo7Bit(value) {\n    if (value === Infinity) value = 1;\n    value = parseFloat(value) || 0;\n    return Math.min(Math.max(Math.round(value * 127), 0), 127);\n  }\n\n  /**\n   * Combines and converts MSB and LSB values (0-127) to a float between 0 and 1. The returned value\n   * is within between 0 and 1 even if the result is greater than 1 or smaller than 0.\n   *\n   * @param msb {number} The most significant byte as a integer between 0 and 127.\n   * @param [lsb=0] {number} The least significant byte as a integer between 0 and 127.\n   * @returns {number} A float between 0 and 1.\n   */\n  static fromMsbLsbToFloat(msb, lsb = 0) {\n\n    if (WebMidi.validation) {\n      msb = Math.min(Math.max(parseInt(msb) || 0, 0), 127);\n      lsb = Math.min(Math.max(parseInt(lsb) || 0, 0), 127);\n    }\n\n    const value = ((msb << 7) + lsb) / 16383;\n    return Math.min(Math.max(value, 0), 1);\n\n  }\n\n  /**\n   * Extracts 7bit MSB and LSB values from the supplied float.\n   *\n   * @param value {number} A float between 0 and 1\n   * @returns {{lsb: number, msb: number}}\n   */\n  static fromFloatToMsbLsb(value) {\n\n    if (WebMidi.validation) {\n      value = Math.min(Math.max(parseFloat(value) || 0, 0), 1);\n    }\n\n    const multiplied = Math.round(value * 16383);\n\n    return {\n      msb: multiplied >> 7,\n      lsb: multiplied & 0x7F\n    };\n\n  }\n\n  /**\n   * Returns the supplied MIDI note number offset by the requested octave and semitone values. If\n   * the calculated value is less than 0, 0 will be returned. If the calculated value is more than\n   * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.\n   *\n   * @param number {number} The MIDI note to offset as an integer between 0 and 127.\n   * @param octaveOffset {number} An integer to offset the note by (in octave)\n   * @param octaveOffset {number} An integer to offset the note by (in semitones)\n   * @returns {number} An integer between 0 and 127\n   *\n   * @throws {Error} Invalid note number\n   * @static\n   */\n  static offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      number = parseInt(number);\n      if (isNaN(number)) throw new Error(\"Invalid note number\");\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n  /**\n   * Returns the name of the first property of the supplied object whose value is equal to the one\n   * supplied. If nothing is found, `undefined` is returned.\n   *\n   * @param object {object} The object to look for the property in.\n   * @param value {*} Any value that can be expected to be found in the object's properties.\n   * @returns {string|undefined} The name of the matching property or `undefined` if nothing is\n   * found.\n   * @static\n   */\n  static getPropertyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n  }\n\n  /**\n   * Returns the name of a control change message matching the specified number (0-127). Some valid\n   * control change numbers do not have a specific name or purpose assigned in the MIDI\n   * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).\n   * In these cases, the method returns `controllerXXX` (where XXX is the number).\n   *\n   * @param {number} number An integer (0-127) representing the control change message\n   * @returns {string|undefined} The matching control change name or `undefined` if no match was\n   * found.\n   *\n   * @static\n   */\n  static getCcNameByNumber(number) {\n\n    if (WebMidi.validation) {\n      number = parseInt(number);\n      if (!(number >= 0 && number <= 127)) return undefined;\n    }\n\n    return Enumerations.CONTROL_CHANGE_MESSAGES[number].name;\n\n  }\n\n  /**\n   * Returns the number of a control change message matching the specified name.\n   *\n   * @param {string} name A string representing the control change message\n   * @returns {string|undefined} The matching control change number or `undefined` if no match was\n   * found.\n   *\n   * @since 3.1\n   * @static\n   */\n  static getCcNumberByName(name) {\n    let message = Enumerations.CONTROL_CHANGE_MESSAGES.find(element => element.name === name);\n    if (message) {\n      return message.number;\n    } else {\n      // Legacy (remove in v4)\n      return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[name];\n    }\n  }\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `false`.\n   *\n   * @param {number} number An integer representing the channel mode message (120-127)\n   * @returns {string|false} The name of the matching channel mode or `false` if no match could be\n   * found.\n   *\n   * @since 2.0.0\n   */\n  static getChannelModeByNumber(number) {\n\n    if ( !(number >= 120 && number <= 127) ) return false;\n\n    for (let cm in Enumerations.CHANNEL_MODE_MESSAGES) {\n\n      if (\n        Enumerations.CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === Enumerations.CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n    return false;\n\n  }\n\n  /**\n   * Indicates whether the execution environment is Node.js (`true`) or not (`false`)\n   * @type {boolean}\n   */\n  static get isNode() {\n    return typeof process !== \"undefined\" &&\n      process.versions != null &&\n      process.versions.node != null;\n  }\n\n  /**\n   * Indicates whether the execution environment is a browser (`true`) or not (`false`)\n   * @type {boolean}\n   */\n  static get isBrowser() {\n    return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/src/djipevents.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are\n * provided by an [`Output`](Output) port which, itself, is made available by a device. The\n * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated\n * directly.\n *\n * All 16 `OutputChannel` objects can be found inside the parent output's\n * [`channels`]{@link Output#channels} property.\n *\n * @param {Output} output The [`Output`](Output) this channel belongs to.\n * @param {number} number The MIDI channel number (`1` - `16`).\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class OutputChannel extends EventEmitter {\n\n  /**\n   * Creates an `OutputChannel` object.\n   *\n   * @param {Output} output The [`Output`](Output) this channel belongs to.\n   * @param {number} number The MIDI channel number (`1` - `16`).\n   */\n  constructor(output, number) {\n\n    super();\n\n    /**\n     * @type {Output}\n     * @private\n     */\n    this._output = output;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Unlinks the MIDI subsystem, removes all listeners attached to the channel and nulls the channel\n   * number. This method is mostly for internal use. It has not been prefixed with an underscore\n   * since it is called by other objects such as the `Output` object.\n   *\n   * @private\n   */\n  destroy() {\n    this._output = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this.removeListener();\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8-bit unsigned integers (`0` - `225`),\n   * a\n   * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a [`Message`](Message) object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n   * [`sendControlChange()`](#sendControlChange), etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} A `Message` object, an array of 8-bit unsigned\n   * integers or a `Uint8Array` object (not available in Node.js) containing the message bytes.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @throws {RangeError} Data bytes must be integers between 0 and 255.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  send(message, options = {time: 0}) {\n    this.output.send(message, options);\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n   * aftertouch. For a channel-wide aftertouch message, use\n   * [`sendChannelAftertouch()`]{@link #sendChannelAftertouch}.\n   *\n   * @param target {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n   * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n   * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n   * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n   * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n   * `127`).\n   *\n   * When using a note identifier, the octave value will be offset by the local\n   * [`octaveOffset`](#octaveOffset) and by\n   * [`Output.octaveOffset`](Output#octaveOffset) and [`WebMidi.octaveOffset`](WebMidi#octaveOffset)\n   * (if those values are not `0`). When using a key number, `octaveOffset` values are ignored.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n   * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n   * the pressure is defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid key aftertouch value.\n   */\n  sendKeyAftertouch(target, pressure, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy support\n      if (options.useRawValue) options.rawValue = options.useRawValue;\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid key aftertouch value.\");\n      }\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\"Key aftertouch raw value must be an integer between 0 and 127.\");\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Key aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    // Normalize pressure to integer\n    if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure);\n\n    // Plot total offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    // Make sure we are dealing with an array\n    if (!Array.isArray(target)) target = [target];\n\n    Utilities.buildNoteArray(target).forEach(n => {\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.keyaftertouch << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          pressure\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n   * change message to send can be specified numerically (`0` to `127`) or by using one of the\n   * following common names:\n   *\n   * | Number | Name                          |\n   * |--------|-------------------------------|\n   * | 0      |`bankselectcoarse`             |\n   * | 1      |`modulationwheelcoarse`        |\n   * | 2      |`breathcontrollercoarse`       |\n   * | 4      |`footcontrollercoarse`         |\n   * | 5      |`portamentotimecoarse`         |\n   * | 6      |`dataentrycoarse`              |\n   * | 7      |`volumecoarse`                 |\n   * | 8      |`balancecoarse`                |\n   * | 10     |`pancoarse`                    |\n   * | 11     |`expressioncoarse`             |\n   * | 12     |`effectcontrol1coarse`         |\n   * | 13     |`effectcontrol2coarse`         |\n   * | 18     |`generalpurposeslider3`        |\n   * | 19     |`generalpurposeslider4`        |\n   * | 32     |`bankselectfine`               |\n   * | 33     |`modulationwheelfine`          |\n   * | 34     |`breathcontrollerfine`         |\n   * | 36     |`footcontrollerfine`           |\n   * | 37     |`portamentotimefine`           |\n   * | 38     |`dataentryfine`                |\n   * | 39     |`volumefine`                   |\n   * | 40     |`balancefine`                  |\n   * | 42     |`panfine`                      |\n   * | 43     |`expressionfine`               |\n   * | 44     |`effectcontrol1fine`           |\n   * | 45     |`effectcontrol2fine`           |\n   * | 64     |`holdpedal`                    |\n   * | 65     |`portamento`                   |\n   * | 66     |`sustenutopedal`               |\n   * | 67     |`softpedal`                    |\n   * | 68     |`legatopedal`                  |\n   * | 69     |`hold2pedal`                   |\n   * | 70     |`soundvariation`               |\n   * | 71     |`resonance`                    |\n   * | 72     |`soundreleasetime`             |\n   * | 73     |`soundattacktime`              |\n   * | 74     |`brightness`                   |\n   * | 75     |`soundcontrol6`                |\n   * | 76     |`soundcontrol7`                |\n   * | 77     |`soundcontrol8`                |\n   * | 78     |`soundcontrol9`                |\n   * | 79     |`soundcontrol10`               |\n   * | 80     |`generalpurposebutton1`        |\n   * | 81     |`generalpurposebutton2`        |\n   * | 82     |`generalpurposebutton3`        |\n   * | 83     |`generalpurposebutton4`        |\n   * | 91     |`reverblevel`                  |\n   * | 92     |`tremololevel`                 |\n   * | 93     |`choruslevel`                  |\n   * | 94     |`celestelevel`                 |\n   * | 95     |`phaserlevel`                  |\n   * | 96     |`dataincrement`                |\n   * | 97     |`datadecrement`                |\n   * | 98     |`nonregisteredparametercoarse` |\n   * | 99     |`nonregisteredparameterfine`   |\n   * | 100    |`registeredparametercoarse`    |\n   * | 101    |`registeredparameterfine`      |\n   * | 120    |`allsoundoff`                  |\n   * | 121    |`resetallcontrollers`          |\n   * | 122    |`localcontrol`                 |\n   * | 123    |`allnotesoff`                  |\n   * | 124    |`omnimodeoff`                  |\n   * | 125    |`omnimodeon`                   |\n   * | 126    |`monomodeon`                   |\n   * | 127    |`polymodeon`                   |\n   *\n   * As you can see above, not all control change message have a matching name. This does not mean\n   * you cannot use the others. It simply means you will need to use their number\n   * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are\n   * usually reserved for *channel mode* messages. See\n   * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.\n   *\n   * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n   * Control Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1\n   * (`modulationwheelcoarse`) can be accompanied by a second control change message for\n   * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB\n   * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the\n   * second parameter.\n   *\n   * @param {number|string} controller The MIDI controller name or number (`0` - `127`).\n   *\n   * @param {number|number[]} value The value to send (0-127). You can also use a two-position array\n   * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second\n   * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first\n   * controller)\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   * @throws {TypeError} The value array must have a length of 2.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n  sendControlChange(controller, value, options = {}) {\n\n    if (typeof controller === \"string\") {\n      controller = Utilities.getCcNumberByName(controller);\n    }\n\n    if (!Array.isArray(value)) value = [value];\n\n    if (WebMidi.validation) {\n\n      if (controller === undefined) {\n        throw new TypeError(\n          \"Control change must be identified with a valid name or an integer between 0 and 127.\"\n        );\n      }\n\n      if (!Number.isInteger(controller) || !(controller >= 0 && controller <= 127)) {\n        throw new TypeError(\"Control change number must be an integer between 0 and 127.\");\n      }\n\n      value = value.map(item => {\n        const output = Math.min(Math.max(parseInt(item), 0), 127);\n        if (isNaN(output)) throw new TypeError(\"Values must be integers between 0 and 127\");\n        return output;\n      });\n\n      if (value.length === 2 && controller >= 32) {\n        throw new TypeError(\"To use a value array, the controller must be between 0 and 31\");\n      }\n\n    }\n\n    value.forEach((item, index) => {\n\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n          controller + (index * 32),\n          value[index]\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Selects a MIDI non-registered parameter so it is affected by upcoming data entry, data\n   * increment and data decrement messages.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes that identify\n   * the registered parameter. The NRPN MSB (99 or 0x63) is a position 0. The NRPN LSB (98 or 0x62)\n   * is at position 1.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectNonRegisteredParameter(parameter, options = {}) {\n\n    // parameter[0] = Math.floor(parameter[0]);\n    // if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n    //   throw new RangeError(\"The control63 value must be between 0 and 127.\");\n    // }\n    //\n    // parameter[1] = Math.floor(parameter[1]);\n    // if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n    //   throw new RangeError(\"The control62 value must be between 0 and 127.\");\n    // }\n\n    this.sendControlChange(0x63, parameter[0], options);\n    this.sendControlChange(0x62, parameter[1], options);\n\n    return this;\n\n  }\n\n  /**\n   * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n   * entry, data increment and data decrement messages.\n   *\n   * Current best practice recommends doing that after each call to\n   * [_setCurrentParameter()]{@link #_setCurrentParameter}.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Deselects the currently active MIDI non-registered parameter so it is no longer affected by\n   * data entry, data increment and data decrement messages.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectNonRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Selects a MIDI registered parameter so it is affected by upcoming data entry, data increment\n   * and data decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {number[]} A two-position array of integers specifying the two control bytes\n   * (0x65, 0x64) that identify the registered parameter. The integers must be between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectRegisteredParameter(parameter, options = {}) {\n    this.sendControlChange(0x65, parameter[0], options);\n    this.sendControlChange(0x64, parameter[1], options);\n    return this;\n  }\n\n  /**\n   * Sets the value of the currently selected MIDI registered parameter.\n   *\n   * @private\n   *\n   * @param data {number|number[]}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _setCurrentParameter(data, options = {}) {\n\n    data = [].concat(data);\n\n    // MSB\n    // data[0] = parseInt(data[0]);\n    // if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n    this.sendControlChange(0x06, data[0], options);\n    // } else {\n    //   throw new RangeError(\"The msb value must be between 0 and 127.\");\n    // }\n\n    if (data.length < 2) return this;\n\n    // LSB\n    // data[1] = parseInt(data[1]);\n\n    // if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n    this.sendControlChange(0x26, data[1], options);\n    // } else {\n    //   throw new RangeError(\"The lsb value must be between 0 and 127.\");\n    // }\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnDecrement(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];\n\n    if (WebMidi.validation) {\n\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x61, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnIncrement(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];\n\n    if (WebMidi.validation) {\n\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x60, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n   * can be a single value or an array of the following valid values:\n   *\n   *  - A [`Note`]{@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes. If a\n   * `duration` is set in the `options` parameter or in the [`Note`]{@link Note} object's\n   * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [`stopNote()`]{@link OutputChannel#stopNote} or\n   * [`sendNoteOff()`]{@link OutputChannel#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n   * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n   * parameter.\n   *\n   * **Note**: per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n   * `F-1`, `Db7`), a [`Note`]{@link Note} object or an array of the previous types. When using a\n   * note identifier, the octave range must be between `-1` and `9`. The lowest note is `C-1` (MIDI\n   * note number `0`) and the highest note is `G9` (MIDI note number `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration] A positive decimal number larger than `0` representing the\n   * number of milliseconds to wait before sending a **note off** message. If invalid or left\n   * undefined, only a **note on** message will be sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of 64.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of 64. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  playNote(note, options = {}) {\n\n    // Send note on and, optionally, note off message (if duration is a positive number)\n    this.sendNoteOn(note, options);\n\n    const notes = Array.isArray(note) ? note : [note];\n\n    for(let note of notes) {\n      if (parseInt(note.duration) > 0) {\n        const noteOffOptions = {\n          time: (Utilities.toTimestamp(options.time) || WebMidi.time) + parseInt(note.duration),\n          release: note.release,\n          rawRelease: note.rawRelease\n        };\n        this.sendNoteOff(note, noteOffOptions);\n      } else if (parseInt(options.duration) > 0) {\n        const noteOffOptions = {\n          time: (Utilities.toTimestamp(options.time) || WebMidi.time) + parseInt(options.duration),\n          release: options.release,\n          rawRelease: options.rawRelease\n        };\n        this.sendNoteOff(note, noteOffOptions);\n      }\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`]{@link Note} object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the release velocity defined in the\n   * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n   * parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types. When using a note name, octave\n   * range must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOff(note, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (\n        options.rawRelease != undefined &&\n        !(options.rawRelease >= 0 && options.rawRelease <= 127)\n      ) {\n        throw new RangeError(\"The 'rawRelease' option must be an integer between 0 and 127\");\n      }\n\n      if (options.release != undefined && !(options.release >= 0 && options.release <= 1)) {\n        throw new RangeError(\"The 'release' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawRelease = options.velocity;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\");\n      }\n      if (options.velocity) {\n        options.release = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawRelease != undefined) {\n      nVelocity = options.rawRelease;\n    } else {\n      if (!isNaN(options.release)) nVelocity = Math.round(options.release * 127);\n    }\n\n    // Plot total octave offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawRelease: parseInt(nVelocity)}).forEach(n => {\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.noteoff << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawRelease,\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number. The first parameter is the\n   * note to stop. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  stopNote(note, options = {}) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Sends a **note on** message for the specified note(s) on the channel. The first parameter is\n   * the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A [`Note`]{@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   *  When passing a [`Note`]{@link Note}object or a note name, the `octaveOffset` will be applied.\n   *  This is not the case when using a note number. In this case, we assume you know exactly which\n   *  MIDI note number should be sent out.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the attack velocity defined in the\n   * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n   * parameter. Also, the `duration` is ignored. If you want to also send a **note off** message,\n   * use the [`playNote()`]{@link #playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (options.rawAttack != undefined && !(options.rawAttack >= 0 && options.rawAttack <= 127)) {\n        throw new RangeError(\"The 'rawAttack' option must be an integer between 0 and 127\");\n      }\n\n      if (options.attack != undefined && !(options.attack >= 0 && options.attack <= 1)) {\n        throw new RangeError(\"The 'attack' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawAttack = options.velocity;\n        options.rawRelease = options.release;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.\");\n      }\n      if (options.velocity) {\n        options.attack = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawAttack != undefined) {\n      nVelocity = options.rawAttack;\n    } else {\n      if (!isNaN(options.attack)) nVelocity = Math.round(options.attack * 127);\n    }\n\n    // Plot total octave offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.noteon << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawAttack\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n   * numerically or by using one of the following common names:\n   *\n   * |  Type                |Number| Shortcut Method                                               |\n   * | ---------------------|------|-------------------------------------------------------------- |\n   * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n   * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n   * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n   * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n   * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n   * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n   * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n   * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n   *\n   * **Note**: as you can see above, to make it easier, all channel mode messages also have a matching\n   * helper method.\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * @param {number|string} command The numerical identifier of the channel mode message (integer\n   * between `120` and `127`) or its name as a string.\n   *\n   * @param {number} [value=0] The value to send (integer between `0` - `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendChannelMode(command, value = 0, options = {}) {\n\n    // Normalize command to integer\n    if (typeof command === \"string\") command = Enumerations.CHANNEL_MODE_MESSAGES[command];\n\n    if (WebMidi.validation) {\n\n      if (command === undefined) {\n        throw new TypeError(\"Invalid channel mode message name or number.\");\n      }\n\n      if (isNaN(command) || !(command >= 120 && command <= 127)) {\n        throw new TypeError(\"Invalid channel mode message number.\");\n      }\n\n      if (isNaN(parseInt(value)) || value < 0 || value > 127) {\n        throw new RangeError(\"Value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n        command,\n        value\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n   * messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendOmniMode(state, options = {}) {\n\n    if (state === undefined || state) {\n      this.sendChannelMode(\"omnimodeon\", 0, options);\n    } else {\n      this.sendChannelMode(\"omnimodeoff\", 0, options);\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n   * use [`sendKeyAftertouch()`]{@link #sendKeyAftertouch}.\n   *\n   * @param [pressure] {number} The pressure level (between `0` and `1`). If the `rawValue` option\n   * is set to `true`, the pressure can be defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid channel aftertouch value.\n   */\n  sendChannelAftertouch(pressure, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid channel aftertouch value.\");\n      }\n\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\n            \"Channel aftertouch raw value must be an integer between 0 and 127.\")\n          ;\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Channel aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    // Normalize pressure to integer\n    if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure);\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.channelaftertouch << 4) + (this.number - 1),\n        Math.round(pressure)\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n   * and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendMasterTuning(value, options = {}) {\n\n    // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n\n    value = parseFloat(value) || 0.0;\n\n    if (WebMidi.validation) {\n\n      if (!(value > -65 && value < 64)) {\n        throw new RangeError(\n          \"The value must be a decimal number larger than -65 and smaller than 64.\"\n        );\n      }\n\n    }\n\n    let coarse = Math.floor(value) + 64;\n    let fine = value - Math.floor(value);\n\n    // Calculate MSB and LSB for fine adjustment (14bit resolution)\n    fine = Math.round((fine + 1) / 2 * 16383);\n    let msb = (fine >> 7) & 0x7F;\n    let lsb = fine & 0x7F;\n\n    this.sendRpnValue(\"channelcoarsetuning\", coarse, options);\n    this.sendRpnValue(\"channelfinetuning\", [msb, lsb], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n   * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n   * specifying both parameters at the same time.\n   *\n   * @param {number} semitones The desired adjustment value in semitones (integer between 0 and\n   * 127).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendModulationRange(semitones, cents, options = {}) {\n\n    // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n    // when passing a single argument, semitones and cents shoud be combined\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!(cents == undefined) && (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127))) {\n        throw new RangeError(\"If specified, the cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    // Default value for cents\n    if (!(cents >= 0 && cents <= 127)) cents = 0;\n\n    this.sendRpnValue(\"modulationrange\", [semitones, cents], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n   * in a two-position array specifying the values of the two control bytes. The value is specified\n   * by passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].sendNrpnValue([1, 8], 123);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].sendNrpnValue([2, 63], [0, 10]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param nrpn {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNrpnValue(nrpn, data, options = {}) {\n\n    data = [].concat(data);\n\n    if (WebMidi.validation) {\n\n      if (!Array.isArray(nrpn) || !Number.isInteger(nrpn[0]) || !Number.isInteger(nrpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(nrpn[0] >= 0 && nrpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the NRPN must be between 0 and 127.\");\n      }\n\n      if (!(nrpn[1] >= 0 && nrpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the NRPN must be between 0 and 127.\");\n      }\n\n      data.forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the NRPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectNonRegisteredParameter(nrpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectNonRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message at the scheduled time. The resulting bend is relative to\n   * the pitch bend range that has been defined. The range can be set with\n   * [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n   * bend range has been set to 12 semitones, using a bend value of -1 will bend the note 1 octave\n   * below its nominal value.\n   *\n   * @param {number|number[]} [value] The intensity of the bend (between -1.0 and 1.0). A value of\n   * zero means no bend. If the `rawValue` option is set to `true`, the intensity of the bend can be\n   * defined by either using a single integer between 0 and 127 (MSB) or an array of two integers\n   * between 0 and 127 representing, respectively, the MSB (most significant byte) and the LSB\n   * (least significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value\n   * lower than `64` bends downwards while a value higher than `64` bends upwards. The LSB is\n   * expressed in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n   * an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPitchBend(value, options = {}) {\n\n    // @todo standardize the way msb/lsb are passed in\n\n    if (WebMidi.validation) {\n\n      if (options.rawValue && Array.isArray(value)) {\n\n        if (!(value[0] >= 0 && value[0] <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n        if (!(value[1] >= 0 && value[1] <= 127)) {\n          throw new RangeError(\"The pitch bend LSB must be an integer between 0 and 127.\");\n        }\n\n      } else if (options.rawValue && !Array.isArray(value)) {\n\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      } else {\n\n        if (isNaN(value) || value === null) {\n          throw new RangeError(\"Invalid pitch bend value.\");\n        }\n\n        if (!(value >= -1 && value <= 1)) {\n          throw new RangeError(\"The pitch bend value must be a float between -1 and 1.\");\n        }\n\n      }\n\n    }\n\n    let msb = 0;\n    let lsb = 0;\n\n    // Calculate MSB and LSB for both scenarios\n    if (options.rawValue && Array.isArray(value)) {\n      msb = value[0];\n      lsb = value[1];\n    } else if (options.rawValue && !Array.isArray(value)) {\n      msb = value;\n    } else {\n      const result = Utilities.fromFloatToMsbLsb((value + 1) / 2); // b/c value is -1 to 1\n      msb = result.msb;\n      lsb = result.lsb;\n    }\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.pitchbend << 4) + (this.number - 1),\n        lsb,\n        msb\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **pitch bend range** message at the scheduled time to adjust the range used by the\n   * pitch bend lever. The range is specified by using the `semitones` and `cents` parameters. For\n   * example, setting the `semitones` parameter to `12` means that the pitch bend range will be 12\n   * semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The semitones value must be an integer between 0 and 127.\n   * @throws {RangeError} The cents value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPitchBendRange(semitones, cents, options = {}) {\n\n    // @todo use single value as parameter or pair of msb/lsb\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127)) {\n        throw new RangeError(\"The cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"pitchbendrange\", [semitones, cents], options);\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message at the scheduled time.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   */\n  sendProgramChange(program, options = {}) {\n\n    program = parseInt(program) || 0;\n\n    if (WebMidi.validation) {\n\n      if (!(program >= 0 && program <= 127)) {\n        throw new RangeError(\"The program number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.programchange << 4) + (this.number - 1),\n        program\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them:\n   *\n   * | Numbers      | Function                 |\n   * |--------------|--------------------------|\n   * | (0x00, 0x00) | `pitchbendrange`         |\n   * | (0x00, 0x01) | `channelfinetuning`      |\n   * | (0x00, 0x02) | `channelcoarsetuning`    |\n   * | (0x00, 0x03) | `tuningprogram`          |\n   * | (0x00, 0x04) | `tuningbank`             |\n   * | (0x00, 0x05) | `modulationrange`        |\n   * | (0x3D, 0x00) | `azimuthangle`           |\n   * | (0x3D, 0x01) | `elevationangle`         |\n   * | (0x3D, 0x02) | `gain`                   |\n   * | (0x3D, 0x03) | `distanceratio`          |\n   * | (0x3D, 0x04) | `maximumdistance`        |\n   * | (0x3D, 0x05) | `maximumdistancegain`    |\n   * | (0x3D, 0x06) | `referencedistanceratio` |\n   * | (0x3D, 0x07) | `panspreadangle`         |\n   * | (0x3D, 0x08) | `rollangle`              |\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * @param rpn {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnValue(rpn, data, options = {}) {\n\n    if (!Array.isArray(rpn)) rpn = Enumerations.REGISTERED_PARAMETERS[rpn];\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(rpn[0]) || !Number.isInteger(rpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(rpn[0] >= 0 && rpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the RPN must be between 0 and 127.\");\n      }\n\n      if (!(rpn[1] >= 0 && rpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the RPN must be between 0 and 127.\");\n      }\n\n      [].concat(data).forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the RPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectRegisteredParameter(rpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning bank (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendTuningBank(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The tuning bank number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"tuningbank\", value, options);\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning program (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendTuningProgram(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The tuning program number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"tuningprogram\", value, options);\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendLocalControl(state, options = {}) {\n    if (state) {\n      return this.sendChannelMode(\"localcontrol\", 127, options);\n    } else {\n      return this.sendChannelMode(\"localcontrol\", 0, options);\n    }\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [`sendAllSoundOff()`]{@link #sendAllSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendAllNotesOff(options = {}) {\n    return this.sendChannelMode(\"allnotesoff\", 0, options);\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendAllSoundOff(options = {}) {\n    return this.sendChannelMode(\"allsoundoff\", 0, options);\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendResetAllControllers(options = {}) {\n    return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPolyphonicMode(mode, options = {}) {\n    if (mode === \"mono\") {\n      return this.sendChannelMode(\"monomodeon\", 0, options);\n    } else {\n      return this.sendChannelMode(\"polymodeon\", 0, options);\n    }\n  }\n\n  /**\n   * An integer to offset the reported octave of outgoing note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined in\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) and with the parent value defined in\n   * [`Output.octaveOffset`]{@link Output#octaveOffset}.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The parent [`Output`]{@link Output} this channel belongs to.\n   * @type {Output}\n   * @since 3.0\n   */\n  get output() {\n    return this._output;\n  }\n\n  /**\n   * This channel's MIDI number (`1` - `16`).\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/src/djipevents.js\";\nimport {OutputChannel} from \"./OutputChannel.js\";\nimport {Enumerations, Message, WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).\n * A port is made available by a MIDI device. A MIDI device can advertise several input and output\n * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)\n * property.\n *\n * The `Output` object is automatically instantiated by the library according to the host's MIDI\n * subsystem and should not be directly instantiated.\n *\n * You can access all available `Output` objects by referring to the\n * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as\n * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or\n * [`WebMidi.getOutputById()`](WebMidi#getOutputById).\n *\n * @fires Output#opened\n * @fires Output#disconnected\n * @fires Output#closed\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nexport class Output extends EventEmitter {\n\n  /**\n   * Creates an `Output` object.\n   *\n   * @param {MIDIOutput} midiOutput [`MIDIOutput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput)\n   * object as provided by the MIDI subsystem.\n   */\n  constructor(midiOutput) {\n\n    super();\n\n    /**\n     * A reference to the `MIDIOutput` object\n     * @type {MIDIOutput}\n     * @private\n     */\n    this._midiOutput = midiOutput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 [`OutputChannel`]{@link OutputChannel} objects available provided by\n     * this `Output`. The channels are numbered 1 through 16.\n     *\n     * @type {OutputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);\n\n    this._midiOutput.onstatechange = this._onStateChange.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n   * subsystem is unlinked.\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    if (this._midiOutput) this._midiOutput.onstatechange = null;\n    await this.close();\n    this._midiOutput = null;\n  }\n\n  /**\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Output} has been opened by calling the\n       * [open()]{@link Output#open} method.\n       *\n       * @event Output#opened\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {Output} port The port that was opened\n       */\n      event.type = \"opened\";\n      event.target = this;\n      event.port = event.target; // for consistency\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Output} has been closed by calling the\n       * [close()]{@link Output#close} method.\n       *\n       * @event Output#closed\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {Output} port The port that was closed\n       */\n      event.type = \"closed\";\n      event.target = this;\n      event.port = event.target; // for consistency\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Output#disconnected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {object} port Object with properties describing the {@link Output} that was\n       * disconnected. This is not the actual `Output` as it is no longer available.\n       */\n      event.type = \"disconnected\";\n      event.port = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Opens the output for usage. When the library is enabled, all ports are automatically opened.\n   * This method is only useful for ports that have been manually closed.\n   *\n   * @returns {Promise<Output>} The promise is fulfilled with the `Output` object.\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n    // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n    // send.\n    try {\n      await this._midiOutput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n   * until the output is opened again by calling [`open()`]{@link #open}. You can check\n   * the connection status by looking at the [`connection`]{@link #connection} property.\n   *\n   * @returns {Promise<void>}\n   */\n  async close() {\n\n    // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n    // 'closed' event.\n    if (this._midiOutput) {\n      await this._midiOutput.close();\n    } else {\n      await Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n   * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a [`Message`](Message) object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n   * [`sendControlChange()`](#sendControlChange), etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`\n   * object (not available in Node.js) containing the message bytes or a `Message` object.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @license Apache-2.0\n   */\n  send(message, options = {time: 0}, legacy = 0) {\n\n    // If a Message object is passed in we extract the message data (the jzz plugin used on Node.js\n    // does not support using Uint8Array).\n    if (message instanceof Message) {\n      message = Utilities.isNode ? message.data : message.rawData;\n    }\n\n    // If the data is a Uint8Array and we are on Node, we must convert it to array so it works with\n    // the jzz module.\n    if (message instanceof Uint8Array && Utilities.isNode) {\n      message = Array.from(message);\n    }\n\n    // Validation\n    if (WebMidi.validation) {\n\n      // If message is neither an array nor a Uint8Array, then we are in legacy mode\n      if (!Array.isArray(message) && !(message instanceof Uint8Array)) {\n        message = [message];\n        if (Array.isArray(options)) message = message.concat(options);\n        options = isNaN(legacy) ? {time: 0} : {time: legacy};\n      }\n\n      if (!(parseInt(message[0]) >= 128 && parseInt(message[0]) <= 255)) {\n        throw new RangeError(\"The first byte (status) must be an integer between 128 and 255.\");\n      }\n\n      message.slice(1).forEach(value => {\n        value = parseInt(value);\n        if (!(value >= 0 && value <= 255)) {\n          throw new RangeError(\"Data bytes must be integers between 0 and 255.\");\n        }\n      });\n\n      if (!options) options = {time: 0};\n\n    }\n\n    // Send message and return `Output` for chaining\n    this._midiOutput.send(message, Utilities.toTimestamp(options.time));\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI [**system exclusive**]{@link\n    * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n   * (*sysex*) message. There are two categories of system exclusive messages: manufacturer-specific\n   * messages and universal messages. Universal messages are further divided into three subtypes:\n   *\n   *   * Universal non-commercial (for research and testing): `0x7D`\n   *   * Universal non-realtime: `0x7E`\n   *   * Universal realtime: `0x7F`\n   *\n   * The method's first parameter (`identification`) identifies the type of message. If the value of\n   * `identification` is `0x7D` (125), `0x7E` (126) or `0x7F` (127), the message will be identified\n   * as a **universal non-commercial**, **universal non-realtime** or **universal realtime** message\n   * (respectively).\n   *\n   * If the `identification` value is an array or an integer between 0 and 124, it will be used to\n   * identify the manufacturer targeted by the message. The *MIDI Manufacturers Association*\n   * maintains a full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n   *\n   * The `data` parameter should only contain the data of the message. When sending out the actual\n   * MIDI message, WEBMIDI.js will automatically prepend the data with the **sysex byte** (`0xF0`)\n   * and the identification byte(s). It will also automatically terminate the message with the\n   * **sysex end byte** (`0xF7`).\n   *\n   * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n   * do so, you must set the `sysex` option to `true` when calling\n   * [`WebMidi.enable()`]{@link WebMidi#enable}:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *   .then(() => console.log(\"System exclusive messages are enabled\");\n   * ```\n   *\n   * ##### Examples of manufacturer-specific system exclusive messages\n   *\n   * If you want to send a sysex message to a Korg device connected to the first output, you would\n   * use the following code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   * In this case `0x42` is the ID of the manufacturer (Korg) and `[0x1, 0x2, 0x3, 0x4, 0x5]` is the\n   * data being sent.\n   *\n   * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n   * Therefore, the code above is equivalent to this code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n   * ```\n   *\n   * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n   * as the first parameter. For example, to send the same sysex message to a\n   * *Native Instruments* device:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   *\n   * There is no limit for the length of the data array. However, it is generally suggested to keep\n   * system exclusive messages to 64Kb or less.\n   *\n   * ##### Example of universal system exclusive message\n   *\n   * If you want to send a universal sysex message, simply assign the correct identification number\n   * in the first parameter. Number `0x7D` (125) is for non-commercial, `0x7E` (126) is for\n   * non-realtime and `0x7F` (127) is for realtime.\n   *\n   * So, for example, if you wanted to send an identity request non-realtime message (`0x7E`), you\n   * could use the following:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x7E, [0x7F, 0x06, 0x01]);\n   * ```\n   *\n   * For more details on the format of universal messages, consult the list of\n   * [universal sysex messages](https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages).\n   *\n   * @param {number|number[]} identification An unsigned integer or an array of three unsigned\n   * integers between `0` and `127` that either identify the manufacturer or sets the message to be\n   * a **universal non-commercial message** (`0x7D`), a **universal non-realtime message** (`0x7E`)\n   * or a **universal realtime message** (`0x7F`). The *MIDI Manufacturers Association* maintains a\n   * full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n   *\n   * @param {number[]|Uint8Array} [data] A `Uint8Array` or an array of unsigned integers between `0`\n   * and `127`. This is the data you wish to transfer.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n   * not allowed.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n   * than 0xFF.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendSysex(identification, data= [], options = {}) {\n\n    identification = [].concat(identification);\n\n    // Check if data is Uint8Array\n    if (data instanceof Uint8Array) {\n      const merged = new Uint8Array(1 + identification.length + data.length + 1);\n      merged[0] = Enumerations.SYSTEM_MESSAGES.sysex;\n      merged.set(Uint8Array.from(identification), 1);\n      merged.set(data, 1 + identification.length);\n      merged[merged.length - 1] = Enumerations.SYSTEM_MESSAGES.sysexend;\n      this.send(merged, {time: options.time});\n    } else {\n      const merged = identification.concat(data, Enumerations.SYSTEM_MESSAGES.sysexend);\n      this.send([Enumerations.SYSTEM_MESSAGES.sysex].concat(merged), {time: options.time});\n    }\n\n    return this;\n\n  };\n\n  /**\n   * Clears all MIDI messages that have been queued and scheduled but not yet sent.\n   *\n   * **Warning**: this method is defined in the\n   * [Web MIDI API specification](https://www.w3.org/TR/webmidi/#MIDIOutput) but has not been\n   * implemented by all browsers yet. You can follow\n   * [this issue](https://github.com/djipco/webmidi/issues/52) for more info.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  clear() {\n\n    if (this._midiOutput.clear) {\n\n      this._midiOutput.clear();\n\n    } else {\n\n      if (WebMidi.validation) {\n        console.warn(\n          \"The 'clear()' method has not yet been implemented in your environment.\"\n        );\n      }\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n   * on the data. It is up to the developer to format the data according to the\n   * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n   *\n   * @param value {number} The quarter frame message content (integer between 0 and 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendTimecodeQuarterFrame(value, options = {}) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The value must be an integer between 0 and 127.\");\n      }\n    }\n\n    this.send(\n      [\n        Enumerations.SYSTEM_MESSAGES.timecode,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **song position** MIDI message. The value is expressed in MIDI beats (between `0` and\n   * `16383`) which are 16th note. Position `0` is always the start of the song.\n   *\n   * @param {number} [value=0] The MIDI beat to cue to (integer between `0` and `16383`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendSongPosition(value = 0, options = {}) {\n\n    // @todo allow passing in 2-entries array for msb/lsb\n\n    value = Math.floor(value) || 0;\n\n    var msb = (value >> 7) & 0x7F;\n    var lsb = value & 0x7F;\n\n    this.send(\n      [\n        Enumerations.SYSTEM_MESSAGES.songposition,\n        msb,\n        lsb\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **song select** MIDI message.\n   *\n   * @param {number} [value=0] The number of the song to select (integer between `0` and `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws The song number must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendSongSelect(value = 0, options = {}) {\n\n    if (WebMidi.validation) {\n\n      value = parseInt(value);\n\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The program value must be between 0 and 127\");\n      }\n\n    }\n\n    this.send(\n      [\n        Enumerations.SYSTEM_MESSAGES.songselect,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **tune request** real-time message.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuneRequest(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.tunerequest],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **clock** real-time message. According to the standard, there are 24 MIDI clocks\n   * for every quarter note.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendClock(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.clock],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n   * song at beat 0. To start playback elsewhere in the song, use the\n   * [`sendContinue()`]{@link #sendContinue} method.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStart(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.start],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **continue** real-time message. This resumes song playback where it was previously\n   * stopped or where it was last cued with a song position message. To start playback from the\n   * start, use the [`sendStart()`]{@link Output#sendStart}` method.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendContinue(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.continue],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **stop** real-time message. This tells the device connected to this output to stop\n   * playback immediately (or at the scheduled time, if specified).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStop(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.stop],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **active sensing** real-time message. This tells the device connected to this port\n   * that the connection is still good. Active sensing messages are often sent every 300 ms if there\n   * was no other activity on the MIDI port.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendActiveSensing(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.activesensing],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset** real-time message. This tells the device connected to this output that it\n   * should reset itself to a default state.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendReset(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.reset],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendTuningRequest(options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\"\n      );\n    }\n\n    return this.sendTuneRequest(options);\n\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n   * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n   * [`setChannelAftertouch()`]{@link #setChannelAftertouch}.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n   * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n   * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n   * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n   * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n   * `127`).\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendKeyAftertouch(note, pressure, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendKeyAftertouch(note, pressure, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n   * control change message to send can be specified numerically (0-127) or by using one of the\n   * following common names:\n   *\n   * | Number | Name                          |\n   * |--------|-------------------------------|\n   * | 0      |`bankselectcoarse`             |\n   * | 1      |`modulationwheelcoarse`        |\n   * | 2      |`breathcontrollercoarse`       |\n   * | 4      |`footcontrollercoarse`         |\n   * | 5      |`portamentotimecoarse`         |\n   * | 6      |`dataentrycoarse`              |\n   * | 7      |`volumecoarse`                 |\n   * | 8      |`balancecoarse`                |\n   * | 10     |`pancoarse`                    |\n   * | 11     |`expressioncoarse`             |\n   * | 12     |`effectcontrol1coarse`         |\n   * | 13     |`effectcontrol2coarse`         |\n   * | 18     |`generalpurposeslider3`        |\n   * | 19     |`generalpurposeslider4`        |\n   * | 32     |`bankselectfine`               |\n   * | 33     |`modulationwheelfine`          |\n   * | 34     |`breathcontrollerfine`         |\n   * | 36     |`footcontrollerfine`           |\n   * | 37     |`portamentotimefine`           |\n   * | 38     |`dataentryfine`                |\n   * | 39     |`volumefine`                   |\n   * | 40     |`balancefine`                  |\n   * | 42     |`panfine`                      |\n   * | 43     |`expressionfine`               |\n   * | 44     |`effectcontrol1fine`           |\n   * | 45     |`effectcontrol2fine`           |\n   * | 64     |`holdpedal`                    |\n   * | 65     |`portamento`                   |\n   * | 66     |`sustenutopedal`               |\n   * | 67     |`softpedal`                    |\n   * | 68     |`legatopedal`                  |\n   * | 69     |`hold2pedal`                   |\n   * | 70     |`soundvariation`               |\n   * | 71     |`resonance`                    |\n   * | 72     |`soundreleasetime`             |\n   * | 73     |`soundattacktime`              |\n   * | 74     |`brightness`                   |\n   * | 75     |`soundcontrol6`                |\n   * | 76     |`soundcontrol7`                |\n   * | 77     |`soundcontrol8`                |\n   * | 78     |`soundcontrol9`                |\n   * | 79     |`soundcontrol10`               |\n   * | 80     |`generalpurposebutton1`        |\n   * | 81     |`generalpurposebutton2`        |\n   * | 82     |`generalpurposebutton3`        |\n   * | 83     |`generalpurposebutton4`        |\n   * | 91     |`reverblevel`                  |\n   * | 92     |`tremololevel`                 |\n   * | 93     |`choruslevel`                  |\n   * | 94     |`celestelevel`                 |\n   * | 95     |`phaserlevel`                  |\n   * | 96     |`dataincrement`                |\n   * | 97     |`datadecrement`                |\n   * | 98     |`nonregisteredparametercoarse` |\n   * | 99     |`nonregisteredparameterfine`   |\n   * | 100    |`registeredparametercoarse`    |\n   * | 101    |`registeredparameterfine`      |\n   * | 120    |`allsoundoff`                  |\n   * | 121    |`resetallcontrollers`          |\n   * | 122    |`localcontrol`                 |\n   * | 123    |`allnotesoff`                  |\n   * | 124    |`omnimodeoff`                  |\n   * | 125    |`omnimodeon`                   |\n   * | 126    |`monomodeon`                   |\n   * | 127    |`polymodeon`                   |\n   *\n   * Note: as you can see above, not all control change message have a matching name. This does not\n   * mean you cannot use the others. It simply means you will need to use their number (`0` - `127`)\n   * instead of their name. While you can still use them, numbers `120` to `127` are usually\n   * reserved for *channel mode* messages. See [`sendChannelMode()`]{@link #sendChannelMode} method\n   * for more info.\n   *\n   * To view a list of all available **control change** messages, please consult [Table 3 - Control\n   * Change Messages](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * from the MIDI specification.\n   *\n   * @param controller {number|string} The MIDI controller name or number (0-127).\n   *\n   * @param [value=0] {number} The value to send (0-127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendControlChange(controller, value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **pitch bend range** message to the specified channel(s) at the scheduled time so that\n   * they adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param {number} [semitones=0] The desired adjustment value in semitones (between `0` and `127`).\n   * While nothing imposes that in the specification, it is very common for manufacturers to limit\n   * the range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between `0` and\n   * `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPitchBendRange(semitones= 0, cents = 0, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPitchBendRange(semitones, cents, options);\n    });\n\n    return this;\n\n  }\n\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setPitchBendRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendPitchBendRange(semitones, cents, options);\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from `0` to `127`.\n   *\n   * MIDI\n   * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them:\n   *\n   * | Numbers      | Function                 |\n   * |--------------|--------------------------|\n   * | (0x00, 0x00) | `pitchbendrange`         |\n   * | (0x00, 0x01) | `channelfinetuning`      |\n   * | (0x00, 0x02) | `channelcoarsetuning`    |\n   * | (0x00, 0x03) | `tuningprogram`          |\n   * | (0x00, 0x04) | `tuningbank`             |\n   * | (0x00, 0x05) | `modulationrange`        |\n   * | (0x3D, 0x00) | `azimuthangle`           |\n   * | (0x3D, 0x01) | `elevationangle`         |\n   * | (0x3D, 0x02) | `gain`                   |\n   * | (0x3D, 0x03) | `distanceratio`          |\n   * | (0x3D, 0x04) | `maximumdistance`        |\n   * | (0x3D, 0x05) | `maximumdistancegain`    |\n   * | (0x3D, 0x06) | `referencedistanceratio` |\n   * | (0x3D, 0x07) | `panspreadangle`         |\n   * | (0x3D, 0x08) | `rollangle`              |\n   *\n   * Note that the `tuningprogram` and `tuningbank` parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnValue(parameter, data, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnValue(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnValue(parameter, data, options);\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n   * aftertouch, you should instead use [`setKeyAftertouch()`]{@link #setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n   * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n   * the pressure can be defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   * @since 3.0.0\n   */\n  sendChannelAftertouch(pressure, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelAftertouch(pressure, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n   *\n   * The resulting bend is relative to the pitch bend range that has been defined. The range can be\n   * set with [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n   * bend range has been set to 12 semitones, using a bend value of `-1` will bend the note 1 octave\n   * below its nominal value.\n   *\n   * @param {number|number[]} value The intensity of the bend (between `-1.0` and `1.0`). A value of\n   * `0` means no bend. If an invalid value is specified, the nearest valid value will be used\n   * instead. If the `rawValue` option is set to `true`, the intensity of the bend can be defined by\n   * either using a single integer between `0` and `127` (MSB) or an array of two integers between\n   * `0` and `127` representing, respectively, the MSB (most significant byte) and the LSB (least\n   * significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower\n   * than `64` bends downwards while a value higher than `64` bends upwards. The LSB is expressed\n   * in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between `-1.0` and `1.0` (default) or as raw integer between `0` and\n   * 127` (or an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPitchBend(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPitchBend(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n   *\n   * @param {number} [program=0] The MIDI patch (program) number (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendProgramChange(program = 0, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendProgramChange(program, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n   * depth of their modulation wheel's range. The range can be specified with the `semitones`\n   * parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendModulationRange(semitones, cents, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendModulationRange(semitones, cents, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setModulationRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setModulationRange() method is deprecated. Use sendModulationRange() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendModulationRange(semitones, cents, options);\n\n  }\n\n  /**\n   * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n   * larger than `-65` semitones and smaller than `64` semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendMasterTuning(value, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendMasterTuning(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setMasterTuning(value, channel = {}, options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setMasterTuning() method is deprecated. Use sendMasterTuning() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendMasterTuning(value, options);\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning program (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuningProgram(value, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendTuningProgram(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setTuningProgram(value, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setTuningProgram() method is deprecated. Use sendTuningProgram() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendTuningProgram(value, options);\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param {number} [value=0] The desired tuning bank (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuningBank(value= 0, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendTuningBank(value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setTuningBank(parameter, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setTuningBank() method is deprecated. Use sendTuningBank() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendTuningBank(parameter, options);\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n   * send can be specified numerically or by using one of the following common names:\n   *\n   * |  Type                |Number| Shortcut Method                                               |\n   * | ---------------------|------|-------------------------------------------------------------- |\n   * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n   * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n   * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n   * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n   * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n   * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n   * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n   * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n   *\n   * Note: as you can see above, to make it easier, all channel mode messages also have a matching\n   * helper method.\n   *\n   * It should also be noted that, per the MIDI specification, only `localcontrol` and `monomodeon`\n   * may require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * @param {number|string} command The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param {number} [value=0] The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  sendChannelMode(command, value = 0, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelMode(command, value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  sendAllSoundOff(options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendAllSoundOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [`sendAllSoundOff()`]{@link #sendAllSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  sendAllNotesOff(options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendAllNotesOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   */\n  sendResetAllControllers(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendResetAllControllers(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the polyphonic mode. In `poly` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `mono` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param mode {string} The mode to use: `mono` or `poly`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPolyphonicMode(mode, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPolyphonicMode(mode, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendLocalControl(state, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendLocalControl(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to **on** or **off** for the specified channel(s). MIDI's OMNI mode causes the\n   * instrument to respond to messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendOmniMode(state, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendOmniMode(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter to the specified value. The NRPN is selected by passing a\n   * two-position array specifying the values of the two control bytes. The value is specified by\n   * passing a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (`1`, `8`). Therefore, to set the **vibrato rate** value to `123`\n   * you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([1, 8], 123);\n   * ```\n   *\n   * You probably want to should select a channel so the message is not sent to all channels. For\n   * instance, to send to channel `1` of the first output port, you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([1, 8], 123, 1);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (`2`, `63`), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was `10`, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([2, 63], [0, 10], 1);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (`0x63`,\n   * `0x62`) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNrpnValue(parameter, data, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNrpnValue(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setNonRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendNrpnValue(parameter, data, options);\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnIncrement(parameter, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnIncrement(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  incrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnIncrement(parameter, options);\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnDecrement(parameter, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnDecrement(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  decrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnDecrement(parameter, options);\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n   * The first parameter is the note to stop. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n   * `F-1`, `Db7`) or an array of the previous types. When using a note identifier, octave range\n   * must be between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest\n   * note is `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOff(note, options= {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOff(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n   * The first parameter is the note to stop. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  stopNote(note, options) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Plays a note or an array of notes on one or more channels of this output. If you intend to play\n   * notes on a single channel, you should probably use\n   * [`OutputChannel.playNote()`](OutputChannel#playNote) instead.\n   *\n   * The first parameter is the note to play. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`]{@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If no channel is specified, it will send to all channels. If a `duration`\n   * is set in the `options` parameter or in the [`Note`]{@link Note} object's\n   * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message to end\n   * the note after said duration. If no `duration` is set, the note will simply play until a\n   * matching **note off** message is sent with [`stopNote()`]{@link #stopNote}.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n   * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n   * parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types. When using a note identifier,\n   * octave range must be between -1 and 9. The lowest note is C-1 (MIDI note number `0`) and the\n   * highest note is G9 (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of 64.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of 64. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  playNote(note, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy-compatibility warnings\n      if (options.rawVelocity) {\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n      }\n\n      if (options.velocity) {\n        console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n      }\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].playNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note on** message for the specified MIDI note number on the specified channel(s). The\n   * first parameter is the number. It can be a single value or an array of the following valid\n   * values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    // This actually supports passing a Note object even if, semantically, this does not make sense.\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOn(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Name of the MIDI output.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiOutput.name;\n  }\n\n  /**\n   * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiOutput.id;\n  }\n\n  /**\n   * Output port's connection state: `pending`, `open` or `closed`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiOutput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this output port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiOutput.manufacturer;\n  }\n\n  /**\n   * State of the output port: `connected` or `disconnected`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiOutput.state;\n  }\n\n  /**\n   * Type of the output port (it will always be: `output`).\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiOutput.type;\n  }\n\n  /**\n   * An integer to offset the octave of outgoing notes. By default, middle C (MIDI note number 60)\n   * is placed on the 4th octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined in\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n}\n","import {Enumerations} from \"./Enumerations.js\";\nimport {Output} from \"./Output.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you\n * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object\n * to all the outputs listed in its [`destinations`](#destinations) property.\n *\n * If specific channels or message types have been defined in the [`channels`](#channels) or\n * [`types`](#types) properties, only messages matching the channels/types will be forwarded.\n *\n * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as\n * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Forwarder {\n\n  /**\n   * Creates a `Forwarder` object.\n   *\n   * @param {Output|Output[]} [destinations=\\[\\]] An [`Output`](Output) object, or an array of such\n   * objects, to forward the message to.\n   *\n   * @param {object} [options={}]\n   * @param {string|string[]} [options.types=(all messages)] A MIDI message type or an array of such\n   * types (`\"noteon\"`, `\"controlchange\"`, etc.), that the specified message must match in order to\n   * be forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n   * messages are the ones found in either\n   * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES)\n   * or [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * A MIDI channel number or an array of channel numbers that the message must match in order to be\n   * forwarded. By default all MIDI channels are included (`1` to `16`).\n   */\n  constructor(destinations = [], options = {}) {\n\n    /**\n     * An array of [`Output`](Output) objects to forward the message to.\n     * @type {Output[]}\n     */\n    this.destinations = [];\n\n    /**\n     * An array of message types (`\"noteon\"`, `\"controlchange\"`, etc.) that must be matched in order\n     * for messages to be forwarded. By default, this array includes all\n     * [`Enumerations.SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) and\n     * [`Enumerations.CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n     * @type {string[]}\n     */\n    this.types = [\n      ...Object.keys(Enumerations.SYSTEM_MESSAGES),\n      ...Object.keys(Enumerations.CHANNEL_MESSAGES)\n    ];\n\n    /**\n     * An array of MIDI channel numbers that the message must match in order to be forwarded. By\n     * default, this array includes all MIDI channels (`1` to `16`).\n     * @type {number[]}\n     */\n    this.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    /**\n     * Indicates whether message forwarding is currently suspended or not in this forwarder.\n     * @type {boolean}\n     */\n    this.suspended = false;\n\n    // Make sure parameters are arrays\n    if (!Array.isArray(destinations)) destinations = [destinations];\n    if (options.types && !Array.isArray(options.types)) options.types = [options.types];\n    if (options.channels && !Array.isArray(options.channels)) options.channels = [options.channels];\n\n    if (WebMidi.validation) {\n\n      // Validate destinations\n      destinations.forEach(destination => {\n        if ( !(destination instanceof Output) ) {\n          throw new TypeError(\"Destinations must be of type 'Output'.\");\n        }\n      });\n\n      // Validate types\n      if (options.types !== undefined) {\n\n        options.types.forEach(type => {\n          if (\n            ! Enumerations.SYSTEM_MESSAGES.hasOwnProperty(type) &&\n            ! Enumerations.CHANNEL_MESSAGES.hasOwnProperty(type)\n          ) {\n            throw new TypeError(\"Type must be a valid message type.\");\n          }\n        });\n\n      }\n\n      // Validate channels\n      if (options.channels !== undefined) {\n\n        options.channels.forEach(channel => {\n          if (! Enumerations.MIDI_CHANNEL_NUMBERS.includes(channel) ) {\n            throw new TypeError(\"MIDI channel must be between 1 and 16.\");\n          }\n        });\n\n      }\n\n    }\n\n    this.destinations = destinations;\n    if (options.types) this.types = options.types;\n    if (options.channels) this.channels = options.channels;\n\n  }\n\n  /**\n   * Sends the specified message to the forwarder's destination(s) if it matches the specified\n   * type(s) and channel(s).\n   *\n   * @param {Message} message The [`Message`](Message) object to forward.\n   */\n  forward(message) {\n\n    // Abort if forwarding is currently suspended\n    if (this.suspended) return;\n\n    // Abort if this message type should not be forwarded\n    if (!this.types.includes(message.type)) return;\n\n    // Abort if this channel should not be forwarded\n    if (message.channel && !this.channels.includes(message.channel)) return;\n\n    // Forward\n    this.destinations.forEach(destination => {\n      if (WebMidi.validation && !(destination instanceof Output)) return;\n      destination.send(message);\n    });\n\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/src/djipevents.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Note} from \"./Note.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input\n * device. This object is derived from the host's MIDI subsystem and should not be instantiated\n * directly.\n *\n * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)\n * property.\n *\n * @fires InputChannel#midimessage\n * @fires InputChannel#unknownmessage\n *\n * @fires InputChannel#noteoff\n * @fires InputChannel#noteon\n * @fires InputChannel#keyaftertouch\n * @fires InputChannel#programchange\n * @fires InputChannel#channelaftertouch\n * @fires InputChannel#pitchbend\n *\n * @fires InputChannel#allnotesoff\n * @fires InputChannel#allsoundoff\n * @fires InputChannel#localcontrol\n * @fires InputChannel#monomode\n * @fires InputChannel#omnimode\n * @fires InputChannel#resetallcontrollers\n *\n * @fires InputChannel#event:nrpn\n * @fires InputChannel#event:nrpn-dataentrycoarse\n * @fires InputChannel#event:nrpn-dataentryfine\n * @fires InputChannel#event:nrpn-dataincrement\n * @fires InputChannel#event:nrpn-datadecrement\n * @fires InputChannel#event:rpn\n * @fires InputChannel#event:rpn-dataentrycoarse\n * @fires InputChannel#event:rpn-dataentryfine\n * @fires InputChannel#event:rpn-dataincrement\n * @fires InputChannel#event:rpn-datadecrement\n *\n * @fires InputChannel#controlchange\n * @fires InputChannel#event:controlchange-controllerxxx\n * @fires InputChannel#event:controlchange-bankselectcoarse\n * @fires InputChannel#event:controlchange-modulationwheelcoarse\n * @fires InputChannel#event:controlchange-breathcontrollercoarse\n * @fires InputChannel#event:controlchange-footcontrollercoarse\n * @fires InputChannel#event:controlchange-portamentotimecoarse\n * @fires InputChannel#event:controlchange-dataentrycoarse\n * @fires InputChannel#event:controlchange-volumecoarse\n * @fires InputChannel#event:controlchange-balancecoarse\n * @fires InputChannel#event:controlchange-pancoarse\n * @fires InputChannel#event:controlchange-expressioncoarse\n * @fires InputChannel#event:controlchange-effectcontrol1coarse\n * @fires InputChannel#event:controlchange-effectcontrol2coarse\n * @fires InputChannel#event:controlchange-generalpurposecontroller1\n * @fires InputChannel#event:controlchange-generalpurposecontroller2\n * @fires InputChannel#event:controlchange-generalpurposecontroller3\n * @fires InputChannel#event:controlchange-generalpurposecontroller4\n * @fires InputChannel#event:controlchange-bankselectfine\n * @fires InputChannel#event:controlchange-modulationwheelfine\n * @fires InputChannel#event:controlchange-breathcontrollerfine\n * @fires InputChannel#event:controlchange-footcontrollerfine\n * @fires InputChannel#event:controlchange-portamentotimefine\n * @fires InputChannel#event:controlchange-dataentryfine\n * @fires InputChannel#event:controlchange-channelvolumefine\n * @fires InputChannel#event:controlchange-balancefine\n * @fires InputChannel#event:controlchange-panfine\n * @fires InputChannel#event:controlchange-expressionfine\n * @fires InputChannel#event:controlchange-effectcontrol1fine\n * @fires InputChannel#event:controlchange-effectcontrol2fine\n * @fires InputChannel#event:controlchange-damperpedal\n * @fires InputChannel#event:controlchange-portamento\n * @fires InputChannel#event:controlchange-sostenuto\n * @fires InputChannel#event:controlchange-softpedal\n * @fires InputChannel#event:controlchange-legatopedal\n * @fires InputChannel#event:controlchange-hold2\n * @fires InputChannel#event:controlchange-soundvariation\n * @fires InputChannel#event:controlchange-resonance\n * @fires InputChannel#event:controlchange-releasetime\n * @fires InputChannel#event:controlchange-attacktime\n * @fires InputChannel#event:controlchange-brightness\n * @fires InputChannel#event:controlchange-decaytime\n * @fires InputChannel#event:controlchange-vibratorate\n * @fires InputChannel#event:controlchange-vibratodepth\n * @fires InputChannel#event:controlchange-vibratodelay\n * @fires InputChannel#event:controlchange-generalpurposecontroller5\n * @fires InputChannel#event:controlchange-generalpurposecontroller6\n * @fires InputChannel#event:controlchange-generalpurposecontroller7\n * @fires InputChannel#event:controlchange-generalpurposecontroller8\n * @fires InputChannel#event:controlchange-portamentocontrol\n * @fires InputChannel#event:controlchange-highresolutionvelocityprefix\n * @fires InputChannel#event:controlchange-effect1depth\n * @fires InputChannel#event:controlchange-effect2depth\n * @fires InputChannel#event:controlchange-effect3depth\n * @fires InputChannel#event:controlchange-effect4depth\n * @fires InputChannel#event:controlchange-effect5depth\n * @fires InputChannel#event:controlchange-dataincrement\n * @fires InputChannel#event:controlchange-datadecrement\n * @fires InputChannel#event:controlchange-nonregisteredparameterfine\n * @fires InputChannel#event:controlchange-nonregisteredparametercoarse\n * @fires InputChannel#event:controlchange-registeredparameterfine\n * @fires InputChannel#event:controlchange-registeredparametercoarse\n * @fires InputChannel#event:controlchange-allsoundoff\n * @fires InputChannel#event:controlchange-resetallcontrollers\n * @fires InputChannel#event:controlchange-localcontrol\n * @fires InputChannel#event:controlchange-allnotesoff\n * @fires InputChannel#event:controlchange-omnimodeoff\n * @fires InputChannel#event:controlchange-omnimodeon\n * @fires InputChannel#event:controlchange-monomodeon\n * @fires InputChannel#event:controlchange-polymodeon\n * @fires InputChannel#event:\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class InputChannel extends EventEmitter {\n\n  /**\n   * Creates an `InputChannel` object.\n   *\n   * @param {Input} input The [`Input`](Input) object this channel belongs to.\n   * @param {number} number The channel's MIDI number (1-16).\n   */\n  constructor(input, number) {\n\n    super();\n\n    /**\n     * @type {Input}\n     * @private\n     */\n    this._input = input;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * An array of messages that form the current NRPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._nrpnBuffer = [];\n\n    /**\n     * An array of messages that form the current RPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._rpnBuffer = [];\n\n    /**\n     * Indicates whether events for **Registered Parameter Number** and **Non-Registered Parameter\n     * Number** should be dispatched. RPNs and NRPNs are composed of a sequence of specific\n     * **control change** messages. When a valid sequence of such control change messages is\n     * received, an [`rpn`](#event-rpn) or [`nrpn`](#event-nrpn) event will fire.\n     *\n     * If an invalid or out-of-order **control change** message is received, it will fall through\n     * the collector logic and all buffered **control change** messages will be discarded as\n     * incomplete.\n     *\n     * @type {boolean}\n     */\n    this.parameterNumberEventsEnabled = true;\n\n    /**\n     * Contains the current playing state of all MIDI notes of this channel (0-127). The state is\n     * `true` for a currently playing note and `false` otherwise.\n     * @type {boolean[]}\n     */\n    this.notesState = new Array(128).fill(false);\n\n  }\n\n  /**\n   * Destroys the `InputChannel` by removing all listeners and severing the link with the MIDI\n   * subsystem's input.\n   */\n  destroy() {\n    this._input = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this._nrpnBuffer = [];\n    this.notesState = new Array(128).fill(false);\n    this.parameterNumberEventsEnabled = false;\n    this.removeListener();\n  }\n\n  /**\n   * @param e MIDIMessageEvent\n   * @private\n   */\n  _processMidiMessageEvent(e) {\n\n    // Create and emit a new 'midimessage' event based on the incoming one\n    const event = Object.assign({}, e);\n    event.port = this.input;\n    event.target = this;\n    event.type = \"midimessage\";\n\n    /**\n     * Event emitted when a MIDI message of any kind is received by an `InputChannel`\n     *\n     * @event InputChannel#midimessage\n     *\n     * @type {object}\n     *\n     * @property {string} type `midimessage`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n    this.emit(event.type, event);\n\n    // Parse the inbound event for regular MIDI messages\n    this._parseEventForStandardMessages(event);\n\n  }\n\n  /**\n   * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)\n   * @param e Event\n   * @private\n   */\n  _parseEventForStandardMessages(e) {\n\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmessage\";\n\n    const data1 = e.message.dataBytes[0];\n    const data2 = e.message.dataBytes[1];\n\n    if ( event.type === \"noteoff\" || (event.type === \"noteon\" && data2 === 0) ) {\n\n      this.notesState[data1] = false;\n      event.type = \"noteoff\"; // necessary for note on with 0 velocity\n\n      /**\n       * Event emitted when a **note off** MIDI message has been received on the channel.\n       *\n       * @event InputChannel#noteoff\n       *\n       * @type {object}\n       * @property {string} type `noteoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment\n       * ([`DOMHighResTimeStamp`](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp))\n       * when the event occurred (in milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The release velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The release velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n\n      // The object created when a noteoff event arrives is a Note with an attack velocity of 0.\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        {\n          rawAttack: 0,\n          rawRelease: data2,\n        }\n      );\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.release;\n      event.rawVelocity = event.note.rawRelease;\n\n    } else if (event.type === \"noteon\") {\n\n      this.notesState[data1] = true;\n\n      /**\n       * Event emitted when a **note on** MIDI message has been received.\n       *\n       * @event InputChannel#noteon\n       *\n       * @type {object}\n       * @property {string} type `noteon`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The attack velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The attack velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        { rawAttack: data2 }\n      );\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.attack;\n      event.rawVelocity = event.note.rawAttack;\n\n    } else if (event.type === \"keyaftertouch\") {\n\n      /**\n       * Event emitted when a **key-specific aftertouch** MIDI message has been received.\n       *\n       * @event InputChannel#keyaftertouch\n       *\n       * @type {object}\n       * @property {string} type `\"keyaftertouch\"`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name\n       * and number.\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        )\n      );\n\n      // Aftertouch value\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // @deprecated\n      event.identifier = event.note.identifier;\n      event.key = event.note.number;\n      event.rawKey = data1;\n\n    } else if (event.type === \"controlchange\") {\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received.\n       *\n       * @event InputChannel#controlchange\n       *\n       * @type {object}\n       * @property {string} type `controlchange`\n       * @property {string} subtype The type of control change message that was received.\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.controller = {\n        number: data1,\n        name: Enumerations.CONTROL_CHANGE_MESSAGES[data1].name,\n        description: Enumerations.CONTROL_CHANGE_MESSAGES[data1].description,\n        position: Enumerations.CONTROL_CHANGE_MESSAGES[data1].position,\n      };\n\n      event.subtype = event.controller.name || \"controller\" + data1;\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received and that message is\n       * targeting the controller numbered \"xxx\". Of course, \"xxx\" should be replaced by a valid\n       * controller number (0-127).\n       *\n       * @event InputChannel#controlchange-controllerxxx\n       *\n       * @type {object}\n       * @property {string} type `controlchange-controllerxxx`\n       * @property {string} subtype The type of control change message that was received.\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      const numberedEvent = Object.assign({}, event);\n      numberedEvent.type = `${event.type}-controller${data1}`;\n      delete numberedEvent.subtype;\n      this.emit(numberedEvent.type, numberedEvent);\n\n      /**\n       * Event emitted when a **controlchange-bankselectcoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-bankselectcoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-bankselectcoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-modulationwheelcoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-modulationwheelcoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-modulationwheelcoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-breathcontrollercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-breathcontrollercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-breathcontrollercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-footcontrollercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-footcontrollercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-footcontrollercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamentotimecoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamentotimecoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamentotimecoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-dataentrycoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-dataentrycoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-dataentrycoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-volumecoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-volumecoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-volumecoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-balancecoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-balancecoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-balancecoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-pancoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-pancoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-pancoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-expressioncoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-expressioncoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-expressioncoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol1coarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol1coarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol1coarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol2coarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol2coarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol2coarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller1** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller1\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller1`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller2** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller2\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller2`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller3** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller3\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller3`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller4** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller4\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller4`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-bankselectfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-bankselectfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-bankselectfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-modulationwheelfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-modulationwheelfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-modulationwheelfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-breathcontrollerfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-breathcontrollerfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-breathcontrollerfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-footcontrollerfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-footcontrollerfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-footcontrollerfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamentotimefine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamentotimefine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamentotimefine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-dataentryfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-dataentryfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-dataentryfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-channelvolumefine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-channelvolumefine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-channelvolumefine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-balancefine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-balancefine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-balancefine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-panfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-panfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-panfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-expressionfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-expressionfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-expressionfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol1fine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol1fine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol1fine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol2fine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol2fine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol2fine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-damperpedal** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-damperpedal\n       *\n       * @type {object}\n       * @property {string} type `controlchange-damperpedal`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamento** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamento\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamento`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-sostenuto** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-sostenuto\n       *\n       * @type {object}\n       * @property {string} type `controlchange-sostenuto`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-softpedal** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-softpedal\n       *\n       * @type {object}\n       * @property {string} type `controlchange-softpedal`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-legatopedal** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-legatopedal\n       *\n       * @type {object}\n       * @property {string} type `controlchange-legatopedal`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-hold2** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-hold2\n       *\n       * @type {object}\n       * @property {string} type `controlchange-hold2`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-soundvariation** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-soundvariation\n       *\n       * @type {object}\n       * @property {string} type `controlchange-soundvariation`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-resonance** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-resonance\n       *\n       * @type {object}\n       * @property {string} type `controlchange-resonance`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-releasetime** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-releasetime\n       *\n       * @type {object}\n       * @property {string} type `controlchange-releasetime`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-attacktime** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-attacktime\n       *\n       * @type {object}\n       * @property {string} type `controlchange-attacktime`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-brightness** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-brightness\n       *\n       * @type {object}\n       * @property {string} type `controlchange-brightness`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-decaytime** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-decaytime\n       *\n       * @type {object}\n       * @property {string} type `controlchange-decaytime`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-vibratorate** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-vibratorate\n       *\n       * @type {object}\n       * @property {string} type `controlchange-vibratorate`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-vibratodepth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-vibratodepth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-vibratodepth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-vibratodelay** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-vibratodelay\n       *\n       * @type {object}\n       * @property {string} type `controlchange-vibratodelay`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller5** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller5\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller5`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller6** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller6\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller6`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller7** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller7\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller7`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller8** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller8\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller8`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamentocontrol** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamentocontrol\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamentocontrol`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-highresolutionvelocityprefix** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-highresolutionvelocityprefix\n       *\n       * @type {object}\n       * @property {string} type `controlchange-highresolutionvelocityprefix`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect1depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect1depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect1depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect2depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect2depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect2depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect3depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect3depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect3depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect4depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect4depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect4depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect5depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect5depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect5depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-dataincrement** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-dataincrement\n       *\n       * @type {object}\n       * @property {string} type `controlchange-dataincrement`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-datadecrement** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-datadecrement\n       *\n       * @type {object}\n       * @property {string} type `controlchange-datadecrement`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-nonregisteredparameterfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-nonregisteredparameterfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-nonregisteredparameterfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-nonregisteredparametercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-nonregisteredparametercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-nonregisteredparametercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-registeredparameterfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-registeredparameterfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-registeredparameterfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-registeredparametercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-registeredparametercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-registeredparametercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-allsoundoff** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-allsoundoff\n       *\n       * @type {object}\n       * @property {string} type `controlchange-allsoundoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-resetallcontrollers** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-resetallcontrollers\n       *\n       * @type {object}\n       * @property {string} type `controlchange-resetallcontrollers`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-localcontrol** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-localcontrol\n       *\n       * @type {object}\n       * @property {string} type `controlchange-localcontrol`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-allnotesoff** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-allnotesoff\n       *\n       * @type {object}\n       * @property {string} type `controlchange-allnotesoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-omnimodeoff** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-omnimodeoff\n       *\n       * @type {object}\n       * @property {string} type `controlchange-omnimodeoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-omnimodeon** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-omnimodeon\n       *\n       * @type {object}\n       * @property {string} type `controlchange-omnimodeon`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-monomodeon** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-monomodeon\n       *\n       * @type {object}\n       * @property {string} type `controlchange-monomodeon`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-polymodeon** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-polymodeon\n       *\n       * @type {object}\n       * @property {string} type `controlchange-polymodeon`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      const namedEvent = Object.assign({}, event);\n      namedEvent.type = `${event.type}-` + Enumerations.CONTROL_CHANGE_MESSAGES[data1].name;\n      delete namedEvent.subtype;\n\n      // Dispatch controlchange-\"function\" events only if the \"function\" is defined (not the generic\n      // controllerXXX nomenclature)\n      if (namedEvent.type.indexOf(\"controller\") !== 0) {\n        this.emit(namedEvent.type, namedEvent);\n      }\n\n      // Trigger channel mode message events (if appropriate)\n      if (event.message.dataBytes[0] >= 120) this._parseChannelModeMessage(event);\n\n      // Parse the inbound event to see if its part of an RPN/NRPN sequence\n      if (\n        this.parameterNumberEventsEnabled &&\n        this._isRpnOrNrpnController(event.message.dataBytes[0])\n      ) {\n        this._parseEventForParameterNumber(event);\n      }\n\n    } else if (event.type === \"programchange\") {\n\n      /**\n       * Event emitted when a **program change** MIDI message has been received.\n       *\n       * @event InputChannel#programchange\n       *\n       * @type {object}\n       * @property {string} type `programchange`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as an integer between 0 and 127.\n       * @property {number} rawValue  The raw MIDI value expressed as an integer between 0 and 127.\n       */\n      event.value = data1;\n      event.rawValue = event.value;\n\n    } else if (event.type === \"channelaftertouch\") {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#channelaftertouch\n       *\n       * @type {object}\n       * @property {string} type `channelaftertouch`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The raw MIDI value expressed as an integer between 0 and 127.\n       */\n      event.value = Utilities.from7bitToFloat(data1);\n      event.rawValue = data1;\n\n    } else if (event.type === \"pitchbend\") {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received.\n       *\n       * @event InputChannel#pitchbend\n       *\n       * @type {object}\n       * @property {string} type `pitchbend`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The raw MIDI value expressed as an integer (between 0 and\n       * 16383).\n       */\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n      event.rawValue = (data2 << 7) + data1;\n\n    } else {\n      event.type = \"unknownmessage\";\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * @param e {Object}\n   * @private\n   */\n  _parseChannelModeMessage(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.controller.name;\n\n    /**\n     * Event emitted when an \"all sound off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allsoundoff\n     *\n     * @type {object}\n     * @property {string} type `allsoundoff`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"reset all controllers\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#resetallcontrollers\n     *\n     * @type {object}\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"local control\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (local control on) of `false` (local control\n     * off).\n     *\n     * @event InputChannel#localcontrol\n     *\n     * @type {object}\n     * @property {string} type `localcontrol`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value For local control on, the value is `true`. For local control off,\n     * the value is `false`.\n     * @property {boolean} rawValue For local control on, the value is `127`. For local control off,\n     * the value is `0`.\n     */\n    if (event.type === \"localcontrol\") {\n      event.value = event.message.data[2] === 127 ? true : false;\n      event.rawValue = event.message.data[2];\n    }\n\n    /**\n     * Event emitted when an \"all notes off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allnotesoff\n     *\n     * @type {object}\n     * @property {string} type `allnotesoff`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when an \"omni mode\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).\n     *\n     * @event InputChannel#omnimode\n     *\n     * @type {object}\n     * @property {string} type `\"omnimode\"`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     * @property {boolean} rawValue The raw MIDI value\n     */\n    if (event.type === \"omnimodeon\") {\n      event.type = \"omnimode\";\n      event.value = true;\n      event.rawValue = event.message.data[2];\n    } else if (event.type === \"omnimodeoff\") {\n      event.type = \"omnimode\";\n      event.value = false;\n      event.rawValue = event.message.data[2];\n    }\n\n\n    /**\n     * Event emitted when a \"mono/poly mode\" MIDI message has been received. The value property of\n     * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /\n     * poly mode on).\n     *\n     * @event InputChannel#monomode\n     *\n     * @type {object}\n     * @property {string} type `monomode`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     * @property {boolean} rawValue The raw MIDI value\n     */\n    if (event.type === \"monomodeon\") {\n      event.type = \"monomode\";\n      event.value = true;\n      event.rawValue = event.message.data[2];\n    } else if (event.type === \"polymodeon\") {\n      event.type = \"monomode\";\n      event.value = false;\n      event.rawValue = event.message.data[2];\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Parses inbound events to identify RPN/NRPN sequences.\n   * @param e Event\n   * @private\n   */\n  _parseEventForParameterNumber(event) {\n\n    // To make it more legible\n    const controller = event.message.dataBytes[0];\n    const value = event.message.dataBytes[1];\n\n    // A. Check if the message is the start of an RPN (101) or NRPN (99) parameter declaration.\n    if (controller === 99 || controller === 101) {\n\n      this._nrpnBuffer = [];\n      this._rpnBuffer = [];\n\n      if (controller === 99) {                          // 99\n        this._nrpnBuffer = [event.message];\n      } else {                                          // 101\n        // 127 is a reset so we ignore it\n        if (value !== 127) this._rpnBuffer = [event.message];\n      }\n\n    // B. Check if the message is the end of an RPN (100) or NRPN (98) parameter declaration.\n    } else if (controller === 98 || controller === 100) {\n\n      if (controller === 98) {                          // 98\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._rpnBuffer = [];\n\n        // Check if we are in sequence\n        if (this._nrpnBuffer.length === 1) {\n          this._nrpnBuffer.push(event.message);\n        } else {\n          this._nrpnBuffer = []; // out of sequence\n        }\n\n      } else {                                          // 100\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._nrpnBuffer = [];\n\n        // 127 is a reset so we ignore it\n        if (this._rpnBuffer.length === 1 && value !== 127) {\n          this._rpnBuffer.push(event.message);\n        } else {\n          this._rpnBuffer = []; // out of sequence or reset\n        }\n\n      }\n\n    // C. Check if the message is for data entry (6, 38, 96 or 97). Those messages trigger events.\n    } else if (\n      controller === 6 ||\n      controller === 38 ||\n      controller === 96 ||\n      controller === 97\n    ) {\n\n      if (this._rpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"rpn\",\n          this._rpnBuffer[0].dataBytes[1],\n          this._rpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else if (this._nrpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"nrpn\",\n          this._nrpnBuffer[0].dataBytes[1],\n          this._nrpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else {\n        this._nrpnBuffer = [];\n        this._rpnBuffer = [];\n      }\n\n    }\n\n  }\n\n  /**\n   * Indicates whether the specified controller can be part of an RPN or NRPN sequence\n   * @param controller\n   * @returns {boolean}\n   * @private\n   */\n  _isRpnOrNrpnController(controller) {\n\n    return controller === 6 ||\n      controller === 38 ||\n      controller === 96 ||\n      controller === 97 ||\n      controller === 98 ||\n      controller === 99 ||\n      controller === 100 ||\n      controller === 101;\n\n  }\n\n  /**\n   * @private\n   */\n  _dispatchParameterNumberEvent(type, paramMsb, paramLsb, e) {\n\n    type = type === \"nrpn\" ? \"nrpn\" : \"rpn\";\n\n    /**\n     * Event emitted when an **RPN data entry coarse** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataentrycoarse\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataentrycoarse`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data entry fine** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`EnumerationsREGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataentryfine\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataentryfine`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data increment** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataincrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataincrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data decrement** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-datadecrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-datadecrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data entry coarse** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataentrycoarse\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataentrycoarse`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data entry fine** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataentryfine\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataentryfine`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data increment** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataincrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataincrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data decrement** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-datadecrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-datadecrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    const event = {\n      target: e.target,\n      timestamp: e.timestamp,\n      message: e.message,\n      parameterMsb: paramMsb,\n      parameterLsb: paramLsb,\n      value: Utilities.from7bitToFloat(e.message.dataBytes[1]),\n      rawValue: e.message.dataBytes[1],\n    };\n\n    // Identify the parameter (by name for RPN and by number for NRPN)\n    if (type === \"rpn\") {\n\n      event.parameter = Object.keys(Enumerations.REGISTERED_PARAMETERS).find(key => {\n        return Enumerations.REGISTERED_PARAMETERS[key][0] === paramMsb &&\n          Enumerations.REGISTERED_PARAMETERS[key][1] === paramLsb;\n      });\n\n    } else {\n      event.parameter = (paramMsb << 7) + paramLsb;\n    }\n\n    // Type and subtype\n    const subtype = Enumerations.CONTROL_CHANGE_MESSAGES[e.message.dataBytes[0]].name;\n\n    // Emit specific event\n    event.type = `${type}-${subtype}`;\n    this.emit(event.type, event);\n\n    // Begin Legacy Block (remove in v4)\n    const legacyEvent = Object.assign({}, event);\n    if (legacyEvent.type === \"nrpn-dataincrement\") {\n      legacyEvent.type = \"nrpn-databuttonincrement\";\n    } else if (legacyEvent.type === \"nrpn-datadecrement\") {\n      legacyEvent.type = \"nrpn-databuttondecrement\";\n    } else if (legacyEvent.type === \"rpn-dataincrement\") {\n      legacyEvent.type = \"rpn-databuttonincrement\";\n    } else if (legacyEvent.type === \"rpn-datadecrement\") {\n      legacyEvent.type = \"rpn-databuttondecrement\";\n    }\n    this.emit(legacyEvent.type, legacyEvent);\n    // End Legacy Block\n\n    /**\n     * Event emitted when any NRPN message is received on the input. There are four subtypes of NRPN\n     * messages:\n     *\n     *   * `nrpn-dataentrycoarse`\n     *   * `nrpn-dataentryfine`\n     *   * `nrpn-dataincrement`\n     *   * `nrpn-datadecrement`\n     *\n     * The parameter to which the message applies can be found in the event's `parameter` property.\n     *\n     * @event InputChannel#nrpn\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn`\n     * @property {string} subtype The precise type of NRPN message that was received.\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when any RPN message is received on the input. There are four subtypes of RPN\n     * messages:\n     *\n     *   * `rpn-dataentrycoarse`\n     *   * `rpn-dataentryfine`\n     *   * `rpn-dataincrement`\n     *   * `rpn-datadecrement`\n     *\n     * The parameter to which the message applies can be found in the event's `parameter` property.\n     * It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn`\n     * @property {string} subtype The precise type of RPN message that was received.\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    // Emit general event\n    event.type = type;\n    event.subtype = subtype;\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * @deprecated since version 3.\n   * @private\n   */\n  getChannelModeByNumber(number) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n      number = Math.floor(number);\n    }\n\n    return Utilities.getChannelModeByNumber(number);\n\n  }\n\n  /**\n   * @deprecated since version 3.\n   * @private\n   */\n  getCcNameByNumber(number) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getCcNameByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n      number = parseInt(number);\n      if ( !(number >= 0 && number <= 127) ) throw new RangeError(\"Invalid control change number.\");\n    }\n\n    return Utilities.getCcNameByNumber(number);\n\n  }\n\n  /**\n   * Returns the playing status of the specified note (`true` if the note is currently playing,\n   * `false` if it is not). The `note` parameter can be an unsigned integer (0-127), a note\n   * identifier (`\"C4\"`, `\"G#5\"`, etc.) or a [`Note`]{@link Note} object.\n   *\n   * IF the note is specified using an integer (0-127), no octave offset will be applied.\n   *\n   * @param {number|string|Note} note The note to get the state for. The\n   * [`octaveOffset`](#octaveOffset) (channel, input and global) will be factored in for note\n   * identifiers and [`Note`]{@link Note} objects.\n   * @returns {boolean}\n   * @since version 3.0.0\n   */\n  getNoteState(note) {\n\n    // If it's a note object, we simply use the identifier\n    if (note instanceof Note) note = note.identifier;\n\n    const number = Utilities.guessNoteNumber(\n      note,\n      WebMidi.octaveOffset + this.input.octaveOffset + this.octaveOffset\n    );\n\n    return this.notesState[number];\n\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined by\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) object and with the value defined on the parent\n   * input object with [`Input.octaveOffset`](Input#octaveOffset).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The [`Input`](Input) this channel belongs to.\n   * @type {Input}\n   * @since 3.0\n   */\n  get input() {\n    return this._input;\n  }\n\n  /**\n   * This channel's MIDI number (1-16).\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n  /**\n   * Whether RPN/NRPN events are parsed and dispatched.\n   * @type {boolean}\n   * @since 3.0\n   * @deprecated Use parameterNumberEventsEnabled instead.\n   * @private\n   */\n  get nrpnEventsEnabled() {\n    return this.parameterNumberEventsEnabled;\n  }\n  set nrpnEventsEnabled(value) {\n\n    if (this.validation) {\n      value = !!value;\n    }\n\n    this.parameterNumberEventsEnabled = value;\n\n  }\n\n}\n","import {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `Message` class represents a single MIDI message. It has several properties that make it\n * easy to make sense of the binary data it contains.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Message {\n\n  /**\n   * Creates a new `Message` object from raw MIDI data.\n   *\n   * @param {Uint8Array} data The raw data of the MIDI message as a\n   * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n   * of integers between `0` and `255`.\n   */\n  constructor(data) {\n\n    /**\n     * A\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * containing the bytes of the MIDI message. Each byte is an integer between `0` and `255`.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawData = data;\n\n    /**\n     * An array containing all the bytes of the MIDI message. Each byte is an integer between `0`\n     * and `255`.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.data = Array.from(this.rawData);\n\n    /**\n     * The MIDI status byte of the message as an integer between `0` and `255`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.statusByte = this.rawData[0];\n\n    /**\n     * A\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * of the data byte(s) of the MIDI message. When the message is a system exclusive message\n     * (sysex), `rawDataBytes` explicitly excludes the manufacturer ID and the sysex end byte so\n     * only the actual data is included.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawDataBytes = this.rawData.slice(1);\n\n    /**\n     * An array of the the data byte(s) of the MIDI message (as opposed to the status byte). When\n     * the message is a system exclusive message (sysex), `dataBytes` explicitly excludes the\n     * manufacturer ID and the sysex end byte so only the actual data is included.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.dataBytes = this.data.slice(1);\n\n    /**\n     * A boolean indicating whether the MIDI message is a channel-specific message.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isChannelMessage = false;\n\n    /**\n     * A boolean indicating whether the MIDI message is a system message (not specific to a\n     * channel).\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isSystemMessage = false;\n\n    /**\n     * An integer identifying the MIDI command. For channel-specific messages, the value is 4-bit\n     * and will be between `8` and `14`. For system messages, the value will be between `240` and\n     * `255`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.command = undefined;\n\n    /**\n     * The MIDI channel number (`1` - `16`) that the message is targeting. This is only for\n     * channel-specific messages. For system messages, this will be left `undefined`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.channel = undefined;\n\n    /**\n     * When the message is a system exclusive message (sysex), this property contains an array with\n     * either 1 or 3 entries that identify the manufacturer targeted by the message.\n     *\n     * To know how to translate these entries into manufacturer names, check out the official list:\n     * https://www.midi.org/specifications-old/item/manufacturer-id-numbers\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.manufacturerId = undefined;\n\n    /**\n     * The type of message as a string (`\"noteon\"`, `\"controlchange\"`, `\"sysex\"`, etc.)\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = undefined;\n\n    // Assign values to property that vary according to whether they are channel-specific or system\n    if (this.statusByte < 240) {\n      this.isChannelMessage = true;\n      this.command = this.statusByte >> 4;\n      this.channel = (this.statusByte & 0b00001111) + 1;\n    } else {\n      this.isSystemMessage = true;\n      this.command = this.statusByte;\n    }\n\n    // Assign type (depending on whether the message is channel-specific or system)\n    if (this.isChannelMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.CHANNEL_MESSAGES, this.command);\n    } else if (this.isSystemMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.SYSTEM_MESSAGES, this.command);\n    }\n\n    // When the message is a sysex message, we add a manufacturer property and strip out the id from\n    // dataBytes and rawDataBytes.\n    if (this.statusByte === Enumerations.SYSTEM_MESSAGES.sysex) {\n\n      if (this.dataBytes[0] === 0) {\n        this.manufacturerId = this.dataBytes.slice(0, 3);\n        this.dataBytes = this.dataBytes.slice(3, this.rawDataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(3, this.rawDataBytes.length - 1);\n      } else {\n        this.manufacturerId = [this.dataBytes[0]];\n        this.dataBytes = this.dataBytes.slice(1, this.dataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(1, this.rawDataBytes.length - 1);\n      }\n\n    }\n\n  }\n\n}\n","import {Enumerations} from \"./Enumerations.js\";\nimport {EventEmitter} from \"../node_modules/djipevents/src/djipevents.js\";\nimport {Forwarder} from \"./Forwarder.js\";\nimport {InputChannel} from \"./InputChannel.js\";\nimport {Message} from \"./Message.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Input` class represents a single MIDI input port. This object is automatically instantiated\n * by the library according to the host's MIDI subsystem and does not need to be directly\n * instantiated. Instead, you can access all `Input` objects by referring to the\n * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as\n * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and\n * [`WebMidi.getInputById()`](WebMidi#getInputById).\n *\n * Note that a single MIDI device may expose several inputs and/or outputs.\n *\n * **Important**: the `Input` class does not directly fire channel-specific MIDI messages\n * (such as [`noteon`](InputChannel#event:noteon) or\n * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)\n * object does that. However, you can still use the\n * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple\n * [`InputChannel`](InputChannel) objects at once.\n *\n * @fires Input#opened\n * @fires Input#disconnected\n * @fires Input#closed\n * @fires Input#midimessage\n *\n * @fires Input#sysex\n * @fires Input#timecode\n * @fires Input#songposition\n * @fires Input#songselect\n * @fires Input#tunerequest\n * @fires Input#clock\n * @fires Input#start\n * @fires Input#continue\n * @fires Input#stop\n * @fires Input#activesensing\n * @fires Input#reset\n *\n * @fires Input#unknownmidimessage\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nexport class Input extends EventEmitter {\n\n  /**\n   * Creates an `Input` object.\n   *\n   * @param {MIDIInput} midiInput [`MIDIInput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput)\n   * object as provided by the MIDI subsystem (Web MIDI API).\n   */\n  constructor(midiInput) {\n\n    super();\n\n    /**\n     * Reference to the actual MIDIInput object\n     * @private\n     */\n    this._midiInput = midiInput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 [`InputChannel`](InputChannel) objects available for this `Input`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {InputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n\n    /**\n     * @type {Forwarder[]}\n     * @private\n     */\n    this._forwarders = [];\n\n    // Setup listeners\n    this._midiInput.onstatechange = this._onStateChange.bind(this);\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Input` by removing all listeners, emptying the [`channels`](#channels) array and\n   * unlinking the MIDI subsystem. This is mostly for internal use.\n   *\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._forwarders = [];\n    if (this._midiInput) {\n      this._midiInput.onstatechange = null;\n      this._midiInput.onmidimessage = null;\n    }\n    await this.close();\n    this._midiInput = null;\n  }\n\n  /**\n   * Executed when a `\"statechange\"` event occurs.\n   *\n   * @param e\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time,\n      target: this,\n      port: this // for consistency\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the `Input` has been opened by calling the [`open()`]{@link #open}\n       * method.\n       *\n       * @event Input#opened\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `opened`\n       * @property {Input} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       */\n      event.type = \"opened\";\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the `Input` has been closed by calling the\n       * [`close()`]{@link #close} method.\n       *\n       * @event Input#closed\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `closed`\n       * @property {Input} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       */\n      event.type = \"closed\";\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the `Input` becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Input#disconnected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `disconnected`\n       * @property {Input} port Object with properties describing the {@link Input} that was\n       * disconnected. This is not the actual `Input` as it is no longer available.\n       * @property {Input} target The object that dispatched the event.\n       */\n      event.type = \"disconnected\";\n      event.port = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Executed when a `\"midimessage\"` event is received\n   * @param e\n   * @private\n   */\n  _onMidiMessage(e) {\n\n    // Create Message object from MIDI data\n    const message = new Message(e.data);\n\n    /**\n     * Event emitted when any MIDI message is received on an `Input`.\n     *\n     * @event Input#midimessage\n     *\n     * @type {object}\n     *\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Input} target The object that dispatched the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `midimessage`\n     *\n     * @since 2.1\n     */\n    const event = {\n      port: this,\n      target: this,\n      message: message,\n      timestamp: e.timeStamp,\n      type: \"midimessage\",\n\n      data: message.data,           // @deprecated (will be removed in v4)\n      rawData: message.data,        // @deprecated (will be removed in v4)\n      statusByte: message.data[0],  // @deprecated (will be removed in v4)\n      dataBytes: message.dataBytes  // @deprecated (will be removed in v4)\n    };\n\n    this.emit(\"midimessage\", event);\n\n    // Messages are forwarded to InputChannel if they are channel messages or parsed locally for\n    // system messages.\n    if (message.isSystemMessage) {           // system messages\n      this._parseEvent(event);\n    } else if (message.isChannelMessage) {   // channel messages\n      this.channels[message.channel]._processMidiMessageEvent(event);\n    }\n\n    // Forward message if forwarders have been defined\n    this._forwarders.forEach(forwarder => forwarder.forward(message));\n\n  }\n\n  /**\n   * @private\n   */\n  _parseEvent(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    // Add custom property for 'songselect'\n    if (event.type === \"songselect\") {\n      event.song = e.data[1] + 1; // deprecated\n      event.value = e.data[1];\n      event.rawValue = event.value;\n    }\n\n    // Emit event\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Opens the input for usage. This is usually unnecessary as the port is opened automatically when\n   * WebMidi is enabled.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object.\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n    // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n    // are dispatched immediately and that we are ready to listen.\n    try {\n      await this._midiInput.open();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n   * the input is opened again by calling [`Input.open()`](Input#open).\n   *\n   * **Note**: if what you want to do is stop events from being dispatched, you should use\n   * [`eventsSuspended`](#eventsSuspended) instead.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async close() {\n\n    // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n    // event.\n    if (!this._midiInput) return Promise.resolve(this);\n\n    try {\n      await this._midiInput.close();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since v3.0.0 (moved to 'Utilities' class)\n   */\n  getChannelModeByNumber() {\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n    }\n  }\n\n  /**\n   * Adds an event listener that will trigger a function callback when the specified event is\n   * dispatched. The event usually is **input-wide** but can also be **channel-specific**.\n   *\n   * Input-wide events do not target a specific MIDI channel so it makes sense to listen for them\n   * at the `Input` level and not at the [`InputChannel`](InputChannel) level. Channel-specific\n   * events target a specific channel. Usually, in this case, you would add the listener to the\n   * [`InputChannel`](InputChannel) object. However, as a convenience, you can also listen to\n   * channel-specific events directly on an `Input`. This allows you to react to a channel-specific\n   * event no matter which channel it actually came through.\n   *\n   * When listening for an event, you simply need to specify the event name and the function to\n   * execute:\n   *\n   * ```javascript\n   * const listener = WebMidi.inputs[0].addListener(\"midimessage\", e => {\n   *   console.log(e);\n   * });\n   * ```\n   *\n   * Calling the function with an input-wide event (such as\n   * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n   * that was created.\n   *\n   * If you call the function with a channel-specific event (such as\n   * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n   * [`Listener`](Listener) objects that were created (one for each channel):\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction);\n   * ```\n   *\n   * You can also specify which channels you want to add the listener to:\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * In this case, `listeners` is an array containing 3 [`Listener`](Listener) objects. The order of\n   * the listeners in the array follows the order the channels were specified in.\n   *\n   * Note that, when adding channel-specific listeners, it is the [`InputChannel`](InputChannel)\n   * instance that actually gets a listener added and not the `Input` instance. You can check that\n   * by calling [`InputChannel.hasListener()`](InputChannel#hasListener()).\n   *\n   * There are 8 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [`songposition`]{@link Input#event:songposition}\n   *    * [`songselect`]{@link Input#event:songselect}\n   *    * [`sysex`]{@link Input#event:sysex}\n   *    * [`timecode`]{@link Input#event:timecode}\n   *    * [`tunerequest`]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [`clock`]{@link Input#event:clock}\n   *    * [`start`]{@link Input#event:start}\n   *    * [`continue`]{@link Input#event:continue}\n   *    * [`stop`]{@link Input#event:stop}\n   *    * [`activesensing`]{@link Input#event:activesensing}\n   *    * [`reset`]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [`opened`]{@link Input#event:opened}\n   *    * [`closed`]{@link Input#event:closed}\n   *    * [`disconnected`]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [`midimessage`]{@link Input#event:midimessage}\n   *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n   *    * [`controlchange`]{@link InputChannel#event:controlchange}\n   *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n   *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n   *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n   *      * (...)\n   *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n   *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n   *    * [`noteoff`]{@link InputChannel#event:noteoff}\n   *    * [`noteon`]{@link InputChannel#event:noteon}\n   *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n   *    * [`programchange`]{@link InputChannel#event:programchange}\n   *\n   *    Note: you can listen for a specific control change message by using an event name like this:\n   *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n   *    etc.\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n   *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n   *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n   *    * [`monomode`]{@link InputChannel#event:monomode}\n   *    * [`omnimode`]{@link InputChannel#event:omnimode}\n   *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * [`nrpn`]{@link InputChannel#event:nrpn}\n   *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n   *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n   *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}\n   *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * [`rpn`]{@link InputChannel#event:rpn}\n   *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n   *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n   *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}\n   *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}\n   *\n   * @param event {string | EventEmitter.ANY_EVENT} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * An integer between 1 and 16 or an array of such integers representing the MIDI channel(s) to\n   * listen on. If no channel is specified, all channels will be used. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus be triggered before others.\n   *\n   * @param {number} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   *\n   * @returns {Listener|Listener[]} If the event is input-wide, a single [`Listener`](Listener)\n   * object is returned. If the event is channel-specific, an array of all the\n   * [`Listener`](Listener) objects is returned (one for each channel).\n   */\n  addListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = (listener != undefined) ? [].concat(listener) : undefined; // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    // Check if the event is channel-specific or input-wide\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      // If no channel defined, use all.\n      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n      let listeners = [];\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        listeners.push(this.channels[ch].addListener(event, listener, options));\n      });\n\n      return listeners;\n\n    } else {\n\n      return super.addListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Adds a one-time event listener that will trigger a function callback when the specified event\n   * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are\n   * dispatched by [`InputChannel`]{@link InputChannel} objects and are tied to a specific MIDI\n   * channel while input-wide events are dispatched by the `Input` object itself and are not tied\n   * to a specific channel.\n   *\n   * Calling the function with an input-wide event (such as\n   * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n   * that was created.\n   *\n   * If you call the function with a channel-specific event (such as\n   * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n   * [`Listener`](Listener) objects that were created (one for each channel):\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction);\n   * ```\n   *\n   * You can also specify which channels you want to add the listener to:\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * In this case, the `listeners` variable contains an array of 3 [`Listener`](Listener) objects.\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the [`InputChannel`](InputChannel) instance\n   * that actually gets a listener added and not the `Input` instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the [`InputChannel`](InputChannel) object itself.\n   *\n   * There are 8 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [`songposition`]{@link Input#event:songposition}\n   *    * [`songselect`]{@link Input#event:songselect}\n   *    * [`sysex`]{@link Input#event:sysex}\n   *    * [`timecode`]{@link Input#event:timecode}\n   *    * [`tunerequest`]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [`clock`]{@link Input#event:clock}\n   *    * [`start`]{@link Input#event:start}\n   *    * [`continue`]{@link Input#event:continue}\n   *    * [`stop`]{@link Input#event:stop}\n   *    * [`activesensing`]{@link Input#event:activesensing}\n   *    * [`reset`]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [`opened`]{@link Input#event:opened}\n   *    * [`closed`]{@link Input#event:closed}\n   *    * [`disconnected`]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [`midimessage`]{@link Input#event:midimessage}\n   *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n   *    * [`controlchange`]{@link InputChannel#event:controlchange}\n   *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n   *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n   *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n   *      * (...)\n   *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n   *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n   *    * [`noteoff`]{@link InputChannel#event:noteoff}\n   *    * [`noteon`]{@link InputChannel#event:noteon}\n   *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n   *    * [`programchange`]{@link InputChannel#event:programchange}\n   *\n   *    Note: you can listen for a specific control change message by using an event name like this:\n   *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n   *    etc.\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n   *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n   *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n   *    * [`monomode`]{@link InputChannel#event:monomode}\n   *    * [`omnimode`]{@link InputChannel#event:omnimode}\n   *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * [`nrpn`]{@link InputChannel#event:nrpn}\n   *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n   *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n   *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}\n   *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * [`rpn`]{@link InputChannel#event:rpn}\n   *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n   *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n   *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}\n   *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus be triggered before others.\n   *\n   * @returns {Listener[]} An array of all [`Listener`](Listener) objects that were created.\n   */\n  addOneTimeListener(event, listener, options = {}) {\n    options.remaining = 1;\n    return this.addListener(event, listener, options);\n  }\n\n  /**\n   * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n   * @since 2.0.0\n   * @deprecated since v3.0\n   * @private\n   */\n  on(event, channel, listener, options) {\n    return this.addListener(event, channel, listener, options);\n  }\n\n  /**\n   * Checks if the specified event type is already defined to trigger the specified callback\n   * function. For channel-specific events, the function will return `true` only if all channels\n   * have the listener defined.\n   *\n   * @param event {string|Symbol} The type of the event.\n   *\n   * @param listener {function} The callback function to check for.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of such\n   * integers representing the MIDI channel(s) to check. This parameter is ignored for input-wide\n   * events.\n   *\n   * @returns {boolean} Boolean value indicating whether or not the `Input` or\n   * [`InputChannel`](InputChannel) already has this listener defined.\n   */\n  hasListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      // If no channel defined, use all.\n      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n      return Utilities.sanitizeChannels(options.channels).every(ch => {\n        return this.channels[ch].hasListener(event, listener);\n      });\n\n    } else {\n      return super.hasListener(event, listener);\n    }\n\n  }\n\n  /**\n   * Removes the specified event listener. If no listener is specified, all listeners matching the\n   * specified event will be removed. If the event is channel-specific, the listener will be removed\n   * from all [`InputChannel`]{@link InputChannel} objects belonging to that channel. If no event is\n   * specified, all listeners for the `Input` as well as all listeners for all\n   * [`InputChannel`]{@link InputChannel} objects belonging to the `Input` will be removed.\n   *\n   * By default, channel-specific listeners will be removed from all\n   * [`InputChannel`]{@link InputChannel} objects unless the `options.channel` narrows it down.\n   *\n   * @param [type] {string} The type of the event.\n   *\n   * @param [listener] {function} The callback function to check for.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to match. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   *\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    // If the event is not specified, remove everything (channel-specific and input-wide)!\n    if (event == undefined) {\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        if (this.channels[ch]) this.channels[ch].removeListener();\n      });\n      return super.removeListener();\n    }\n\n    // If the event is specified, check if it's channel-specific or input-wide.\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].removeListener(event, listener, options);\n      });\n\n    } else {\n\n      super.removeListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Adds a forwarder that will forward all incoming MIDI messages matching the criteria to the\n   * specified [`Output`](Output) destination(s). This is akin to the hardware MIDI THRU port, with\n   * the added benefit of being able to filter which data is forwarded.\n   *\n   * @param {Output|Output[]} output An [`Output`](Output) object, or an array of such\n   * objects, to forward messages to.\n   * @param {object} [options={}]\n   * @param {string|string[]} [options.types=(all messages)] A message type, or an array of such\n   * types (`noteon`, `controlchange`, etc.), that the message type must match in order to be\n   * forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n   * messages are the ones found in either\n   * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) or\n   * [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * A MIDI channel number or an array of channel numbers that the message must match in order to be\n   * forwarded. By default all MIDI channels are included (`1` to `16`).\n   *\n   * @returns {Forwarder} The [`Forwarder`](Forwarder) object created to handle the forwarding. This\n   * is useful if you wish to manipulate or remove the [`Forwarder`](Forwarder) later on.\n   */\n  addForwarder(output, options = {}) {\n\n    let forwarder;\n\n    // Unless 'output' is a forwarder, create a new forwarder\n    if (output instanceof Forwarder) {\n      forwarder = output;\n    } else {\n      forwarder = new Forwarder(output, options);\n    }\n\n    this._forwarders.push(forwarder);\n    return forwarder;\n\n  }\n\n  /**\n   * Removes the specified [`Forwarder`](Forwarder) object from the input.\n   *\n   * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to remove (the\n   * [`Forwarder`](Forwarder) object is returned when calling `addForwarder()`.\n   */\n  removeForwarder(forwarder) {\n    this._forwarders = this._forwarders.filter(item => item !== forwarder);\n  }\n\n  /**\n   * Checks whether the specified [`Forwarder`](Forwarder) object has already been attached to this\n   * input.\n   *\n   * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to check for (the\n   * [`Forwarder`](Forwarder) object is returned when calling [`addForwarder()`](#addForwarder).\n   * @returns {boolean}\n   */\n  hasForwarder(forwarder) {\n    return this._forwarders.includes(forwarder);\n  }\n\n  /**\n   * Name of the MIDI input.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiInput.name;\n  }\n\n  /**\n   * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiInput.id;\n  }\n\n  /**\n   * Input port's connection state: `pending`, `open` or `closed`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiInput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this input port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiInput.manufacturer;\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note\n   * number 60) is placed on the 4th octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined in the\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) property (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * State of the input port: `connected` or `disconnected`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiInput.state;\n  }\n\n  /**\n   * The port type. In the case of the `Input` object, this is always: `input`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiInput.type;\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  get nrpnEventsEnabled() {\n    if (WebMidi.validation) {\n      console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n    }\n    return false;\n  }\n\n}\n\n// Events that do not have code below them must be placed outside the class definition (?!)\n\n/**\n * Input-wide (system) event emitted when a **system exclusive** message has been received.\n * You should note that, to receive `sysex` events, you must call the\n * [`WebMidi.enable()`](WebMidi#enable()) method with the `sysex` option set to `true`:\n *\n * ```js\n * WebMidi.enable({sysex: true})\n *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n * ```\n *\n * @event Input#sysex\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `sysex`\n *\n */\n\n/**\n * Input-wide (system) event emitted when a **time code quarter frame** message has been\n * received.\n *\n * @event Input#timecode\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `timecode`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song position** message has been received.\n *\n * @event Input#songposition\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `songposition`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song select** message has been received.\n *\n * @event Input#songselect\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} value Song (or sequence) number to select (0-127)\n * @property {string} rawValue Song (or sequence) number to select (0-127)\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **tune request** message has been received.\n *\n * @event Input#tunerequest\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `tunerequest`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **timing clock** message has been received.\n *\n * @event Input#clock\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `clock`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **start** message has been received.\n *\n * @event Input#start\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `start`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **continue** message has been received.\n *\n * @event Input#continue\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `continue`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **stop** message has been received.\n *\n * @event Input#stop\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `stop`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an **active sensing** message has been received.\n *\n * @event Input#activesensing\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `activesensing`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **reset** message has been received.\n *\n * @event Input#reset\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `reset`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an unknown MIDI message has been received. It could\n * be, for example, one of the undefined/reserved messages.\n *\n * @event Input#unknownmessage\n *\n * @type {Object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `unknownmessage`\n *\n * @since 2.1\n */\n","import {EventEmitter} from \"../node_modules/djipevents/src/djipevents.js\";\nimport {Input} from \"./Input.js\";\nimport {Output} from \"./Output.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/*START-CJS*/\n\n// This code will only be included in the CJS version (CommonJS).\n\n/*\n\ncoud we use this instead of eval():\n\nlet jzz = await Object.getPrototypeOf(async function() {}).constructor(`\n  let jzz = await import(\"jzz\");\n  return jzz.default;\n`)();\n\n */\n\n// If this code is executed by Node.js then we must import the `jzz` module. I import it in this\n// convoluted way to prevent Webpack from automatically bundling it in browser bundles where it\n// isn't needed.\nif (Utilities.isNode) {\n\n  // Some environments may have both Node.js and browser runtimes (Electron, NW.js, React Native,\n  // etc.) so we also check for the presence of the window.navigator property.\n  try {\n    window.navigator;\n  } catch (err) {\n    let jzz;\n    eval('jzz = require(\"jzz\")');\n    if (!global.navigator) global.navigator = {}; // for Node.js prior to v21\n    Object.assign(global.navigator, jzz);\n  }\n\n  // The `performance` module appeared in Node.js v8.5.0 but has started to be automatically\n  // imported only in v16+.\n  try {\n    performance;\n  } catch (err) {\n    let performance;\n    eval('performance = require(\"perf_hooks\").performance');\n    global.performance = performance;\n  }\n\n}\n\n/*END-CJS*/\n/**\n * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it\n * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.\n *\n * When using the WebMidi.js library, you should know that the `WebMidi` class has already been\n * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should\n * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6\n * module) version, you get an already-instantiated object when you import the module.\n *\n * @fires WebMidi#connected\n * @fires WebMidi#disabled\n * @fires WebMidi#disconnected\n * @fires WebMidi#enabled\n * @fires WebMidi#error\n * @fires WebMidi#midiaccessgranted\n * @fires WebMidi#portschanged\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nclass WebMidi extends EventEmitter {\n\n  /**\n   * The WebMidi class is a singleton and you cannot instantiate it directly. It has already been\n   * instantiated for you.\n   */\n  constructor() {\n\n    super();\n\n    /**\n     * Object containing system-wide default values that can be changed to customize how the library\n     * works.\n     *\n     * @type {object}\n     *\n     * @property {object}  defaults.note - Default values relating to note\n     * @property {number}  defaults.note.attack - A number between 0 and 127 representing the\n     * default attack velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.release - A number between 0 and 127 representing the\n     * default release velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.duration - A number representing the default duration of\n     * notes (in seconds). Initial value is Infinity.\n     */\n    this.defaults = {\n      note: {\n        attack: Utilities.from7bitToFloat(64),\n        release: Utilities.from7bitToFloat(64),\n        duration: Infinity\n      }\n    };\n\n    /**\n     * The [`MIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n     * instance used to talk to the lower-level Web MIDI API. This should not be used directly\n     * unless you know what you are doing.\n     *\n     * @type {MIDIAccess}\n     * @readonly\n     */\n    this.interface = null;\n\n    /**\n     * Indicates whether argument validation and backwards-compatibility checks are performed\n     * throughout the WebMidi.js library for object methods and property setters.\n     *\n     * This is an advanced setting that should be used carefully. Setting `validation` to `false`\n     * improves performance but should only be done once the project has been thoroughly tested with\n     * `validation` turned on.\n     *\n     * @type {boolean}\n     */\n    this.validation = true;\n\n    /**\n     * Array of all (Input) objects\n     * @type {Input[]}\n     * @private\n     */\n    this._inputs = [];\n\n    /**\n     * Array of disconnected [`Input`](Input) objects. This is used when inputs are plugged back in\n     * to retain their previous state.\n     * @type {Input[]}\n     * @private\n     */\n    this._disconnectedInputs = [];\n\n    /**\n     * Array of all [`Output`](Output) objects\n     * @type {Output[]}\n     * @private\n     */\n    this._outputs = [];\n\n    /**\n     * Array of disconnected [`Output`](Output) objects. This is used when outputs are plugged back\n     * in to retain their previous state.\n     * @type {Output[]}\n     * @private\n     */\n    this._disconnectedOutputs = [];\n\n    /**\n     * Array of statechange events to process. These events must be parsed synchronously so they do\n     * not override each other.\n     *\n     * @type {string[]}\n     * @private\n     */\n    this._stateChangeQueue = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n   * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n   * be displayed to the user.\n   *\n   * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n   * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n   * and system exclusive messages are always enabled. You can check the\n   * [`sysexEnabled`](#sysexEnabled) property to confirm.\n   *\n   * To enable access to software synthesizers available on the host, you would set the `software`\n   * option to `true`. However, this option is only there to future-proof the library as support for\n   * software synths has not yet been implemented in any browser (as of September 2021).\n   *\n   * By the way, if you call the [`enable()`](#enable) method while WebMidi.js is already enabled,\n   * the callback function will be executed (if any), the promise will resolve but the events\n   * ([`\"midiaccessgranted\"`](#event:midiaccessgranted), [`\"connected\"`](#event:connected) and\n   * [`\"enabled\"`](#event:enabled)) will not be fired.\n   *\n   * There are 3 ways to execute code after `WebMidi` has been enabled:\n   *\n   * - Pass a callback function in the `options`\n   * - Listen to the [`\"enabled\"`](#event:enabled) event\n   * - Wait for the promise to resolve\n   *\n   * In order, this is what happens towards the end of the enabling process:\n   *\n   * 1. [`\"midiaccessgranted\"`](#event:midiaccessgranted) event is triggered once the user has\n   * granted access to use MIDI.\n   * 2. [`\"connected\"`](#event:connected) events are triggered (for each available input and output)\n   * 3. [`\"enabled\"`](#event:enabled) event is triggered when WebMidi.js is fully ready\n   * 4. specified callback (if any) is executed\n   * 5. promise is resolved and fulfilled with the `WebMidi` object.\n   *\n   * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n   * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n   * authorize the operation (no matter if the `sysex` option is `true` or not).\n   *\n   * ##### Example\n   * ```js\n   * // Enabling WebMidi and using the promise\n   * WebMidi.enable().then(() => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   * })\n   * ```\n   *\n   * @param [options] {object}\n   *\n   * @param [options.callback] {function} A function to execute once the operation completes. This\n   * function will receive an `Error` object if enabling the Web MIDI API failed.\n   *\n   * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n   *\n   * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method\n   * arguments and setter values. This is an advanced setting that should be used carefully. Setting\n   * [`validation`](#validation) to `false` improves performance but should only be done once the\n   * project has been thoroughly tested with [`validation`](#validation)  turned on.\n   *\n   * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n   * the host system. This is part of the spec but has not yet been implemented by most browsers as\n   * of April 2020.\n   *\n   * @param [options.requestMIDIAccessFunction] {function} A custom function to use to return\n   * the MIDIAccess object. This is useful if you want to use a polyfill for the Web MIDI API\n   * or if you want to use a custom implementation of the Web MIDI API - probably for testing\n   * purposes.\n   *\n   * @async\n   *\n   * @returns {Promise.<WebMidi>} The promise is fulfilled with the `WebMidi` object for\n   * chainability\n   *\n   * @throws {Error} The Web MIDI API is not supported in your environment.\n   * @throws {Error} Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  async enable(options = {}, legacy = false) {\n\n    /*START-ESM*/\n\n    // This block is stripped out of the IIFE and CJS versions where it isn't needed.\n\n    // If this code is executed by Node.js in \"module\" mode (when \"type\": \"module\" is used in the\n    // package.json file), then we must import the `jzz` module. I import it in this convoluted way\n    // to prevent Webpack from automatically bundling it in browser bundles where it isn't needed.\n    if (Utilities.isNode) {\n\n      // Some environments may have both Node.js and browser runtimes (Electron, NW.js, React\n      // Native, etc.) so we also check for the presence of the window.navigator property.\n      try {\n        window.navigator;\n      } catch (err) {\n        let jzz = await Object.getPrototypeOf(async function() {}).constructor(`\n        let jzz = await import(\"jzz\");\n        return jzz.default;\n        `)();\n        if (!global.navigator) global.navigator = {}; // for Node.js prior to v21\n        Object.assign(global.navigator, jzz);\n      }\n\n      // The `performance` module appeared in Node.js v8.5.0 but has started to be automatically\n      // imported only in v16+.\n      try {\n        performance;\n      } catch (err) {\n        global.performance = await Object.getPrototypeOf(async function() {}).constructor(`\n        let perf_hooks = await import(\"perf_hooks\");\n        return perf_hooks.performance;\n        `)();\n      }\n\n    }\n\n    /*END-ESM*/\n\n    this.validation = (options.validation !== false);\n\n    if (this.validation) {\n      // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n      if (typeof options === \"function\") options = {callback: options, sysex: legacy};\n      if (legacy) options.sysex = true;\n    }\n\n    // If already enabled, trigger callback and resolve promise but do not dispatch events.\n    if (this.enabled) {\n      if (typeof options.callback === \"function\") options.callback();\n      return Promise.resolve();\n    }\n\n    /**\n     * Event emitted when an error occurs trying to enable `WebMidi`\n     *\n     * @event WebMidi#error\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `error`\n     * @property {*} error Actual error that occurred\n     */\n    const errorEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"error\",\n      error: undefined\n    };\n\n    /**\n     * Event emitted once the MIDI interface has been successfully created (which implies user has\n     * granted access to MIDI).\n     *\n     * @event WebMidi#midiaccessgranted\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `midiaccessgranted`\n     */\n    const midiAccessGrantedEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"midiaccessgranted\"\n    };\n\n    /**\n     * Event emitted once `WebMidi` has been fully enabled\n     *\n     * @event WebMidi#enabled\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `\"enabled\"`\n     */\n    const enabledEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"enabled\"\n    };\n\n    // Request MIDI access (this is where the prompt will appear)\n    try {\n      if (typeof options.requestMIDIAccessFunction === \"function\") {\n        this.interface = await options.requestMIDIAccessFunction(\n          {sysex: options.sysex, software: options.software}\n        );\n      } else {\n        this.interface = await navigator.requestMIDIAccess(\n          {sysex: options.sysex, software: options.software}\n        );\n      }\n    } catch(err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted'\n    // event. This allows the developer an occasion to assign listeners on 'connected' events.\n    this.emit(\"midiaccessgranted\", midiAccessGrantedEvent);\n\n    // We setup the state change listener before creating the ports so that it properly catches the\n    // the ports' `connected` events\n    this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n    // Update inputs and outputs (this is where `Input` and `Output` objects are created).\n    try {\n      await this._updateInputsAndOutputs();\n    } catch (err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // If we make it here, the ports have been successfully created, so we trigger the 'enabled'\n    // event.\n    this.emit(\"enabled\", enabledEvent);\n\n    // Execute the callback (if any) and resolve the promise with 'this' (for chainability)\n    if (typeof options.callback === \"function\") options.callback();\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Completely disables **WebMidi.js** by unlinking the MIDI subsystem's interface and closing all\n   * [`Input`](Input) and [`Output`](Output) objects that may have been opened. This also means that\n   * listeners added to [`Input`](Input) objects, [`Output`](Output) objects or to `WebMidi` itself\n   * are also destroyed.\n   *\n   * @async\n   * @returns {Promise<Array>}\n   *\n   * @throws {Error} The Web MIDI API is not supported by your environment.\n   *\n   * @since 2.0.0\n   */\n  async disable() {\n\n    // This needs to be done right away to prevent racing conditions in listeners while the inputs\n    // are being destroyed.\n    if (this.interface) this.interface.onstatechange = undefined;\n\n    return this._destroyInputsAndOutputs().then(() => {\n\n      if (navigator && typeof navigator.close === \"function\") navigator.close(); // jzz\n\n      this.interface = null; // also resets enabled, sysexEnabled\n\n      /**\n       * Event emitted once `WebMidi` has been successfully disabled.\n       *\n       * @event WebMidi#disabled\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `\"disabled\"`\n       */\n      let event = {\n        timestamp: this.time,\n        target: this,\n        type: \"disabled\"\n      };\n\n      // Finally, trigger the 'disabled' event and then remove all listeners.\n      this.emit(\"disabled\", event);\n      this.removeListener();\n\n    });\n\n  };\n\n  /**\n   * Returns the [`Input`](Input) object that matches the specified ID string or `false` if no\n   * matching input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n   * [`WebMidi.inputs`](WebMidi#inputs) array. Even though they sometimes look like integers, IDs\n   * are strings.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n   *\n   * @returns {Input} An [`Input`](Input) object matching the specified ID string or `undefined`\n   * if no matching input can be found.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputById(id, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return;\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedInputs.length; i++) {\n        if (this._disconnectedInputs[i].id === id.toString()) return this._disconnectedInputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.inputs.length; i++) {\n        if (this.inputs[i].id === id.toString()) return this.inputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the first [`Input`](Input) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [inputs](WebMidi#inputs) array).\n   *\n   * @returns {Input} The [`Input`](Input) that was found or `undefined` if no input contained the\n   * specified name.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputByName(name, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return;\n      name = name.toString();\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedInputs.length; i++) {\n        if (~this._disconnectedInputs[i].name.indexOf(name)) return this._disconnectedInputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.inputs.length; i++) {\n        if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the first [`Output`](Output) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [`outputs`](#outputs) array).\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n   *\n   * @returns {Output} The [`Output`](Output) that was found or `undefined` if no output matched\n   * the specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputByName(name, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return;\n      name = name.toString();\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedOutputs.length; i++) {\n        if (~this._disconnectedOutputs[i].name.indexOf(name)) return this._disconnectedOutputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.outputs.length; i++) {\n        if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the [`Output`](Output) object that matches the specified ID string or `false` if no\n   * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n   * integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n   * [`WebMidi.outputs`](WebMidi#outputs) array.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n   *\n   * @returns {Output} An [`Output`](Output) object matching the specified ID string. If no\n   * matching output can be found, the method returns `undefined`.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputById(id, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return;\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedOutputs.length; i++) {\n        if (this._disconnectedOutputs[i].id === id.toString()) return this._disconnectedOutputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.outputs.length; i++) {\n        if (this.outputs[i].id === id.toString()) return this.outputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.\n   */\n  noteNameToNumber(name) {\n    if (this.validation) {\n      console.warn(\n        \"The noteNameToNumber() method is deprecated. Use \" +\n        \"Utilities.toNoteNumber() instead.\"\n      );\n    }\n    return Utilities.toNoteNumber(name, this.octaveOffset);\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.\n   */\n  getOctave(number) {\n\n    if (this.validation) {\n      console.warn(\"The getOctave()is deprecated. Use Utilities.getNoteDetails() instead\");\n      number = parseInt(number);\n    }\n\n    if (!isNaN(number) && number >= 0 && number <= 127) {\n      return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;\n    } else {\n      return false;\n    }\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  sanitizeChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\"The sanitizeChannels() method has been moved to the utilities class.\");\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  toMIDIChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\n        \"The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead.\"\n      );\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.\n   */\n  guessNoteNumber(input) {\n\n    if (this.validation) {\n      console.warn(\n        \"The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead.\"\n      );\n    }\n\n    return Utilities.guessNoteNumber(input, this.octaveOffset);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.\n   */\n  getValidNoteArray(notes, options = {}) {\n    if (this.validation) {\n      console.warn(\n        \"The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()\"\n      );\n    }\n    return Utilities.buildNoteArray(notes, options);\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.\n   */\n  convertToTimestamp(time) {\n\n    if (this.validation) {\n      console.warn(\n        \"The convertToTimestamp() method has been moved to Utilities.toTimestamp().\"\n      );\n    }\n\n    return Utilities.toTimestamp(time);\n\n  }\n\n  /**\n   * @return {Promise<void>}\n   * @private\n   */\n  async _destroyInputsAndOutputs() {\n\n    let promises = [];\n\n    this.inputs.forEach(input => promises.push(input.destroy()));\n    this.outputs.forEach(output => promises.push(output.destroy()));\n\n    return Promise.all(promises).then(() => {\n      this._inputs = [];\n      this._outputs = [];\n    });\n\n  }\n\n  /**\n   * @private\n   */\n  _onInterfaceStateChange(e) {\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) port is connected or\n     * disconnected. This event is typically fired whenever a MIDI device is plugged in or\n     * unplugged. Please note that it may fire several times if a device possesses multiple inputs\n     * and/or outputs (which is often the case).\n     *\n     * @event WebMidi#portschanged\n     * @type {object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `portschanged`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     *\n     * @since 3.0.2\n     */\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes available. This event is\n     * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#connected\n     * @type {object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `connected`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     */\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes unavailable. This event\n     * is typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#disconnected\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {string} type `disconnected`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     */\n    let event = {\n      timestamp: e.timeStamp,\n      type: e.port.state,\n      target: this\n    };\n\n    // We check if \"connection\" is \"open\" because connected events are also triggered with\n    // \"connection=closed\"\n    if (e.port.state === \"connected\" && e.port.connection === \"open\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id);\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id);\n      }\n\n      // Emit \"connected\" event\n      this.emit(e.port.state, event);\n\n      // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n      const portsChangedEvent = Object.assign({}, event);\n      portsChangedEvent.type = \"portschanged\";\n      this.emit(portsChangedEvent.type, portsChangedEvent);\n\n    // We check if \"connection\" is \"pending\" because we do not always get the \"closed\" event\n    } else if (e.port.state === \"disconnected\" && e.port.connection === \"pending\") {\n\n      if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id, {disconnected: true});\n      } else if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id, {disconnected: true});\n      }\n\n      // Emit \"disconnected\" event\n      this.emit(e.port.state, event);\n\n      // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n      const portsChangedEvent = Object.assign({}, event);\n      portsChangedEvent.type = \"portschanged\";\n      this.emit(portsChangedEvent.type, portsChangedEvent);\n\n    }\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputsAndOutputs() {\n\n    return Promise.all([\n      this._updateInputs(),\n      this._updateOutputs()\n    ]);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._inputs.length - 1; i >= 0; i--) {\n      const current = this._inputs[i];\n      const inputs = Array.from(this.interface.inputs.values());\n      if (! inputs.find(input => input === current._midiInput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back (which is the\n        // case when the computer goes to sleep and is later brought back online).\n        this._disconnectedInputs.push(current);\n        this._inputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all input ports\n    let promises = [];\n\n    // Add new inputs (if not already present)\n    this.interface.inputs.forEach(nInput => {\n\n      // Check if the input is currently absent from the 'inputs' array.\n      if (! this._inputs.find(input => input._midiInput === nInput) ) {\n\n        // If the input has previously been stashed away, reuse it. If not, create a new one.\n        let input = this._disconnectedInputs.find(input => input._midiInput === nInput);\n        if (!input) input = new Input(nInput);\n        this._inputs.push(input);\n        promises.push(input.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateOutputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._outputs.length - 1; i >= 0; i--) {\n      const current = this._outputs[i];\n      const outputs = Array.from(this.interface.outputs.values());\n      if (! outputs.find(output => output === current._midiOutput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back (which is the\n        // case when the computer goes to sleep and is later brought back online).\n        this._disconnectedOutputs.push(current);\n        this._outputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all output ports\n    let promises = [];\n\n    // Add new outputs (if not already present)\n    this.interface.outputs.forEach(nOutput => {\n\n      // Check if the output is currently absent from the 'outputs' array.\n      if (! this._outputs.find(output => output._midiOutput === nOutput) ) {\n\n        // If the output has previously been stashed away, reuse it. If not, create a new one.\n        let output = this._disconnectedOutputs.find(output => output._midiOutput === nOutput);\n        if (!output) output = new Output(nOutput);\n        this._outputs.push(output);\n        promises.push(output.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all sub-promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  // injectPluginMarkup(parent) {\n  //\n  //   // Silently ignore on Node.js\n  //   if (Utilities.isNode) return;\n  //\n  //   // Default to <body> if no parent is specified\n  //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n  //     parent = document.body;\n  //   }\n  //\n  //   // IE10 needs this:\n  //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n  //\n  //   // Create markup and add to parent\n  //   const obj = document.createElement(\"object\");\n  //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n  //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n  //   obj.style.visibility = \"hidden\";\n  //   obj.style.width = obj.style.height = \"0px\";\n  //   parent.appendChild(obj);\n  //\n  // }\n\n  /**\n   * Indicates whether access to the host's MIDI subsystem is active or not.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.interface !== null;\n  }\n\n  /**\n   * An array of all currently available MIDI inputs.\n   *\n   * @readonly\n   * @type {Input[]}\n   */\n  get inputs() {\n    return this._inputs;\n  }\n\n  /**\n   * @private\n   * @deprecated\n   */\n  get isNode() {\n\n    if (this.validation) {\n      console.warn(\"WebMidi.isNode has been deprecated. Use Utilities.isNode instead.\");\n    }\n\n    return Utilities.isNode;\n\n  }\n\n  /**\n   * @private\n   * @deprecated\n   */\n  get isBrowser() {\n\n    if (this.validation) {\n      console.warn(\"WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead.\");\n    }\n\n    return Utilities.isBrowser;\n\n  }\n\n  /**\n   * An integer to offset the octave of notes received from external devices or sent to external\n   * devices.\n   *\n   * When a MIDI message comes in on an input channel the reported note name will be offset. For\n   * example, if the `octaveOffset` is set to `-1` and a [`\"noteon\"`](InputChannel#event:noteon)\n   * message with MIDI number 60 comes in, the note will be reported as C3 (instead of C4).\n   *\n   * By the same token, when [`OutputChannel.playNote()`](OutputChannel#playNote) is called, the\n   * MIDI note number being sent will be offset. If `octaveOffset` is set to `-1`, the MIDI note\n   * number sent will be 72 (instead of 60).\n   *\n   * @type {number}\n   *\n   * @since 2.1\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * An array of all currently available MIDI outputs as [`Output`](Output) objects.\n   *\n   * @readonly\n   * @type {Output[]}\n   */\n  get outputs() {\n    return this._outputs;\n  }\n\n  /**\n   * Indicates whether the environment provides support for the Web MIDI API or not.\n   *\n   * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n   * the\n   * [`navigator.requestMIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n   * function is available. For example, if you have installed WebMIDIAPIShim.js but no plugin, this\n   * property will be `true` even though actual support might not be there.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get supported() {\n    return (typeof navigator !== \"undefined\" && !!navigator.requestMIDIAccess);\n  }\n\n  /**\n   * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n   * enabled via the [`enable()`](#enable) method.\n   *\n   * @readonly\n   * @type boolean\n   */\n  get sysexEnabled() {\n    return !!(this.interface && this.interface.sysexEnabled);\n  }\n\n  /**\n   * The elapsed time, in milliseconds, since the time\n   * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).\n   * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a\n   * floating-point number, it has sub-millisecond accuracy. According to the\n   * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n   * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n   * browser might only be accurate to one millisecond.\n   *\n   * Note: `WebMidi.time` is simply an alias to `performance.now()`.\n   *\n   * @type {DOMHighResTimeStamp}\n   * @readonly\n   */\n  get time() {\n    return performance.now();\n  }\n\n  /**\n   * The version of the library as a [semver](https://semver.org/) string.\n   *\n   * @readonly\n   * @type string\n   */\n  get version() {\n    return \"[VI]{version}[/VI]\";\n  }\n\n  /**\n   * The flavour of the library. Can be one of:\n   *\n   * * `esm`: ECMAScript Module\n   * * `cjs`: CommonJS Module\n   * * `iife`: Immediately-Invoked Function Expression\n   *\n   * @readonly\n   * @type string\n   * @since 3.0.25\n   */\n  get flavour() {\n    return \"__flavour__\"; // will be replaced during bundling by the correct identifier\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.CHANNEL_EVENTS instead.\n   */\n  get CHANNEL_EVENTS() {\n    if (this.validation) {\n      console.warn(\n        \"The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS.\"\n      );\n    }\n    return Enumerations.CHANNEL_EVENTS;\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.SYSTEM_MESSAGES instead.\n   */\n  get MIDI_SYSTEM_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_SYSTEM_MESSAGES enum has been moved to \" +\n        \"Enumerations.SYSTEM_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.SYSTEM_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.CHANNEL_MODE_MESSAGES instead\n   */\n  get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to \" +\n        \"Enumerations.CHANNEL_MODE_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.CHANNEL_MODE_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.CONTROL_CHANGE_MESSAGES instead.\n   */\n  get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the \" +\n        \"Enumerations.CONTROL_CHANGE_MESSAGES array.\"\n      );\n    }\n\n    return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0. Use Enumerations.REGISTERED_PARAMETERS instead.\n   * @private\n   */\n  get MIDI_REGISTERED_PARAMETER() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_REGISTERED_PARAMETER enum has been moved to \" +\n        \"Enumerations.REGISTERED_PARAMETERS.\"\n      );\n    }\n\n    return Enumerations.REGISTERED_PARAMETERS;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0.\n   * @private\n   */\n  get NOTES() {\n\n    if (this.validation) {\n      console.warn(\"The NOTES enum has been deprecated.\");\n    }\n\n    return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  }\n\n}\n\n// Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n// to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst wm = new WebMidi();\nwm.constructor = null;\n\nexport {Enumerations} from \"./Enumerations.js\";\nexport {Forwarder} from \"./Forwarder.js\";\nexport {Input} from \"./Input.js\";\nexport {InputChannel} from \"./InputChannel.js\";\nexport {Message} from \"./Message.js\";\nexport {Note} from \"./Note.js\";\nexport {Output} from \"./Output.js\";\nexport {OutputChannel} from \"./OutputChannel.js\";\nexport {Utilities} from \"./Utilities.js\";\nexport {wm as WebMidi};\n\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*!\n *  howler.js v2.2.4\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/(\\d+)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (!node.bufferSource) {\n        return self;\n      }\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.4\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Create a new panner node if one doesn't already exist.\n        var panner = sound._panner;\n        if (!panner) {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n          panner = sound._panner\n        }\n\n        // Update the panner values or create a new panner if none exists.\n        panner.coneInnerAngle = pa.coneInnerAngle;\n        panner.coneOuterAngle = pa.coneOuterAngle;\n        panner.coneOuterGain = pa.coneOuterGain;\n        panner.distanceModel = pa.distanceModel;\n        panner.maxDistance = pa.maxDistance;\n        panner.refDistance = pa.refDistance;\n        panner.rolloffFactor = pa.rolloffFactor;\n        panner.panningModel = pa.panningModel;\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"],"names":["event","eventMap","options","entries","this","listener","listeners","params","suspended","Array","args","push","callback","parseInt","duration","timeout","resolve","remaining","setTimeout","reject","assign","target","arguments","undefined","validation","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","modulationwheelcoarse","breathcontrollercoarse","controller3","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","controller9","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","controller14","controller15","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","controller20","controller21","controller22","controller23","controller24","controller25","controller26","controller27","controller28","controller29","controller30","controller31","bankselectfine","modulationwheelfine","breathcontrollerfine","controller35","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","controller41","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","controller46","controller47","controller48","controller49","controller50","controller51","controller52","controller53","controller54","controller55","controller56","controller57","controller58","controller59","controller60","controller61","controller62","controller63","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","controller84","controller85","controller86","controller87","controller88","controller89","controller90","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","controller102","controller103","controller104","controller105","controller106","controller107","controller108","controller109","controller110","controller111","controller112","controller113","controller114","controller115","controller116","controller117","controller118","controller119","allsoundoff","name","description","position","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","gain","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","unknownsystemmessage","attack","wm","release","defaults","note","rawAttack","rawRelease","identifier","fragments","value","_accidental","_octave","toUpperCase","semitoneOffset","octaveOffset","isNaN","result","D","E","F","G","A","B","octave","matches","accidental","toLowerCase","WebMidi","Enumerations","ch","time","parsed","input","output","e","number","RangeError","toString","Math","floor","lsb","min","max","multiplied","key","message","_number","_octaveOffset","removeListener","rawValue","pressure","keyaftertouch","TypeError","controller","map","forEach","controlchange","sendControlChange","parameter","Object","REGISTERED_PARAMETERS","_deselectRegisteredParameter","noteOffOptions","Utilities","sendNoteOff","console","warn","n","noteoff","velocity","noteon","sendChannelMode","send","channelaftertouch","fine","sendRpnValue","Number","semitones","cents","data","nrpn","_setCurrentParameter","_deselectNonRegisteredParameter","isArray","msb","pitchbend","program","programchange","rpn","channels","i","_midiOutput","bind","port","emit","id","manufacturer","state","type","open","err","Promise","merged","set","sysex","SYSTEM_MESSAGES","mode","destinations","types","destination","_nrpnBuffer","notesState","parameterNumberEventsEnabled","fill","data1","data2","dataBytes","rawVelocity","rawKey","numberedEvent","subtype","namedEvent","_rpnBuffer","_dispatchParameterNumberEvent","paramMsb","timestamp","parameterMsb","parameterLsb","paramLsb","command","channel","statusByte","slice","rawDataBytes","length","_midiInput","onmidimessage","_onMidiMessage","_forwarders","_parseEvent","isChannelMessage","addListener","concat","sanitizeChannels","forwarder","window","eval","jzz","global","navigator","performance","from7bitToFloat","error","software","errorEvent","disconnected","promises","outputs","_inputs","_outputs","portsChangedEvent","inputs","from"],"version":3,"file":"index.975ef6c8.js.map","sourceRoot":"/__parcel_source_root/"}